SELECT /*+ ALLOW_HINTS */
  NULL CAPTURE_TIME, NULL NAME, NULL VALUE_STRING FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT 
  NULL CAPTURE_TIME, NULL NAME, NULL VALUE_STRING FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    SQL_ID,
    NUM_CAPTURE_TIMES,
    DATA_SOURCE
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 11:55:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('27.08.9999 00:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      '64vfcj0rcky6d' SQL_ID,
      5 NUM_CAPTURE_TIMES,
      'AWR' DATA_SOURCE         /* AWR, CURRENT, ALL */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    MIN_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    RESTART,
    SQL_ID
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART,
      BI.SQL_ID
    FROM 
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2,
      BASIS_INFO BI
    WHERE
      BI.DBID = HSS2.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR
        BI.INSTANCE_NUMBER = HSS2.INSTANCE_NUMBER ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
  )
),
BIND_CONTENTS AS
( SELECT /*+ MATERIALIZE */
    CAPTURE_TIME,
    POSITION,
    NAME,
    VALUE_STRING
  FROM
  ( SELECT
      MIN(HSB.SNAP_ID) OVER (PARTITION BY HSB.LAST_CAPTURED) MIN_SNAP_ID,
      HSB.SNAP_ID,
      HSB.LAST_CAPTURED CAPTURE_TIME, 
      HSB.POSITION, 
      HSB.NAME, 
      HSB.VALUE_STRING
    FROM 
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_SQLBIND HSB
    WHERE  
      SS.DBID = HSB.DBID AND
      SS.INSTANCE_NUMBER = HSB.INSTANCE_NUMBER AND
      SS.SNAP_ID = HSB.SNAP_ID AND
      HSB.SQL_ID = BI.SQL_ID AND 
      BI.DATA_SOURCE IN ('AWR', 'ALL')
  )
  WHERE
    SNAP_ID = MIN_SNAP_ID
  UNION ALL
  ( SELECT
      SB.LAST_CAPTURED CAPTURE_TIME,
      POSITION,
      NAME,
      VALUE_STRING
    FROM
      BASIS_INFO BI,
      GV$SQL_BIND_CAPTURE SB
    WHERE
      ( BI.INSTANCE_NUMBER = -2 OR SB.INST_ID = BI.INSTANCE_NUMBER ) AND
      SB.SQL_ID = BI.SQL_ID AND
      BI.DATA_SOURCE IN ('CURRENT', 'ALL')
  )
),
DISTINCT_LITERALS AS
( SELECT /*+ MATERIALIZE */
    POSITION, 
    NAME, 
    MIN(VALUE_STRING) EXAMPLE_VALUE,
    COUNT(DISTINCT(VALUE_STRING)) NUM_DISTINCT
  FROM 
    BIND_CONTENTS
  GROUP 
    BY POSITION, NAME
)
SELECT
  'SAMPLES' CAPTURE_TIME,
  ' ' NAME,
  TO_CHAR(COUNT(DISTINCT(CAPTURE_TIME))) VALUE_STRING
FROM
  BIND_CONTENTS
UNION ALL
( SELECT
    ' ' CAPTURE_TIME,
    ' ' NAME,
    ' ' VALUE_STRING
  FROM
    DUAL
)
UNION ALL
( SELECT 
    DECODE(ROWNUM, 1, 'CONSTANT', ' ') CAPTURE_TIME,
    NAME,
    VALUE_STRING
  FROM
  ( SELECT 
      NAME, 
      CHR(39) || EXAMPLE_VALUE || CHR(39) VALUE_STRING
    FROM 
      DISTINCT_LITERALS
    WHERE 
      NUM_DISTINCT = 1
    ORDER BY 
      POSITION
  )
)
UNION ALL 
( SELECT 
    ' ' CAPTURE_TIME,
    ' ' NAME,
    ' ' VALUE_STRING
  FROM 
    DUAL 
)
UNION ALL
( SELECT 
    CAPTURE_TIME,
    NAME,
    VALUE_STRING
  FROM
  ( SELECT
      DECODE(CAPTURE_TIME, LAG(CAPTURE_TIME, 1) OVER
        (ORDER BY CAPTURE_TIME DESC, BC.POSITION), ' ', 
        TO_CHAR(CAPTURE_TIME, 'YYYY-MM-DD HH24:MI:SS')) CAPTURE_TIME,
      BC.NAME NAME, 
      CHR(39) || VALUE_STRING || CHR(39) VALUE_STRING,
      BI.NUM_CAPTURE_TIMES,
      NC.NUM_NOT_CONSTANT
    FROM 
      BASIS_INFO BI,
      BIND_CONTENTS BC, 
      DISTINCT_LITERALS DL,
      ( SELECT COUNT(*) NUM_NOT_CONSTANT FROM DISTINCT_LITERALS WHERE NUM_DISTINCT > 1 ) NC
    WHERE 
      BC.NAME = DL.NAME AND 
      DL.NUM_DISTINCT > 1
    ORDER BY 
      BC.CAPTURE_TIME DESC, 
      BC.POSITION
  )
  WHERE
    NUM_CAPTURE_TIMES = -1 OR ROWNUM <= NUM_CAPTURE_TIMES * NUM_NOT_CONSTANT
)
));
