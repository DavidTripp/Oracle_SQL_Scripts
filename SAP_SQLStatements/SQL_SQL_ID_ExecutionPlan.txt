SELECT NULL ID, NULL P1, NULL P2, NULL P3 FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL ID, NULL P1, NULL P2, NULL P3 FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    SQL_ID,
    PLAN_HASH,
    SQL_PLAN_SOURCE,
    COLUMN_LINE_LEN,
    PREDICATE_LINE_LEN,
    INCLUDE_PREDICATES
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      '2ysnk12649z6y' SQL_ID,
      -1 PLAN_HASH,
      'ALL' SQL_PLAN_SOURCE,    /* CURRENT -> GV$ views, HISTORY -> DBA view, ALL -> both */
      200 COLUMN_LINE_LEN,
      60 PREDICATE_LINE_LEN,
      'X' INCLUDE_PREDICATES
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SQL_PLANS AS
( SELECT 
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    SQL_ID,
    DEPTH,
    OPTIMIZER,
    INST_ID,
    OPERATION || DECODE(OPTIONS, NULL, NULL, ' ' || OPTIONS ) ||
      DECODE(OBJECT_NAME, NULL, NULL, ' (' || OBJECT_NAME || ')') ACTION_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', 
      DECODE(SOURCE, 'HISTORY', 
        DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS), 
        NULL),
      DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS)) SEARCH_COLUMNS_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(ACCESS_PREDICATES, NULL, NULL, 
      SUBSTR(ACCESS_PREDICATES, 1, 3000)), NULL) ACCESS_PREDICATE_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(FILTER_PREDICATES, NULL, NULL, 
      SUBSTR(FILTER_PREDICATES, 1, 3000)), NULL) FILTER_PREDICATE_INFO,
    DECODE(MEMORY_USED, NULL, NULL, 'PGA space: ' || ROUND(MEMORY_USED / 1024) || ' KB' || 
      DECODE(TEMP_SPACE, NULL, NULL, ', Temp space: ' || ROUND(TEMP_SPACE / 1024) || ' KB')) SPACE_INFO,
    DECODE(PARTITION_START, NULL, NULL, 'Partitions: ' || PARTITION_START || ' - ' || PARTITION_STOP ||
      ', Partition ID: ' || PARTITION_ID) PARTITION_INFO,
    DECODE(PX_DEGREE, NULL, NULL, 1, NULL, 'PX degree: ' || PX_DEGREE) PX_INFO,
    DECODE(COST, NULL, NULL, 'Total costs: ' || TO_CHAR(COST) ) || 
      DECODE(IO_COST, NULL, NULL, ', I/O costs: ' || TO_CHAR(IO_COST) ) || 
      DECODE(IO_COST, NULL, NULL, DECODE(IO_COST, NULL, NULL, ', CPU costs: ' || TO_CHAR(COST - IO_COST) ) ) || 
      DECODE(CARDINALITY, NULL, NULL, DECODE(IO_COST || COST, NULL, NULL, ', ') || 
      'E-Rows: ' || TO_CHAR(CARDINALITY) ) COST_INFO,
    DECODE(LAST_STARTS, NULL , NULL, 'Starts: ' || LAST_STARTS || ', A-Rows: ' || LAST_OUTPUT_ROWS || ', Gets: ' || LAST_BUFFER_GETS ||
      ', Reads: ' || LAST_DISK_READS || ', Time: ' || LAST_ELAPSED_TIME || ' us') PLAN_STATISTICS_INFO
  FROM 
  ( ( SELECT
        SP.PLAN_HASH_VALUE,
        TO_CHAR(SP.CHILD_NUMBER) CHILD_NUMBER,
        SP.ID,
        SP.SEARCH_COLUMNS,
        SP."DEPTH",
        SP.OPERATION,
        SP.OPTIONS,
        SP.OBJECT_NAME,
        SP.ACCESS_PREDICATES,
        SP.FILTER_PREDICATES,
        SP.TEMP_SPACE,
        SPA.LAST_MEMORY_USED MEMORY_USED,
        SPA.LAST_DEGREE PX_DEGREE,
        SP.PARTITION_START,
        SP.PARTITION_STOP,
        SP.PARTITION_ID,
        SP.COST,
        SP.IO_COST,
        SP.CARDINALITY,
        SPA.LAST_STARTS,
        SPA.LAST_OUTPUT_ROWS,
        SPA.LAST_CR_BUFFER_GETS + SPA.LAST_CU_BUFFER_GETS LAST_BUFFER_GETS,
        SPA.LAST_DISK_READS,
        SPA.LAST_ELAPSED_TIME,
        SP.OPTIMIZER,
        TO_CHAR(SP.INST_ID) INST_ID,
        BI.SQL_ID,
        BI.INCLUDE_PREDICATES,
        'CURRENT' SOURCE
      FROM
        GV$SQL_PLAN SP, 
        GV$SQL_PLAN_STATISTICS_ALL SPA,
        BASIS_INFO BI
      WHERE
        SP.INST_ID = SPA.INST_ID (+) AND
        SP.SQL_ID = SPA.SQL_ID (+) AND
        SP.CHILD_NUMBER = SPA.CHILD_NUMBER (+) AND
        SP.ID = SPA.ID (+) AND
        SP.SQL_ID = BI.SQL_ID AND
        ( BI.PLAN_HASH = -1 OR SP.PLAN_HASH_VALUE = BI.PLAN_HASH ) AND
        ( BI.INSTANCE_NUMBER = -2 OR SP.INST_ID = BI.INSTANCE_NUMBER ) AND
        BI.SQL_PLAN_SOURCE IN ('ALL', 'CURRENT')
    ) 
    UNION 
    ( SELECT
        PLAN_HASH_VALUE,
        'n/a' CHILD_NUMBER,
        ID,
        SEARCH_COLUMNS,
        DEPTH,
        OPERATION,
        OPTIONS,
        OBJECT_NAME,
        ACCESS_PREDICATES,
        FILTER_PREDICATES,
        TEMP_SPACE,
        NULL MEMORY_USED,
        NULL PX_DEGREE,
        PARTITION_START,
        PARTITION_STOP,
        PARTITION_ID,
        COST,
        IO_COST,
        CARDINALITY,
        NULL LAST_STARTS,
        NULL LAST_OUTPUT_ROWS,
        NULL LAST_BUFFER_GETS,
        NULL LAST_DISK_READS,
        NULL LAST_ELAPSED_TIME,
        OPTIMIZER,
        'n/a' INST_ID,
        BI.SQL_ID,
        BI.INCLUDE_PREDICATES,
        'HISTORY' SOURCE
      FROM
        DBA_HIST_SQL_PLAN HSP,
        BASIS_INFO BI
      WHERE
        HSP.SQL_ID = BI.SQL_ID AND
        ( BI.PLAN_HASH = -1 OR HSP.PLAN_HASH_VALUE = BI.PLAN_HASH ) AND
        ( BI.SQL_PLAN_SOURCE = 'HISTORY' OR
          BI.SQL_PLAN_SOURCE = 'ALL' AND
          NOT EXISTS 
          ( SELECT 
              1 
            FROM 
              GV$SQL_PLAN SP
            WHERE 
              SP.SQL_ID = HSP.SQL_ID AND 
              SP.PLAN_HASH_VALUE = HSP.PLAN_HASH_VALUE AND
              ( BI.INSTANCE_NUMBER = -2 OR SP.INST_ID = BI.INSTANCE_NUMBER )
          )
        )
    )
  )
),
PREDICATE_INFOS AS
( SELECT
    'ACCESS' PREDICATE_TYPE,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    DEPTH, 
    ' Access predicates: ' || ACCESS_PREDICATE_INFO || ' ' PREDICATE_INFO
  FROM
    SQL_PLANS
  WHERE
    ACCESS_PREDICATE_INFO IS NOT NULL
  UNION ALL
  ( SELECT
      'FILTER' PREDICATE_TYPE,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      DEPTH,
      ' Filter predicates: ' || FILTER_PREDICATE_INFO || ' ' PREDICATE_INFO
    FROM
      SQL_PLANS
    WHERE
      FILTER_PREDICATE_INFO IS NOT NULL
  )
  UNION ALL
  ( SELECT
      'DUMMY' PREDICATE_TYPE,
      123 PLAN_HASH_VALUE,
      '345' CHILD_NUMBER,
      567 ID,
      789 DEPTH,
      ' XXX ' PREDICATE_INFO
    FROM
      DUAL
  )
),
PRED_START_POSITIONS AS
( SELECT
    *
  FROM
  ( SELECT 
      PREDICATE_TYPE,
      PREDICATE_INFO,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID, 
      INSTR(PREDICATE_INFO, ' ', 1, ROWN) POS,
      BI.PREDICATE_LINE_LEN
    FROM
      BASIS_INFO BI,
      PREDICATE_INFOS PI,
      ( SELECT ROWNUM ROWN FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 1000 ) RN
  )
  WHERE
    POS != 0
),
PRED_START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    POS1,
    PREDICATE_TYPE || PLAN_HASH_VALUE || CHILD_NUMBER || ID || POS1 CONN_ID1,
    POS2,
    PREDICATE_TYPE || PLAN_HASH_VALUE || CHILD_NUMBER || ID || POS2 CONN_ID2
  FROM
  ( SELECT
      PREDICATE_TYPE,
      PREDICATE_INFO,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      POS1,
      NVL(POS2, POS_OVERFLOW) POS2
    FROM
    ( SELECT
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.PLAN_HASH_VALUE,
        SP1.CHILD_NUMBER,
        SP1.ID,
        SP1.POS POS1,
        MAX(SP2.POS) POS2,
        MIN(SP3.POS) POS_OVERFLOW
      FROM
        BASIS_INFO BI,
        PRED_START_POSITIONS SP1,
        PRED_START_POSITIONS SP2,
        PRED_START_POSITIONS SP3
      WHERE
        SP2.PREDICATE_TYPE (+) = SP1.PREDICATE_TYPE AND
        SP2.PLAN_HASH_VALUE (+) = SP1.PLAN_HASH_VALUE AND
        SP2.CHILD_NUMBER (+) = SP1.CHILD_NUMBER AND
        SP2.ID (+) = SP1.ID AND
        SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + SP1.PREDICATE_LINE_LEN AND
        SP3.PREDICATE_TYPE = SP1.PREDICATE_TYPE AND
        SP3.PLAN_HASH_VALUE = SP1.PLAN_HASH_VALUE AND
        SP3.CHILD_NUMBER = SP1.CHILD_NUMBER AND
        SP3.ID = SP1.ID AND
        SP3.POS > SP1.POS
      GROUP BY
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.PLAN_HASH_VALUE,
        SP1.CHILD_NUMBER,
        SP1.ID,
        SP1.POS
    )
  )  
),
PRED_START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    POS1,
    POS2,
    ROW_NUMBER () OVER (ORDER BY POS1) LINE
  FROM
    PRED_START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR 
    CONN_ID2 = CONN_ID1
),
LINES AS
( SELECT 1 NUM, 'ACTION' CONTENT FROM DUAL
  UNION ALL
  SELECT 2 NUM, 'COST' CONTENT FROM DUAL 
  UNION ALL
  SELECT 3 NUM, 'SEARCH COLUMNS' CONTENT FROM DUAL
  UNION ALL
  SELECT 4 NUM, 'ACCESS PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 5 NUM, 'FILTER PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 6 NUM, 'SPACE' CONTENT FROM DUAL
  UNION ALL
  SELECT 7 NUM, 'PARTITION' CONTENT FROM DUAL
  UNION ALL
  SELECT 8 NUM, 'PX' CONTENT FROM DUAL
  UNION ALL
  SELECT 9 NUM, 'PLAN STATISTICS' CONTENT FROM DUAL
  UNION ALL
  SELECT 10 NUM, 'EMPTY' CONTENT FROM DUAL
)
SELECT
  ID,
  SUBSTR(SQL_PLAN_STEP, 1, COLUMN_LINE_LEN) SQL_PLAN_STEP1,
  SUBSTR(SQL_PLAN_STEP, COLUMN_LINE_LEN + 1, COLUMN_LINE_LEN) SQL_PLAN_STEP2,
  SUBSTR(SQL_PLAN_STEP, COLUMN_LINE_LEN * 2 + 1, COLUMN_LINE_LEN) SQL_PLAN_STEP3
FROM
( SELECT
    LPAD(DECODE(L.NUM, 1, TO_CHAR(SP.ID), ' '), 4) ID,
    LPAD(' ', SP.DEPTH * 2) ||
      DECODE(L.CONTENT, 
        'ACTION',           ACTION_INFO || DECODE(SP.ID, 0, 
                            ' (SQL_ID: ' || SP.SQL_ID || 
                            ', Plan Hash: ' || SP.PLAN_HASH_VALUE || 
                            ', Child: ' || SP.CHILD_NUMBER || 
                            /* ', Instance: ' || SP.INST_ID || */ ')'),
        'COST',             '  ' || COST_INFO,
        'SEARCH COLUMNS',   '  ' || SEARCH_COLUMNS_INFO,
        'ACCESS PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') || 
                            SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
        'FILTER PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') || 
                            SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
        'SPACE',            '  ' || SPACE_INFO,
        'PARTITION',        '  ' || PARTITION_INFO,
        'PX',               '  ' || PX_INFO,
        'PLAN STATISTICS',  '  ' || PLAN_STATISTICS_INFO,
        'EMPTY',            ' ') SQL_PLAN_STEP,
    BI.COLUMN_LINE_LEN,
    SP.INST_ID
  FROM
    BASIS_INFO BI,
    LINES L,
    SQL_PLANS SP,
    PRED_START_END_LINE_POSITIONS PL
  WHERE
    ( L.CONTENT = 'ACTION' AND PL.LINE = 1 OR
      L.CONTENT = 'COST' AND SP.COST_INFO IS NOT NULL AND PL.LINE = 1  OR
      L.CONTENT = 'SEARCH COLUMNS' AND SP.SEARCH_COLUMNS_INFO IS NOT NULL AND PL.LINE = 1 OR
      L.CONTENT = 'ACCESS PREDICATE' AND SP.ACCESS_PREDICATE_INFO IS NOT NULL AND 
        PL.PREDICATE_TYPE = 'ACCESS' AND PL.PLAN_HASH_VALUE = SP.PLAN_HASH_VALUE AND
        PL.CHILD_NUMBER = SP.CHILD_NUMBER AND PL.ID = SP.ID OR
      L.CONTENT = 'FILTER PREDICATE' AND SP.FILTER_PREDICATE_INFO IS NOT NULL AND 
        PL.PREDICATE_TYPE = 'FILTER' AND PL.PLAN_HASH_VALUE = SP.PLAN_HASH_VALUE AND
        PL.CHILD_NUMBER = SP.CHILD_NUMBER AND PL.ID = SP.ID OR
      L.CONTENT = 'SPACE'            AND SP.SPACE_INFO IS NOT NULL AND PL.LINE = 1 OR
      L.CONTENT = 'PARTITION'        AND SP.PARTITION_INFO IS NOT NULL AND PL.LINE = 1 OR
      L.CONTENT = 'PX'               AND SP.PX_INFO IS NOT NULL AND PL.LINE = 1 OR
      L.CONTENT = 'PLAN STATISTICS'  AND SP.PLAN_STATISTICS_INFO IS NOT NULL AND PL.LINE = 1 OR
      L.CONTENT = 'EMPTY' AND PL.LINE = 1
    )
  ORDER BY
    SP.INST_ID,
    SP.PLAN_HASH_VALUE,
    SP.CHILD_NUMBER,
    SP.ID,
    L.NUM,
    PL.POS1
)
));