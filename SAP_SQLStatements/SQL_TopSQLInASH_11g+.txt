SELECT NULL SQL_ID, NULL COMMAND, NULL ASH_POS, NULL ASH_TIME_S, NULL HIST_POS,
  NULL HIST_TIME_S, NULL SQLSTATS_POS, NULL SQLSTATS_TIME_S, NULL SQL_POS,
  NULL SQL_TIME_S FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL SQL_ID, NULL COMMAND, NULL ASH_POS, NULL ASH_TIME_S, NULL HIST_POS,
  NULL HIST_TIME_S, NULL SQLSTATS_POS, NULL SQLSTATS_TIME_S, NULL SQL_POS,
  NULL SQL_TIME_S FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS /* 11g: SQL_OPNAME of ASH instead of AUDIT_ACTIONS */
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    NUM_RECORDS
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      TO_DATE('01.01.1000 00:00:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 01:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      100 NUM_RECORDS
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT
    HSS.DBID,
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    HSS.DBID = BI.DBID AND
    HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER AND
    HSS.BEGIN_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.END_INTERVAL_TIME <= BI.END_TIME AND
    ( BI.BEGIN_SNAP_ID = -1 OR HSS.SNAP_ID >= BI.BEGIN_SNAP_ID ) AND
    ( BI.END_SNAP_ID = -1 OR HSS.SNAP_ID <= BI.END_SNAP_ID )
  GROUP BY
    HSS.DBID,
    HSS.INSTANCE_NUMBER
)
SELECT
  'BEGIN: ' || TO_CHAR(BEGIN_TIME, 'dd.mm.yyyy') SQL_ID,
  TO_CHAR(BEGIN_TIME, 'hh24:mi:ss') COMMAND,
  NULL ASH_POS,
  NULL ASH_TIME_S,
  NULL HIST_POS,
  NULL HIST_TIME_S,
  NULL SQLSTATS_POS,
  NULL SQLSTATS_TIME_S,
  NULL SQL_POS,
  NULL SQL_TIME_S
FROM
  SNAPSHOTS
UNION ALL
( SELECT
    'END:   ' || TO_CHAR(END_TIME, 'dd.mm.yyyy') SQL_ID,
    TO_CHAR(END_TIME, 'hh24:mi:ss') COMMAND,
    NULL ASH_POS,
    NULL ASH_TIME_S,
    NULL HIST_POS,
    NULL HIST_TIME_S,
    NULL SQLSTATS_POS,
    NULL SQLSTATS_TIME_S,
    NULL SQL_POS,
    NULL SQL_TIME_S
  FROM
    SNAPSHOTS
)
UNION ALL
( SELECT
    'INSTANCE: ' SQL_ID,
    TO_CHAR(INSTANCE_NUMBER) COMMAND,
    NULL ASH_POS,
    NULL ASH_TIME_S,
    NULL HIST_POS,
    NULL HIST_TIME_S,
    NULL SQLSTATS_POS,
    NULL SQLSTATS_TIME_S,
    NULL SQL_POS,
    NULL SQL_TIME_S
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    NULL SQL_ID,
    NULL COMMAND,
    NULL ASH_POS,
    NULL ASH_TIME_S,
    NULL HIST_POS,
    NULL HIST_TIME_S,
    NULL SQLSTATS_POS,
    NULL SQLSTATS_TIME_S,
    NULL SQL_POS,
    NULL SQL_TIME_S
  FROM
    SNAPSHOTS
)
UNION ALL
( SELECT
    SQL_ID,
    COMMAND,
    TO_CHAR(ROWNUM, 999990) ASH_POS,
    TO_CHAR(ASH_SAMPLES * 10, 999999990) ASH_TIME_S,
    TO_CHAR(HIST_POS, 9999990) HIST_POS,
    TO_CHAR(HIST_TIME_S, 9999999990) HIST_TIME_S,
    TO_CHAR(SQLSTATS_POS, 99999999990) SQLSTATS_POS,
    TO_CHAR(SQLSTATS_TIME_S, 99999999999990) SQLSTATS_TIME_S,
    TO_CHAR(SQL_POS, 999990) SQL_POS,
    TO_CHAR(SQL_TIME_S, 999999990) SQL_TIME_S
  FROM
  ( SELECT
      ASH.SQL_ID SQL_ID,
      DECODE (MIN(ASH.SQL_OPNAME),
        'ALTER INDEX',     'ALI',
        'ALTER TABLE',     'ALT',
        'ANALYZE CLUSTER', 'ANC',
        'ANALYZE INDEX',   'ANI',
        'ANALYZE TABLE',   'ANT',
        'CREATE INDEX',    'CRI',
        'CALL METHOD',     'CLM',
        'CREATE TABLE',    'CRT',
        'DELETE',          'DEL',
        'EXPLAIN',         'EXP',
        'INSERT',          'INS',
        'LOCK TABLE',      'LKT',
        'PL/SQL EXECUTE',  'PLS',
        'SELECT',          'SEL',
        'TRUNCATE TABLE',  'TRT',
        'UNKNOWN',         'UNK',
        'UPDATE',          'UPD',
        'UPSERT',          'UPS',
        MIN(ASH.SQL_OPNAME)) COMMAND,
      COUNT(*) ASH_SAMPLES,
      HIST_POS,
      HIST_TIME_S,
      SQLSTATS_POS,
      SQLSTATS_TIME_S,
      SQL_POS,
      SQL_TIME_S
    FROM
      DBA_HIST_ACTIVE_SESS_HISTORY ASH, 
      SNAPSHOTS SNS,
      ( SELECT
          SQL_ID,
          HIST_TIME_S,
          ROWNUM HIST_POS
        FROM
        ( SELECT 
            HSS.SQL_ID SQL_ID,
            ROUND(SUM(HSS.ELAPSED_TIME_DELTA) / 1000000) HIST_TIME_S
          FROM 
            DBA_HIST_SQLSTAT HSS,
            SNAPSHOTS SS
          WHERE 
            HSS.DBID = SS.DBID AND
            HSS.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
            HSS.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID
          GROUP BY
            HSS.SQL_ID
          ORDER BY
            2 DESC
        )
      ) HSS,
      ( SELECT
          SQL_ID,
          SQLSTATS_TIME_S,
          ROWNUM SQLSTATS_POS
        FROM
        ( SELECT 
            SQL_ID,
            ROUND(ELAPSED_TIME / 1000000) SQLSTATS_TIME_S
          FROM 
            BASIS_INFO BI,
            GV$SQLSTATS SS
          WHERE
            BI.INSTANCE_NUMBER = SS.INST_ID
          ORDER BY
            2 DESC
        )
      ) SS,
      ( SELECT
          SQL_ID,
          SQL_TIME_S,
          ROWNUM SQL_POS
        FROM
        ( SELECT 
            SQL_ID,
            ROUND(SUM(ELAPSED_TIME) / 1000000) SQL_TIME_S
          FROM 
            BASIS_INFO BI,
            GV$SQL S
          WHERE
            BI.INSTANCE_NUMBER = S.INST_ID
          GROUP BY
            SQL_ID
          ORDER BY
            2 DESC
        )
      ) S
    WHERE
      ASH.DBID = SNS.DBID AND
      ASH.INSTANCE_NUMBER = SNS.INSTANCE_NUMBER AND
      ASH.SQL_ID = HSS.SQL_ID (+) AND
      ASH.SQL_ID = SS.SQL_ID (+) AND
      ASH.SQL_ID = S.SQL_ID (+) AND
      ASH.SQL_ID IS NOT NULL AND
      ASH.SNAP_ID BETWEEN SNS.BEGIN_SNAP_ID AND SNS.END_SNAP_ID
    GROUP BY
      ASH.SQL_ID,
      HIST_POS,
      HIST_TIME_S,
      SQLSTATS_POS,
      SQLSTATS_TIME_S,
      SQL_POS,
      SQL_TIME_S
    ORDER BY
      COUNT(*) DESC 
  ) A,
  BASIS_INFO BI
  WHERE
    ( BI.NUM_RECORDS = -1 OR ROWNUM <= BI.NUM_RECORDS )
)
));