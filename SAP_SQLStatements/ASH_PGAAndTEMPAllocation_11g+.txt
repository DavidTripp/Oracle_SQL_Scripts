SELECT 
  NULL SAMPLE_TIME, NULL TOTAL_MB, NULL SQL_ID_1, NULL MB_1, 
  NULL "%_1", NULL SQL_ID_2, NULL MB_2, NULL "%_2", NULL SQL_ID_3, 
  NULL MB_3, NULL "%_3", NULL SQL_ID_4, NULL MB_4, NULL "%_4", 
  NULL SQL_ID_5, NULL MB_5, NULL "%_5" FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT   
  NULL SAMPLE_TIME, NULL TOTAL_MB, NULL SQL_ID_1, NULL MB_1, 
  NULL "%_1", NULL SQL_ID_2, NULL MB_2, NULL "%_2", NULL SQL_ID_3, 
  NULL MB_3, NULL "%_3", NULL SQL_ID_4, NULL MB_4, NULL "%_4", 
  NULL SQL_ID_5, NULL MB_5, NULL "%_5" FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ INLINE */  /* hint sometimes required to push SNAP_IDs into DBA_HIST_ACTIVE_SESS_HISTORY */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    AREA,
    MIN_TOTAL_SPACE_MB,
    DATA_SOURCE
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,          /* -2 for all instances, -1 for current instance */
      TO_DATE('11.11.2011 19:21:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('12.11.9999 10:22:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      'TEMP' AREA,                   /* PGA, TEMP */
      1000 MIN_TOTAL_SPACE_MB,
      'AWR' DATA_SOURCE              /* AWR, CURRENT */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT 
    HSS.DBID,
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    HSS.DBID = BI.DBID AND
    HSS.END_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.BEGIN_INTERVAL_TIME <= BI.END_TIME AND
    ( BI.BEGIN_SNAP_ID = -1 OR
      HSS.SNAP_ID >= BI.BEGIN_SNAP_ID ) AND 
    ( BI.END_SNAP_ID = -1 OR
      HSS.SNAP_ID <= BI.END_SNAP_ID ) 
  GROUP BY
    HSS.DBID,
    HSS.INSTANCE_NUMBER
)
SELECT
  SAMPLE_TIME,
  TOTAL_MB,
  SQL_ID_1,
  TO_CHAR(MB_1, 999990.99) MB_1,
  TO_CHAR(MB_1 / TOTAL_MB * 100, 990.99) "%_1",
  SQL_ID_2,
  TO_CHAR(MB_2, 999990.99) MB_2,
  TO_CHAR(MB_2 / TOTAL_MB * 100, 990.99) "%_2",
  SQL_ID_3,
  TO_CHAR(MB_3, 999990.99) MB_3,
  TO_CHAR(MB_3 / TOTAL_MB * 100, 990.99) "%_3",
  SQL_ID_4,
  TO_CHAR(MB_4, 999990.99) MB_4,
  TO_CHAR(MB_4 / TOTAL_MB * 100, 990.99) "%_4",
  SQL_ID_5,
  TO_CHAR(MB_5, 999990.99) MB_5,
  TO_CHAR(MB_5 / TOTAL_MB * 100, 990.99) "%_5"
FROM
( SELECT DISTINCT 
    TO_CHAR(SAMPLE_TIME, 'YYYY-MM-DD HH24:MI:SS') SAMPLE_TIME, 
    TO_CHAR(SUM(SPACE_MB) OVER (PARTITION BY SAMPLE_TIME), 99999990.99) TOTAL_MB,
    MIN_TOTAL_SPACE_MB,
    NTH_VALUE(SQL_ID, 1) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) SQL_ID_1,
    NTH_VALUE(SPACE_MB, 1) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) MB_1,
    NTH_VALUE(SQL_ID, 2) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) SQL_ID_2,
    NTH_VALUE(SPACE_MB, 2) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) MB_2,
    NTH_VALUE(SQL_ID, 3) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) SQL_ID_3,
    NTH_VALUE(SPACE_MB, 3) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) MB_3,
    NTH_VALUE(SQL_ID, 4) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) SQL_ID_4,
    NTH_VALUE(SPACE_MB, 4) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) MB_4,
    NTH_VALUE(SQL_ID, 5) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) SQL_ID_5,
    NTH_VALUE(SPACE_MB, 5) OVER (PARTITION BY SAMPLE_TIME ORDER BY SPACE_MB DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND 
      UNBOUNDED FOLLOWING) MB_5
  FROM
  ( SELECT
      ASH.SAMPLE_TIME,
      ASH.SQL_ID,
      DECODE(BI.AREA, 
        'PGA', ASH.PGA_ALLOCATED,
        'TEMP', ASH.TEMP_SPACE_ALLOCATED) / 1024 / 1024 SPACE_MB,
      BI.MIN_TOTAL_SPACE_MB
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_ACTIVE_SESS_HISTORY ASH
    WHERE
      SS.DBID = ASH.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR 
        BI.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER ) AND
      ASH.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      ASH.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      BI.DATA_SOURCE = 'AWR'
    UNION ALL
    ( SELECT
        ASH.SAMPLE_TIME,
        ASH.SQL_ID,
        DECODE(BI.AREA, 
          'PGA', ASH.PGA_ALLOCATED,
          'TEMP', ASH.TEMP_SPACE_ALLOCATED) / 1024 / 1024 SPACE_MB,
        BI.MIN_TOTAL_SPACE_MB
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        GV$ACTIVE_SESSION_HISTORY ASH
      WHERE
        ( BI.INSTANCE_NUMBER = -2 OR 
          BI.INSTANCE_NUMBER = ASH.INST_ID ) AND
        ASH.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
        BI.DATA_SOURCE = 'CURRENT'
    ) 
  )
  WHERE
    SPACE_MB IS NOT NULL
  ORDER BY 
    SAMPLE_TIME DESC
)
WHERE
  TOTAL_MB >= MIN_TOTAL_SPACE_MB
));
