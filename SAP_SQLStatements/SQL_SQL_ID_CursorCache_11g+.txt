SELECT 
  NULL BEGIN_TIME, NULL PLAN_HASH, NULL INST, NULL EXECUTIONS, NULL ELA_TIME_MS, NULL "ELA_TIME_MS/EXE",
  NULL CPU_TIME_MS, NULL RECORDS, NULL "REC/EXE", NULL DISK_READS, NULL "DISK_READS/EXE", NULL BUFFER_GETS,
  NULL "BUFFER_GETS/EXE", NULL "BUFFER_GETS/ROW", NULL PARSE_MS, NULL PARSES, NULL MODULE
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL PLAN_HASH, NULL INST, NULL EXECUTIONS, NULL ELA_TIME_MS, NULL "ELA_TIME_MS/EXE",
  NULL CPU_TIME_MS, NULL RECORDS, NULL "REC/EXE", NULL DISK_READS, NULL "DISK_READS/EXE", NULL BUFFER_GETS,
  NULL "BUFFER_GETS/EXE", NULL "BUFFER_GETS/ROW", NULL PARSE_MS, NULL PARSES, NULL MODULE
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM ( 
WITH BASIS_INFO AS /* 11g: V$SQLSTATS_PLAN_HASH */ 
( SELECT 
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    SQL_ID
  FROM
  ( SELECT
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 22:00:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 09:00:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      '2zpuwqrvsgb23' SQL_ID
    FROM
      DUAL
  )
),
SNAPSHOTS AS
( SELECT 
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    ( BI.INSTANCE_NUMBER = -2 OR
      HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
    HSS.END_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.BEGIN_INTERVAL_TIME <= BI.END_TIME
  GROUP BY
    HSS.INSTANCE_NUMBER
)
SELECT
  'SQL_ID: ' || SQL_ID BEGIN_TIME,
  NULL PLAN_HASH,
  NULL INST,
  NULL EXECUTIONS, 
  NULL ELA_TIME_MS, 
  NULL "ELA_TIME_MS/EXE",
  NULL CPU_TIME_MS, 
  NULL RECORDS, 
  NULL "REC/EXE", 
  NULL DISK_READS, 
  NULL "DISK_READS/EXE", 
  NULL BUFFER_GETS,
  NULL "BUFFER_GETS/EXE", 
  NULL "BUFFER_GETS/ROW", 
  NULL PARSE_MS, 
  NULL PARSES, 
  NULL MODULE
FROM
  BASIS_INFO
UNION ALL
( SELECT
    NULL BEGIN_TIME,
    NULL PLAN_HASH,
    NULL INST,
    NULL EXECUTIONS, 
    NULL ELA_TIME_MS, 
    NULL "ELA_TIME_MS/EXE",
    NULL CPU_TIME_MS, 
    NULL RECORDS, 
    NULL "REC/EXE", 
    NULL DISK_READS, 
    NULL "DISK_READS/EXE", 
    NULL BUFFER_GETS,
    NULL "BUFFER_GETS/EXE", 
    NULL "BUFFER_GETS/ROW", 
    NULL PARSE_MS, 
    NULL PARSES, 
    NULL MODULE
  FROM
  BASIS_INFO
)
UNION ALL
( SELECT
    'V$SQL' BEGIN_TIME,
    LPAD(PLAN_HASH_VALUE, 10) PLAN_HASH,
    LPAD(S.INST_ID, 4) INST,
    LPAD(EXECUTIONS, 10) EXECUTIONS,
    LPAD(ROUND(ELAPSED_TIME / 1000), 11) ELA_TIME_MS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS, 
      2)), 99999999990.99) "ELA_TIME_MS/EXE",
    LPAD(ROUND(CPU_TIME / 1000), 11) CPU_TIME_MS,
    LPAD(ROWS_PROCESSED, 12) RECORDS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)), 
      9999999990.99) "REC/EXE",
    LPAD(DISK_READS, 10) DISK_READS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),  
      9999999990.99) "DISK_READS/EXE",
    LPAD(BUFFER_GETS, 11) BUFFER_GETS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)), 
      99999999990.99) "BUFFER_GETS/EXE",
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED, 
      2)), 99999999990.99) "BUFFER_GETS/ROW",
    LPAD('not avail.', 11) PARSE_MS,
    LPAD(PARSE_CALLS, 6) PARSES,
    MODULE 
  FROM
    BASIS_INFO BI,
    GV$SQL S
  WHERE
    S.SQL_ID = BI.SQL_ID AND
    ( BI.INSTANCE_NUMBER = -2 OR
      S.INST_ID = BI.INSTANCE_NUMBER )
)
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 19) BEGIN_TIME,
    LPAD(PLAN_HASH_VALUE, 10) PLAN_HASH,
    LPAD(SS.INST_ID, 4) INST,
    LPAD(EXECUTIONS, 10) EXECUTIONS,
    LPAD(ROUND(ELAPSED_TIME / 1000), 11) ELA_TIME_MS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS, 
      2)), 99999999990.99) "ELA_TIME_MS/EXE",
    LPAD(ROUND(CPU_TIME / 1000), 11) CPU_TIME_MS,
    LPAD(ROWS_PROCESSED, 12) RECORDS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)), 
      9999999990.99) "REC/EXE",
    LPAD(DISK_READS, 10) DISK_READS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),  
      9999999990.99) "DISK_READS/EXE",
    LPAD(BUFFER_GETS, 11) BUFFER_GETS,
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)), 
      99999999990.99) "BUFFER_GETS/EXE",
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED, 
      2)), 99999999990.99) "BUFFER_GETS/ROW",
    LPAD(ROUND(AVG_HARD_PARSE_TIME / 1000, 2), 11) PARSE_MS,
    LPAD(PARSE_CALLS, 6) PARSES,
    'not available in V$SQLSTATS' MODULE 
  FROM
    BASIS_INFO BI,
    GV$SQLSTATS_PLAN_HASH SS
  WHERE
    SS.SQL_ID = BI.SQL_ID AND
    ( BI.INSTANCE_NUMBER = -2 OR
      SS.INST_ID = BI.INSTANCE_NUMBER )
)
UNION ALL
( SELECT
    RPAD(BEGIN_TIME, 19) BEGIN_TIME,
    LPAD(PLAN_HASH_VALUE, 10) PLAN_HASH,
    LPAD(INST_ID, 4) INST,
    LPAD(EXECUTIONS, 10) EXECUTIONS,
    LPAD(ELAPSED_TIME_MS, 11) ELA_TIME_MS,
    ELAPSED_TIME_MS_PER_EXEC "ELA_TIME_MS/EXE",
    LPAD(CPU_TIME_MS, 11) CPU_TIME_MS,
    LPAD(RECORDS, 12) RECORDS,
    RECORDS_PER_EXEC "REC/EXE",
    LPAD(DISK_READS, 10) DISK_READS,
    DISK_READS_PER_EXEC "DISK_READS/EXE",
    LPAD(BUFFER_GETS, 11) BUFFER_GETS,
    BUFFER_GETS_PER_EXEC "BUFFER_GETS/EXE",
    BUFFER_GETS_PER_RECORD "BUFFER_GETS/ROW",
    LPAD(AVG_PARSE, 11) PARSE_MS,
    LPAD(PARSE_CALLS, 6) PARSES,
    MODULE 
  FROM
  ( SELECT
      'TOTAL (HISTORY)' BEGIN_TIME,
      HSQ.INSTANCE_NUMBER INST_ID,
      SUM(HSQ.EXECUTIONS_DELTA) EXECUTIONS,
      SUM(HSQ.ROWS_PROCESSED_DELTA) RECORDS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ROWS_PROCESSED_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 9999999990.99) RECORDS_PER_EXEC,
      SUM(HSQ.DISK_READS_DELTA) DISK_READS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.DISK_READS_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 9999999990.99) DISK_READS_PER_EXEC,
      SUM(HSQ.BUFFER_GETS_DELTA) BUFFER_GETS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 99999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(SUM(HSQ.ROWS_PROCESSED_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) / 
        SUM(HSQ.ROWS_PROCESSED_DELTA)), 99999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ELAPSED_TIME_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 99999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.CPU_TIME_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,  
      HSQ.PLAN_HASH_VALUE,
      SUM(HSQ.PARSE_CALLS_DELTA) PARSE_CALLS, 
      ' ' MODULE
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ, 
      SNAPSHOTS SS
    WHERE
      SS.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      HSQ.SQL_ID = BI.SQL_ID AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID 
    GROUP BY
      HSQ.INSTANCE_NUMBER,
      HSQ.PLAN_HASH_VALUE
    ORDER BY
      HSQ.INSTANCE_NUMBER,
      HSQ.PLAN_HASH_VALUE
  )
)
UNION ALL
( SELECT
    RPAD(BEGIN_INTERVAL_TIME, 19) BEGIN_TIME,
    LPAD(PLAN_HASH_VALUE, 10) PLAN_HASH,
    LPAD(INST_ID, 4) INST,
    LPAD(EXECUTIONS, 10) EXECUTIONS,
    LPAD(ELAPSED_TIME_MS, 11) ELA_TIME_MS,
    ELAPSED_TIME_MS_PER_EXEC "ELA_TIME_MS/EXE",
    LPAD(CPU_TIME_MS, 11) CPU_TIME_MS,
    LPAD(RECORDS, 12) RECORDS,
    RECORDS_PER_EXEC "REC/EXE",
    LPAD(DISK_READS, 10) DISK_READS,
    DISK_READS_PER_EXEC "DISK_READS/EXE",
    LPAD(BUFFER_GETS, 11) BUFFER_GETS,
    BUFFER_GETS_PER_EXEC "BUFFER_GETS/EXE",
    BUFFER_GETS_PER_RECORD "BUFFER_GETS/ROW",
    LPAD(AVG_PARSE, 11) PARSE_MS,
    LPAD(PARSE_CALLS, 6) PARSES,
    MODULE 
  FROM
  ( SELECT
      TO_CHAR(HSS.BEGIN_INTERVAL_TIME, 'YYYY-MM-DD HH24:MI:SS') BEGIN_INTERVAL_TIME,
      HSQ.INSTANCE_NUMBER INST_ID,
      HSQ.EXECUTIONS_DELTA EXECUTIONS,
      HSQ.ROWS_PROCESSED_DELTA RECORDS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.ROWS_PROCESSED_DELTA /
        HSQ.EXECUTIONS_DELTA), 9999999990.99) RECORDS_PER_EXEC,
      HSQ.DISK_READS_DELTA DISK_READS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.DISK_READS_DELTA /
        HSQ.EXECUTIONS_DELTA), 9999999990.99) DISK_READS_PER_EXEC,
      HSQ.BUFFER_GETS_DELTA BUFFER_GETS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.BUFFER_GETS_DELTA /
        HSQ.EXECUTIONS_DELTA), 99999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(HSQ.ROWS_PROCESSED_DELTA, 0, 0, HSQ.BUFFER_GETS_DELTA /
        HSQ.ROWS_PROCESSED_DELTA), 99999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(HSQ.ELAPSED_TIME_DELTA / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.ELAPSED_TIME_DELTA /
        HSQ.EXECUTIONS_DELTA / 1000), 99999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(HSQ.CPU_TIME_DELTA / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.CPU_TIME_DELTA /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,
      HSQ.PARSE_CALLS_DELTA PARSE_CALLS,
      HSQ.PLAN_HASH_VALUE,
      HSQ.MODULE MODULE
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ,
      DBA_HIST_SNAPSHOT HSS,
      SNAPSHOTS SS
    WHERE
      SS.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      HSQ.SQL_ID = BI.SQL_ID AND
      HSQ.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSQ.SNAP_ID = HSS.SNAP_ID AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID 
    ORDER BY
      HSQ.SNAP_ID DESC,
      HSQ.INSTANCE_NUMBER,
      HSQ.PLAN_HASH_VALUE
  )
)
));

