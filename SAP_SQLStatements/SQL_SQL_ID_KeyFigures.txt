SELECT /*+ OPT_PARAM('_PUSH_JOIN_PREDICATE', 'FALSE') */
  NULL STAT_NAME, NULL VALUE, NULL VALUE_PER_EXEC, 
  NULL VALUE_PER_ROW, NULL "TOTAL_%" FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL STAT_NAME, NULL VALUE, NULL VALUE_PER_EXEC, 
  NULL VALUE_PER_ROW, NULL "TOTAL_%" FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,
    END_SNAP_ID,
    SQL_ID,
    PLAN_HASH,
    DISPLAY_INSTANCE_NUMBER,
    SUPPRESS_ZERO_LINES,
    TIME_UNIT,
    DECODE(TIME_UNIT, 'MS', 1, 'S', 1000, 'M', 60000, 'H', 3600000, 'D', 86400000) TIME_FACTOR,
    TOTAL_VALUE_DETERMINATION,
    DATA_SOURCE
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 11:55:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('27.08.9999 00:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   
      -1 END_SNAP_ID,
      '74cq8bw8jjnpc' SQL_ID,
      -1 PLAN_HASH,
      ' ' DISPLAY_INSTANCE_NUMBER,
      'X' SUPPRESS_ZERO_LINES,
      'H' TIME_UNIT,                    /* MS, S, M, H, D */
      'SYSSTAT' TOTAL_VALUE_DETERMINATION,     /* SQL, SYSSTAT */
      'AWR' DATA_SOURCE                    /* CURRENT --> GV$SQL, AWR --> DBA_HIST_SQLSTAT */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    MIN_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    RESTART,
    SQL_ID
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART,
      BI.SQL_ID
    FROM 
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2,
      BASIS_INFO BI
    WHERE
      BI.DBID = HSS2.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR
        BI.INSTANCE_NUMBER = HSS2.INSTANCE_NUMBER ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
  )
),
LINES AS
( SELECT  1 LINENR, 'SQL_ID'                     STAT_NAME FROM DUAL UNION ALL
  SELECT  2 LINENR, 'Plan hash'                  STAT_NAME FROM DUAL UNION ALL
  SELECT  3 LINENR, 'Start Time'                 STAT_NAME FROM DUAL UNION ALL
  SELECT  4 LINENR, 'End Time'                   STAT_NAME FROM DUAL UNION ALL
  SELECT  5 LINENR, 'Instance Number'            STAT_NAME FROM BASIS_INFO WHERE DISPLAY_INSTANCE_NUMBER = 'X' UNION ALL
  SELECT  6 LINENR, 'Module'                     STAT_NAME FROM DUAL UNION ALL
  SELECT  7 LINENR, 'Executions'                 STAT_NAME FROM DUAL UNION ALL
  SELECT  8 LINENR, 'Fetches'                    STAT_NAME FROM DUAL UNION ALL
  SELECT  9 LINENR, 'Records'                    STAT_NAME FROM DUAL UNION ALL
  SELECT 10 LINENR, 'Disk Reads'                 STAT_NAME FROM DUAL UNION ALL
  SELECT 11 LINENR, 'Buffer Gets'                STAT_NAME FROM DUAL UNION ALL
  SELECT 12 LINENR, 'Direct Writes'              STAT_NAME FROM DUAL UNION ALL
  SELECT 13 LINENR, 'Parse Calls'                STAT_NAME FROM DUAL UNION ALL
  SELECT 14 LINENR, 'Sharable Memory (kb)'       STAT_NAME FROM DUAL UNION ALL
  SELECT 15 LINENR, 'Hit Ratio (%)'              STAT_NAME FROM DUAL UNION ALL
  SELECT 16 LINENR, 'I/O Time / Block (ms)'      STAT_NAME FROM DUAL UNION ALL
  SELECT 17 LINENR, 'Active Sessions'            STAT_NAME FROM DUAL UNION ALL
  SELECT 18 LINENR, ' '                          STAT_NAME FROM DUAL UNION ALL
  SELECT 19 LINENR, 'Elapsed Time'               STAT_NAME FROM DUAL UNION ALL
  SELECT 20 LINENR, 'CPU Time'                   STAT_NAME FROM DUAL UNION ALL
  SELECT 21 LINENR, 'I/O Wait Time'              STAT_NAME FROM DUAL UNION ALL
  SELECT 22 LINENR, 'Appl. Wait Time'            STAT_NAME FROM DUAL UNION ALL
  SELECT 23 LINENR, 'Conc. Wait Time'            STAT_NAME FROM DUAL UNION ALL
  SELECT 24 LINENR, 'Clust. Wait Time'           STAT_NAME FROM DUAL 
),
TOTAL_SECONDS AS
( SELECT
    MAX(SUM(INTERVAL_SECONDS)) TOTAL_SECONDS
  FROM
    SNAPSHOTS
  WHERE
    SNAP_ID != MIN_SNAP_ID
  GROUP BY
    DBID,
    INSTANCE_NUMBER
),
TOTAL_FIGURES_PER_SNAPSHOT AS    
( SELECT
    SNAP_ID,
    SUM(DECODE(STAT_NAME, 'DB time', VALUE, 0)) / 1000 DB_TIME_MS,
    SUM(DECODE(STAT_NAME, 'concurrency wait time', VALUE, 0)) * 10 CONCURRENCY_TIME_MS,
    SUM(DECODE(STAT_NAME, 'cluster wait time', VALUE, 0)) * 10 CLUSTER_TIME_MS,
    SUM(DECODE(STAT_NAME, 'application wait time', VALUE, 0)) * 10 APPLICATION_TIME_MS,
    SUM(DECODE(STAT_NAME, 'user I/O wait time', VALUE, 0)) * 10 USERIO_TIME_MS,
    SUM(DECODE(STAT_NAME, 'DB CPU', VALUE, 0)) / 1000 CPU_TIME_MS,
    SUM(DECODE(STAT_NAME, 'user calls', VALUE, 0)) USER_CALLS,
    SUM(DECODE(STAT_NAME, 'session logical reads', VALUE, 0)) BUFFER_GETS,
    SUM(DECODE(STAT_NAME, 'physical reads', VALUE, 0)) DISK_READS,
    SUM(DECODE(STAT_NAME, 'queries parallelized', VALUE, 
      'DML statements parallelized', VALUE,
      'DDL statements parallelized', VALUE, 0)) PX_EXECUTIONS,
    SUM(DECODE(STAT_NAME, 'parse count (total)', VALUE, 0)) PARSE_COUNT,
    SUM(DECODE(STAT_NAME, 'physical writes direct', VALUE, 0)) DIRECT_WRITES
  FROM
  ( SELECT
      SS.SNAP_ID,
      STAT_NAME,
      VALUE
    FROM
      SNAPSHOTS SS,
      DBA_HIST_SYSSTAT HSS
    WHERE
      HSS.DBID = SS.DBID AND
      HSS.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSS.SNAP_ID = SS.SNAP_ID AND
      STAT_NAME IN
      ( 'concurrency wait time',
        'cluster wait time',
        'application wait time',
        'user I/O wait time',
        'user calls',
        'session logical reads',
        'physical reads',
        'queries parallelized',
        'DML statements parallelized',
        'DDL statements parallelized',
        'parse count (total)',
        'physical writes direct'
      )
    UNION ALL
    ( SELECT
        SS.SNAP_ID,
        HSS.STAT_NAME,
        HSS.VALUE
      FROM
        SNAPSHOTS SS,
        DBA_HIST_SYS_TIME_MODEL HSS
      WHERE
        HSS.DBID = SS.DBID AND
        HSS.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
        HSS.SNAP_ID = SS.SNAP_ID AND
        STAT_NAME IN
        ( 'DB time',
          'DB CPU'
        )
    )
  )
  GROUP BY
    SNAP_ID
),
TOTAL_FIGURES AS
( SELECT
    /* Very first interval in history (NULL values in TFPS1) has to be */
    /* ignored as no delta values are available */
    SUM(DECODE(TFPS1.DB_TIME_MS, NULL, 0, TFPS2.DB_TIME_MS - 
      DECODE(SS.RESTART, 'NO', TFPS1.DB_TIME_MS, 0))) TOTAL_DB_TIME_MS,
    SUM(DECODE(TFPS1.CONCURRENCY_TIME_MS, NULL, 0, TFPS2.CONCURRENCY_TIME_MS - 
      DECODE(SS.RESTART, 'NO', TFPS1.CONCURRENCY_TIME_MS, 0))) TOTAL_CONCURRENCY_TIME_MS,
    SUM(DECODE(TFPS1.CLUSTER_TIME_MS, NULL, 0, TFPS2.CLUSTER_TIME_MS - 
      DECODE(SS.RESTART, 'NO', TFPS1.CLUSTER_TIME_MS, 0))) TOTAL_CLUSTER_TIME_MS,
    SUM(DECODE(TFPS1.APPLICATION_TIME_MS, NULL, 0, TFPS2.APPLICATION_TIME_MS - 
      DECODE(SS.RESTART, 'NO', TFPS1.APPLICATION_TIME_MS, 0))) TOTAL_APPLICATION_TIME_MS,
    SUM(DECODE(TFPS1.USERIO_TIME_MS, NULL, 0, TFPS2.USERIO_TIME_MS - 
      DECODE(SS.RESTART, 'NO', TFPS1.USERIO_TIME_MS, 0))) TOTAL_USERIO_TIME_MS,
    SUM(DECODE(TFPS1.CPU_TIME_MS, NULL, 0, TFPS2.CPU_TIME_MS - 
      DECODE(SS.RESTART, 'NO', TFPS1.CPU_TIME_MS, 0))) TOTAL_CPU_TIME_MS,
    SUM(DECODE(TFPS1.USER_CALLS, NULL, 0, TFPS2.USER_CALLS - 
      DECODE(SS.RESTART, 'NO', TFPS1.USER_CALLS, 0))) TOTAL_USER_CALLS,
    -1 TOTAL_FETCHES,
    -1 TOTAL_RECORDS,
    SUM(DECODE(TFPS1.BUFFER_GETS, NULL, 0, TFPS2.BUFFER_GETS - 
      DECODE(SS.RESTART, 'NO', TFPS1.BUFFER_GETS, 0))) TOTAL_BUFFER_GETS,
    SUM(DECODE(TFPS1.DISK_READS, NULL, 0, TFPS2.DISK_READS - 
      DECODE(SS.RESTART, 'NO', TFPS1.DISK_READS, 0))) TOTAL_DISK_READS,
    SUM(DECODE(TFPS1.PX_EXECUTIONS, NULL, 0, TFPS2.PX_EXECUTIONS - 
      DECODE(SS.RESTART, 'NO', TFPS1.PX_EXECUTIONS, 0))) TOTAL_PX_EXECUTIONS,
    SUM(DECODE(TFPS1.PARSE_COUNT, NULL, 0, TFPS2.PARSE_COUNT - 
      DECODE(SS.RESTART, 'NO', TFPS1.PARSE_COUNT, 0))) TOTAL_PARSE_COUNT,
    SUM(DECODE(TFPS1.DIRECT_WRITES, NULL, 0, TFPS2.DIRECT_WRITES - 
      DECODE(SS.RESTART, 'NO', TFPS1.DIRECT_WRITES, 0))) TOTAL_DIRECT_WRITES
  FROM
    BASIS_INFO BI,
    SNAPSHOTS SS,
    TOTAL_FIGURES_PER_SNAPSHOT TFPS1,
    TOTAL_FIGURES_PER_SNAPSHOT TFPS2
  WHERE
    BI.TOTAL_VALUE_DETERMINATION = 'SYSSTAT' AND
    TFPS2.SNAP_ID = SS.SNAP_ID AND
    TFPS1.SNAP_ID (+) = TFPS2.SNAP_ID - 1
  UNION ALL
  ( SELECT
      SUM(ELAPSED_TIME_DELTA / 1000) TOTAL_DB_TIME_MS,
      SUM(CCWAIT_DELTA / 1000) TOTAL_CONCURRENCY_TIME_MS,
      SUM(CLWAIT_DELTA / 1000) TOTAL_CLUSTER_TIME_MS,
      SUM(APWAIT_DELTA / 1000) TOTAL_APPLICATION_TIME_MS,
      SUM(IOWAIT_DELTA / 1000) TOTAL_USERIO_TIME_MS,
      SUM(CPU_TIME_DELTA / 1000) TOTAL_CPU_TIME,
      SUM(EXECUTIONS_DELTA) TOTAL_USER_CALLS,
      SUM(FETCHES_DELTA) TOTAL_FETCHES,
      SUM(ROWS_PROCESSED_DELTA) TOTAL_RECORDS,
      SUM(BUFFER_GETS_DELTA) TOTAL_BUFFER_GETS,
      SUM(DISK_READS_DELTA) TOTAL_DISK_READS,
      SUM(PX_SERVERS_EXECS_DELTA) TOTAL_PX_EXECUTIONS,
      SUM(PARSE_CALLS_DELTA) TOTAL_PARSE_COUNT,
      SUM(DIRECT_WRITES_DELTA) TOTAL_DIRECT_WRITES
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_SQLSTAT HSQ
    WHERE
      BI.TOTAL_VALUE_DETERMINATION = 'SQL' AND
      SS.SNAP_ID != SS.MIN_SNAP_ID AND
      SS.SNAP_ID = HSQ.SNAP_ID AND
      SS.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER 
  )
),
SQLSTATS AS
( SELECT /*+ MATERIALIZE */
    HSQ.*
  FROM
    BASIS_INFO BI,
    SNAPSHOTS SS,
    DBA_HIST_SQLSTAT HSQ
  WHERE
    HSQ.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
    HSQ.SNAP_ID = SS.SNAP_ID AND
    SS.SNAP_ID != SS.MIN_SNAP_ID AND
    HSQ.SQL_ID = SS.SQL_ID AND
    ( BI.PLAN_HASH = -1 OR HSQ.PLAN_HASH_VALUE = BI.PLAN_HASH )
)
SELECT
  STAT_NAME,
  VALUE,
  VALUE_PER_EXEC,
  VALUE_PER_ROW,
  "TOTAL_%"
FROM
( SELECT
    STAT_NAME,
    MAX(DECODE(LINENR, 
       1, SQL_ID, 
       2, DECODE(MIN_PLAN_HASH, MAX_PLAN_HASH, TO_CHAR(MIN_PLAN_HASH), 'multiple'),
       3, TO_CHAR(BEGIN_INTERVAL_TIME, 'dd.mm.yyyy hh24:mi:ss'),
       4, TO_CHAR(END_INTERVAL_TIME,   'dd.mm.yyyy hh24:mi:ss'),
       5, INST_ID,
       6, SUBSTR(MODULE, 1, 19),
       7, TO_CHAR(EXECUTIONS,                    999999999999999990),
       8, TO_CHAR(FETCHES,                       999999999999999990),
       9, TO_CHAR(RECORDS,                       999999999999999990),
      10, TO_CHAR(DISK_READS,                    999999999999999990),
      11, TO_CHAR(BUFFER_GETS,                   999999999999999990),
      12, TO_CHAR(DIRECT_WRITES,                 999999999999999990),
      13, TO_CHAR(PARSE_CALLS,                   999999999999999990),
      14, TO_CHAR(SHARABLE_MEM_KB,               999999999999999990),
      15, TO_CHAR(DECODE(BUFFER_GETS, 0, 0, 
          (1 - DISK_READS / BUFFER_GETS) * 100), 999999999999990.99),
      16, TO_CHAR(DECODE(DISK_READS, 0, 0, IO_WAIT_TIME_MS / DISK_READS),  999999999999990.99),
      17, TO_CHAR(DECODE(TOTAL_SECONDS, 0, 0, ELAPSED_TIME_MS / 1000 / TOTAL_SECONDS), 999999999999990.99),
      18, NULL,
      19, LPAD(ROUND(ELAPSED_TIME_MS / TIME_FACTOR) || ' ' || LOWER(TIME_UNIT), 19),
      20, LPAD(ROUND(CPU_TIME_MS / TIME_FACTOR) || ' ' || LOWER(TIME_UNIT), 19),
      21, LPAD(ROUND(IO_WAIT_TIME_MS / TIME_FACTOR) || ' ' || LOWER(TIME_UNIT), 19),
      22, LPAD(ROUND(APP_WAIT_TIME_MS / TIME_FACTOR) || ' ' || LOWER(TIME_UNIT), 19),
      23, LPAD(ROUND(CONC_WAIT_TIME_MS / TIME_FACTOR) || ' ' || LOWER(TIME_UNIT), 19),
      24, LPAD(ROUND(CLUSTER_WAIT_TIME_MS / TIME_FACTOR) || ' ' || LOWER(TIME_UNIT), 19),
    NULL)) VALUE,
    MAX(DECODE(LINENR,
       1, NULL, 
       2, NULL,
       3, NULL,
       4, NULL,
       5, NULL,
       6, SUBSTR(MODULE, 20, 16),
       7, NULL,
       8, TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS),              999999999990.99),
       9, TO_CHAR(DECODE(EXECUTIONS, 0, 0, RECORDS / EXECUTIONS),              999999999990.99),
      10, TO_CHAR(DECODE(EXECUTIONS, 0, 0, DISK_READS / EXECUTIONS),           999999999990.99),
      11, TO_CHAR(DECODE(EXECUTIONS, 0, 0, BUFFER_GETS / EXECUTIONS),          999999999990.99),
      12, TO_CHAR(DECODE(EXECUTIONS, 0, 0, DIRECT_WRITES / EXECUTIONS),        999999999990.99),
      13, TO_CHAR(DECODE(EXECUTIONS, 0, 0, PARSE_CALLS / EXECUTIONS),          999999999990.99),
      14, NULL,
      15, NULL,
      16, NULL,
      17, NULL,
      18, NULL,
      19, TO_CHAR(DECODE(EXECUTIONS, 0, 0, ELAPSED_TIME_MS / EXECUTIONS),      999999990.99) || ' ms',
      20, TO_CHAR(DECODE(EXECUTIONS, 0, 0, CPU_TIME_MS / EXECUTIONS),          999999990.99) || ' ms',
      21, TO_CHAR(DECODE(EXECUTIONS, 0, 0, IO_WAIT_TIME_MS / EXECUTIONS),      999999990.99) || ' ms',
      22, TO_CHAR(DECODE(EXECUTIONS, 0, 0, APP_WAIT_TIME_MS / EXECUTIONS),     999999990.99) || ' ms',
      23, TO_CHAR(DECODE(EXECUTIONS, 0, 0, CONC_WAIT_TIME_MS / EXECUTIONS),    999999990.99) || ' ms',
      24, TO_CHAR(DECODE(EXECUTIONS, 0, 0, CLUSTER_WAIT_TIME_MS / EXECUTIONS), 999999990.99) || ' ms',
    NULL)) VALUE_PER_EXEC,
    MAX(DECODE(LINENR,
       1, NULL, 
       2, NULL,
       3, NULL,
       4, NULL,
       5, NULL,
       6, SUBSTR(MODULE, 36, 15),
       7, NULL,
       8, NULL,
       9, NULL,
      10, TO_CHAR(DECODE(RECORDS, 0, 0, DISK_READS / RECORDS),           99999999990.99),
      11, TO_CHAR(DECODE(RECORDS, 0, 0, BUFFER_GETS / RECORDS),          99999999990.99),
      12, TO_CHAR(DECODE(RECORDS, 0, 0, DIRECT_WRITES / RECORDS),        99999999990.99),
      13, NULL,
      14, NULL,
      15, NULL,
      16, NULL,
      17, NULL,
      18, NULL,
      19, TO_CHAR(DECODE(RECORDS, 0, 0, ELAPSED_TIME_MS / RECORDS),      99999990.99) || ' ms',
      20, TO_CHAR(DECODE(RECORDS, 0, 0, CPU_TIME_MS / RECORDS),          99999990.99) || ' ms',
      21, TO_CHAR(DECODE(RECORDS, 0, 0, IO_WAIT_TIME_MS / RECORDS),      99999990.99) || ' ms',
      22, TO_CHAR(DECODE(RECORDS, 0, 0, APP_WAIT_TIME_MS / RECORDS),     99999990.99) || ' ms',
      23, TO_CHAR(DECODE(RECORDS, 0, 0, CONC_WAIT_TIME_MS / RECORDS),    99999990.99) || ' ms',
      24, TO_CHAR(DECODE(RECORDS, 0, 0, CLUSTER_WAIT_TIME_MS / RECORDS), 99999990.99) || ' ms',
    NULL)) VALUE_PER_ROW,
    MAX(DECODE(DATA_SOURCE, 'CURRENT', DECODE(LINENR, 1, 'n/a', ' '), DECODE(LINENR,
       1, TOTAL_VALUE_DETERMINATION, 
       2, NULL,
       3, NULL,
       4, NULL,
       5, NULL,
       6, SUBSTR(MODULE, 50, 7),
       7, TO_CHAR(DECODE(TOTAL_USER_CALLS, 0, 0, EXECUTIONS / TOTAL_USER_CALLS * 100),             990.99),
       8, TO_CHAR(DECODE(TOTAL_FETCHES, -1, NULL, 0, 0, EXECUTIONS / TOTAL_FETCHES * 100),         990.99),
       9, TO_CHAR(DECODE(TOTAL_RECORDS, -1, NULL, 0, 0, RECORDS / TOTAL_RECORDS * 100),            990.99),
      10, TO_CHAR(DECODE(TOTAL_DISK_READS, 0, 0, DISK_READS / TOTAL_DISK_READS * 100),             990.99),
      11, TO_CHAR(DECODE(TOTAL_BUFFER_GETS, 0, 0, BUFFER_GETS / TOTAL_BUFFER_GETS * 100),          990.99),
      12, TO_CHAR(DECODE(TOTAL_DIRECT_WRITES, 0, 0, DIRECT_WRITES / TOTAL_DIRECT_WRITES * 100),    990.99),
      13, TO_CHAR(DECODE(TOTAL_PARSE_COUNT, 0, 0, PARSE_CALLS / TOTAL_PARSE_COUNT * 100),          990.99),
      14, NULL,
      15, NULL,
      16, NULL,
      17, NULL,
      18, NULL,
      19, TO_CHAR(DECODE(TOTAL_DB_TIME_MS, 0, 0, ELAPSED_TIME_MS / TOTAL_DB_TIME_MS * 100),                     990.99),
      20, TO_CHAR(DECODE(TOTAL_CPU_TIME_MS, 0, 0, CPU_TIME_MS / TOTAL_CPU_TIME_MS * 100),                       990.99),
      21, TO_CHAR(DECODE(TOTAL_USERIO_TIME_MS, 0, 0, IO_WAIT_TIME_MS / TOTAL_USERIO_TIME_MS * 100),             990.99),
      22, TO_CHAR(DECODE(TOTAL_APPLICATION_TIME_MS, 0, 0, APP_WAIT_TIME_MS / TOTAL_APPLICATION_TIME_MS * 100),  990.99),
      23, TO_CHAR(DECODE(TOTAL_CONCURRENCY_TIME_MS, 0, 0, CONC_WAIT_TIME_MS / TOTAL_CONCURRENCY_TIME_MS * 100), 990.99),
      24, TO_CHAR(DECODE(TOTAL_CLUSTER_TIME_MS, 0, 0, CLUSTER_WAIT_TIME_MS / TOTAL_CLUSTER_TIME_MS * 100), 990.99),
    NULL))) "TOTAL_%",
    LINENR,
    SUPPRESS_ZERO_LINES
  FROM
  ( SELECT
      SS.SQL_ID SQL_ID, 
      MIN(HSQ.PLAN_HASH_VALUE) MIN_PLAN_HASH,
      MAX(HSQ.PLAN_HASH_VALUE) MAX_PLAN_HASH,
      MIN(HSQ.MODULE) MODULE,
      SUM(HSQ.EXECUTIONS_DELTA) EXECUTIONS,
      SUM(HSQ.FETCHES_DELTA) FETCHES,
      SUM(HSQ.ROWS_PROCESSED_DELTA) RECORDS,
      SUM(HSQ.DISK_READS_DELTA) DISK_READS,
      SUM(HSQ.BUFFER_GETS_DELTA) BUFFER_GETS,
      SUM(HSQ.ELAPSED_TIME_DELTA) / 1000 ELAPSED_TIME_MS,
      SUM(HSQ.CPU_TIME_DELTA) / 1000 CPU_TIME_MS,
      SUM(HSQ.IOWAIT_DELTA) / 1000 IO_WAIT_TIME_MS,
      SUM(HSQ.APWAIT_DELTA) / 1000 APP_WAIT_TIME_MS, 
      SUM(HSQ.CCWAIT_DELTA) / 1000 CONC_WAIT_TIME_MS,
      SUM(HSQ.CLWAIT_DELTA) / 1000 CLUSTER_WAIT_TIME_MS,
      SUM(HSQ.DIRECT_WRITES_DELTA) DIRECT_WRITES,
      SUM(HSQ.PARSE_CALLS_DELTA) PARSE_CALLS,
      MAX(ROUND(HSQ.SHARABLE_MEM / 1024)) SHARABLE_MEM_KB,
      L.LINENR LINENR,
      L.STAT_NAME STAT_NAME,
      MIN(SS.BEGIN_INTERVAL_TIME) BEGIN_INTERVAL_TIME,
      MAX(SS.END_INTERVAL_TIME) END_INTERVAL_TIME,
      DECODE(MIN(BI.INSTANCE_NUMBER), -2, 'ALL', MIN(SS.INSTANCE_NUMBER)) INST_ID,
      TS.TOTAL_SECONDS,
      BI.TOTAL_VALUE_DETERMINATION,
      BI.SUPPRESS_ZERO_LINES,
      BI.TIME_UNIT,
      BI.TIME_FACTOR,
      BI.DATA_SOURCE
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      SQLSTATS HSQ, 
      LINES L,
      TOTAL_SECONDS TS
    WHERE
      HSQ.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HSQ.SNAP_ID (+) = SS.SNAP_ID AND
      SS.SNAP_ID != SS.MIN_SNAP_ID AND
      HSQ.SQL_ID (+) = SS.SQL_ID AND
      BI.DATA_SOURCE = 'AWR'
    GROUP BY
      SS.SQL_ID,
      L.LINENR,
      L.STAT_NAME,
      TS.TOTAL_SECONDS,
      BI.TOTAL_VALUE_DETERMINATION,
      BI.SUPPRESS_ZERO_LINES,
      BI.TIME_UNIT,
      BI.TIME_FACTOR,
      BI.DATA_SOURCE
    UNION ALL
    ( SELECT
        BI.SQL_ID,
        MIN(S.PLAN_HASH_VALUE) MIN_PLAN_HASH,
        MAX(S.PLAN_HASH_VALUE) MAX_PLAN_HASH,
        MIN(S.MODULE) MODULE,
        SUM(S.EXECUTIONS) EXECUTIONS,
        SUM(S.FETCHES) FETCHES,
        SUM(S.ROWS_PROCESSED) RECORDS,
        SUM(S.DISK_READS) DISK_READS,
        SUM(S.BUFFER_GETS) BUFFER_GETS,
        SUM(S.ELAPSED_TIME) / 1000 ELAPSED_TIME_MS,
        SUM(S.CPU_TIME) / 1000 CPU_TIME_MS,
        SUM(S.USER_IO_WAIT_TIME) / 1000 IO_WAIT_TIME_MS,
        SUM(S.APPLICATION_WAIT_TIME) / 1000 APP_WAIT_TIME_MS, 
        SUM(S.CONCURRENCY_WAIT_TIME) / 1000 CONC_WAIT_TIME_MS,
        SUM(S.CLUSTER_WAIT_TIME) / 1000 CLUSTER_WAIT_TIME_MS,
        SUM(S.DIRECT_WRITES) DIRECT_WRITES,
        SUM(S.PARSE_CALLS) PARSE_CALLS,
        MAX(ROUND(S.SHARABLE_MEM / 1024)) SHARABLE_MEM_KB,
        L.LINENR LINENR,
        L.STAT_NAME STAT_NAME,
        TO_DATE(MIN(S.FIRST_LOAD_TIME), 'YYYY/MM/DD HH24:MI:SS') BEGIN_INTERVAL_TIME,
        SYSDATE END_INTERVAL_TIME,
        DECODE(MIN(BI.INSTANCE_NUMBER), -2, 'ALL', MIN(S.INST_ID)) INST_ID,
        TO_CHAR(SYSDATE, 'SSSSS') - TO_CHAR(TO_DATE(MIN(S.FIRST_LOAD_TIME), 
          'YYYY/MM/DD HH24:MI:SS'), 'SSSSS') +
          86400 * (TO_CHAR(SYSDATE, 'J') - TO_CHAR(TO_DATE(MIN(S.FIRST_LOAD_TIME), 
          'YYYY/MM/DD HH24:MI:SS'), 'J')) INTERVAL_SECONDS,
        BI.TOTAL_VALUE_DETERMINATION,
        BI.SUPPRESS_ZERO_LINES,
        BI.TIME_UNIT,
        BI.TIME_FACTOR,
        BI.DATA_SOURCE
      FROM
        BASIS_INFO BI,
        GV$SQL S,
        LINES L
      WHERE
        BI.DATA_SOURCE = 'CURRENT' AND
        ( BI.INSTANCE_NUMBER = -1 OR BI.INSTANCE_NUMBER = S.INST_ID ) AND
        BI.SQL_ID = S.SQL_ID AND
        ( BI.PLAN_HASH = -1 OR BI.PLAN_HASH = S.PLAN_HASH_VALUE )
      GROUP BY
        BI.SQL_ID,
        L.LINENR,
        L.STAT_NAME,
        BI.TOTAL_VALUE_DETERMINATION,
        BI.SUPPRESS_ZERO_LINES,
        BI.TIME_UNIT,
        BI.TIME_FACTOR,
        BI.DATA_SOURCE  
    )  
  ),
  TOTAL_FIGURES
  GROUP BY
    LINENR,
    STAT_NAME,
    SUPPRESS_ZERO_LINES
)
WHERE
  SUPPRESS_ZERO_LINES = ' ' OR 
  LTRIM(RTRIM(SUBSTR(VALUE, 1, 17))) != '0' OR
  LTRIM(RTRIM(SUBSTR(VALUE_PER_EXEC, 1, 13))) != '0.00' OR
  ( LINENR < 18 AND LINENR != 11 ) 
ORDER BY
  LINENR
));


