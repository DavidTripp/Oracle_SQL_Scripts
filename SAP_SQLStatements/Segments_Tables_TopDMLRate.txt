SELECT NULL OWNER, NULL TABLE_NAME, NULL PART, NULL NUM_ROWS, NULL STAT_AGE_DAYS,
  NULL "CHANGE_%", NULL DML_TOTAL_PER_S, NULL INS_PER_S, NULL UPD_PER_S, NULL DEL_PER_S,
  NULL CHANGE_MB_PER_H, NULL "100%_CHANGE_DAYS"
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL OWNER, NULL TABLE_NAME, NULL PART, NULL NUM_ROWS, NULL DAYS_SINCE_STAT_RUN,
  NULL "CHANGE_%", NULL DML_TOTAL_PER_S, NULL INSERTS_PER_S, NULL UPDATES_PER_S, NULL DELETES_PER_S,
  NULL CHANGE_MB_PER_H, NULL "100%_CHANGE_DAYS"
FROM DUAL WHERE 1 = 0
)
UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    'SAP%' OWNER,
    'VBOX' TABLE_NAME,
    50 NUM_RECORDS,
    'TOTAL' ORDER_BY         /* TOTAL, INSERT, UPDATE, DELETE */
  FROM
    DUAL
)
SELECT
  OWNER,
  TABLE_NAME,
  PARTITION_NAME PART,
  TO_CHAR(NUM_ROWS, 99999999990) NUM_ROWS,
  TO_CHAR(SECONDS / 86400, 999999990.99) STAT_AGE_DAYS,
  TO_CHAR(LEAST(DECODE(NUM_ROWS, 0, 0, (INSERTS + UPDATES + DELETES) / NUM_ROWS * 100), 9999.99), 9990.99) "CHANGE_%",
  TO_CHAR(DML_TOTAL / SECONDS, 99999999990.99) DML_TOTAL_PER_S,
  TO_CHAR(INSERTS / SECONDS, 999990.99) INS_PER_S,
  TO_CHAR(UPDATES / SECONDS, 999990.99) UPD_PER_S,
  TO_CHAR(DELETES / SECONDS, 999990.99) DEL_PER_S,
  TO_CHAR(AVG_ROW_LEN * DML_TOTAL / SECONDS * 3600 / 1024 / 1024, 
    99999999990.99) CHANGE_MB_PER_H,
  TO_CHAR(NUM_ROWS * SECONDS / DML_TOTAL / 86400, 9999999999999990.99) "100%_CHANGE_DAYS"
FROM
( SELECT
    OWNER,
    TABLE_NAME,
    PARTITION_NAME,
    NUM_ROWS,
    DML_TOTAL,
    INSERTS,
    UPDATES,
    DELETES,
    AVG_ROW_LEN,
    SECONDS,
    NUM_RECORDS
  FROM
  ( SELECT
      T.OWNER,
      T.TABLE_NAME,
      T.PARTITION_NAME,
      T.NUM_ROWS,
      T.LAST_ANALYZED,
      TO_CHAR(SYSDATE, 'SSSSS') - TO_CHAR(T.LAST_ANALYZED, 'SSSSS') +
        86400 * (TO_CHAR(SYSDATE, 'J') - TO_CHAR(T.LAST_ANALYZED, 'J')) SECONDS,
      TM.INSERTS + TM.UPDATES + TM.DELETES DML_TOTAL,
      TM.INSERTS,
      TM.UPDATES,
      TM.DELETES,
      NVL(T.AVG_ROW_LEN, 0) AVG_ROW_LEN,
      BI.NUM_RECORDS,
      BI.ORDER_BY
    FROM
      BASIS_INFO BI,
      ALL_TAB_MODIFICATIONS TM,
      DBA_TAB_STATISTICS T
    WHERE
      TM.TABLE_OWNER LIKE BI.OWNER AND
      TM.TABLE_NAME LIKE BI.TABLE_NAME AND
      TM.TABLE_OWNER = T.OWNER AND
      TM.TABLE_NAME = T.TABLE_NAME AND
      NVL(TM.PARTITION_NAME, ' ') = NVL(T.PARTITION_NAME, ' ') AND
      T.LAST_ANALYZED IS NOT NULL 
  )
  ORDER BY
    DECODE(ORDER_BY, 'TOTAL', DML_TOTAL / SECONDS, 'INSERT', INSERTS / SECONDS,
      'UPDATE', UPDATES / SECONDS, 'DELETE', DELETES / SECONDS) DESC
)
WHERE
  ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS )
));
