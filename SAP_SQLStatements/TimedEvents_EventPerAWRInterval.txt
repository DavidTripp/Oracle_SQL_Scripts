SELECT NULL BEGIN_TIME, NULL INST, NULL ACT_SESS, NULL TOTAL_WAITS,
  NULL TOTAL_TIMEOUTS, NULL TIME_WAITED_S, NULL AVG_MS FROM DUAL
  WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL INST, NULL ACT_SESS, NULL TOTAL_WAITS,
  NULL TOTAL_TIMEOUTS, NULL TIME_WAITED_S, NULL AVG_MS  FROM DUAL
  WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    RTT_MICRO,
    EVENT,
    DECODE(AGGREGATE_BY,
      'SNAPSHOT',    'YYYY-MM-DD HH24:MI:SS',
      'DAY',         'YYYY-MM-DD (DY)',
      'HOUR_OF_DAY', 'HH24',
      AGGREGATE_BY ) AGGREGATE_BY,
    MIN_AVG_DIRECT_PATH_TIME_MS,
    CONSIDER_TIMEOUTS,
    EXCLUDE_WEEKENDS,
    EXCLUDE_ZERO_LINES
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,          /* -1: current instance, -2: all instances aggregated, -3: all instances individually */
      TO_DATE('01.01.1000 09:07:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      400 RTT_MICRO,
      'direct path read' EVENT,
      'SNAPSHOT' AGGREGATE_BY,    /* SNAPSHOT, DAY, HOUR_OF_DAY or Oracle time pattern */
      1 MIN_AVG_DIRECT_PATH_TIME_MS,
      'X' CONSIDER_TIMEOUTS,
      ' ' EXCLUDE_WEEKENDS,
      'X' EXCLUDE_ZERO_LINES
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    PREV_SNAP_ID,
    MIN_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    SUM(INTERVAL_SECONDS) OVER () TOTAL_SECONDS,
    RESTART
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      HSS1.SNAP_ID PREV_SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2
    WHERE
      HSS2.DBID = BI.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR 
        BI.INSTANCE_NUMBER = -3 OR
        HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER
      ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
    ORDER BY
      HSS2.SNAP_ID
  )
),
TIMED_EVENTS_PER_SNAPSHOT AS
( SELECT /*+ MATERIALIZE */
    SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INSTANCE_NUMBER,
    INTERVAL_SECONDS,
    EVENT_NAME,
    TOTAL_WAITS - DECODE(CONSIDER_TIMEOUTS, 'X', TOTAL_TIMEOUTS, 0) TOTAL_WAITS,
    TOTAL_TIMEOUTS,      
    GREATEST(DECODE(SUBSTR(EVENT_NAME, 1, 6), 'direct', 
      MIN_AVG_DIRECT_PATH_TIME_MS * 1000 * TOTAL_WAITS, 0),
      TIME_WAITED_MICRO) TIME_WAITED_MICRO
  FROM
  ( SELECT
      SS.SNAP_ID,
      SS.BEGIN_INTERVAL_TIME,
      SS.END_INTERVAL_TIME,       
      SS.INSTANCE_NUMBER,
      SS.INTERVAL_SECONDS,
      HSE2.EVENT_NAME,
      DECODE(SS.RESTART, 'NO', HSE2.TOTAL_WAITS - NVL(HSE1.TOTAL_WAITS, 0),
        HSE2.TOTAL_WAITS) TOTAL_WAITS,
      DECODE(SS.RESTART, 'NO', HSE2.TOTAL_TIMEOUTS - NVL(HSE1.TOTAL_TIMEOUTS, 0),
        HSE2.TOTAL_TIMEOUTS) TOTAL_TIMEOUTS,
      DECODE(SS.RESTART, 'NO', HSE2.TIME_WAITED_MICRO - 
        NVL(HSE1.TIME_WAITED_MICRO, 0), HSE2.TIME_WAITED_MICRO) TIME_WAITED_MICRO,
      BI.MIN_AVG_DIRECT_PATH_TIME_MS,
      BI.CONSIDER_TIMEOUTS
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_SYSTEM_EVENT HSE1, 
      DBA_HIST_SYSTEM_EVENT HSE2
    WHERE
      SS.DBID = HSE2.DBID AND
      HSE1.DBID (+) = HSE2.DBID AND
      SS.INSTANCE_NUMBER = HSE2.INSTANCE_NUMBER AND
      HSE1.INSTANCE_NUMBER (+) = HSE2.INSTANCE_NUMBER AND
      SS.SNAP_ID = HSE2.SNAP_ID AND
      SS.PREV_SNAP_ID IS NOT NULL AND
      SS.SNAP_ID != SS.MIN_SNAP_ID AND
      HSE1.SNAP_ID (+) = HSE2.SNAP_ID - 1 AND
      HSE1.EVENT_NAME (+) = HSE2.EVENT_NAME AND
      SS.PREV_SNAP_ID IS NOT NULL AND
      HSE2.WAIT_CLASS != 'Idle' AND
      HSE2.EVENT_NAME = BI.EVENT
    UNION ALL
    ( SELECT 
        SS.SNAP_ID,
        SS.BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME,
        SS.INSTANCE_NUMBER,
        SS.INTERVAL_SECONDS,
        'CPU' EVENT_NAME,
        NULL TOTAL_WAITS,
        NULL TOTAL_TIMEOUTS,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE - NVL(HSY1.VALUE, 0) , 
          HSY2.VALUE) TIME_WAITED_MICRO,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_SYS_TIME_MODEL HSY1,  
        DBA_HIST_SYS_TIME_MODEL HSY2
      WHERE
        HSY1.DBID (+) = HSY2.DBID AND
        HSY2.DBID = SS.DBID AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        HSY2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
        HSY2.SNAP_ID = SS.SNAP_ID AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        SS.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        HSY2.STAT_NAME = 'DB CPU' AND
        BI.EVENT = 'CPU'
    )
    UNION ALL
    ( SELECT 
        SS.SNAP_ID,
        SS.BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME,
        SS.INSTANCE_NUMBER,
        SS.INTERVAL_SECONDS,
        'NETWORK' EVENT_NAME,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE -
          NVL(HSY1.VALUE, 0), HSY2.VALUE) TOTAL_WAITS,
        0 TOTAL_TIMEOUTS,
          BI.RTT_MICRO * DECODE(SS.RESTART, 'NO', HSY2.VALUE - NVL(HSY1.VALUE, 0), 
          HSY2.VALUE) TIME_WAITED_MICRO,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_SYSSTAT HSY1, 
        DBA_HIST_SYSSTAT HSY2
      WHERE
        SS.DBID = HSY2.DBID AND
        HSY1.DBID (+) = HSY2.DBID AND
        SS.INSTANCE_NUMBER = HSY2.INSTANCE_NUMBER AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        SS.SNAP_ID = HSY2.SNAP_ID AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        SS.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        HSY2.STAT_NAME = 'user calls' AND
        BI.EVENT = 'NETWORK'                
    )
  )
)
SELECT
  'BEGIN TIME: ' || TO_CHAR(MIN(BEGIN_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss') TIMEFRAME,
  NULL INST,
  NULL ACT_SESS,
  NULL TOTAL_WAITS,
  NULL TOTAL_TIMEOUTS,
  NULL TIME_WAITED_S,
  NULL AVG_MS
FROM
  SNAPSHOTS
WHERE
  SNAP_ID != MIN_SNAP_ID
UNION ALL
( SELECT
    'END TIME:   ' || TO_CHAR(MAX(END_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss') TIMEFRAME,
    NULL INST,
    NULL ACT_SESS,
    NULL TOTAL_WAITS,
    NULL TOTAL_TIMEOUTS,
    NULL TIME_WAITED_S,
    NULL AVG_MS
  FROM
    SNAPSHOTS
)
UNION ALL
( SELECT
    'EVENT: ' || EVENT TIMEFRAME,
    NULL INST,
    NULL ACT_SESS,
    NULL TOTAL_WAITS,
    NULL TOTAL_TIMEOUTS,
    NULL TIME_WAITED_S,
    NULL AVG_MS
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    'WEEKENDS EXCLUDED: ' || DECODE(EXCLUDE_WEEKENDS, 'X', 'YES', 'NO') TIMEFRAME,
    NULL INST,
    NULL ACT_SESS,
    NULL TOTAL_WAITS,
    NULL TOTAL_TIMEOUTS,
    NULL TIME_WAITED_S,
    NULL AVG_MS
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    NULL TIMEFRAME,
    NULL INST,
    NULL ACT_SESS,
    NULL TOTAL_WAITS,
    NULL TOTAL_TIMEOUTS,
    NULL TIME_WAITED_S,
    NULL AVG_MS
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    BEGIN_TIME,
    INST,
    ACT_SESS,
    TOTAL_WAITS,
    TOTAL_TIMEOUTS,
    TIME_WAITED_S,
    AVG_MS
  FROM
  ( SELECT
      BEGIN_TIME,
      DECODE(INSTANCE_NUMBER, 0, 'any', TO_CHAR(INSTANCE_NUMBER, 990)) INST,
      EVENT_NAME,
      TO_CHAR(DECODE(INTERVAL_SECONDS, 0, 0, WAIT_TIME_MS / 1000 / INTERVAL_SECONDS), 9990.99) ACT_SESS,
      TO_CHAR(TOTAL_WAITs, 999999999990) TOTAL_WAITS,
      TO_CHAR(TOTAL_TIMEOUTS, 9999999999990) TOTAL_TIMEOUTS,
      TO_CHAR(WAIT_TIME_MS / 1000, 999999999990) TIME_WAITED_S,
      TO_CHAR(DECODE(TOTAL_WAITS, 0, 0, WAIT_TIME_MS / TOTAL_WAITS), 99999990.99) AVG_MS
    FROM
    ( SELECT
        BEGIN_TIME,
        INSTANCE_NUMBER,
        EVENT_NAME,
        SUM(INTERVAL_SECONDS) INTERVAL_SECONDS,
        SUM(WAIT_TIME_MS) WAIT_TIME_MS,
        SUM(TOTAL_WAITS) TOTAL_WAITS,
        SUM(TOTAL_TIMEOUTS) TOTAL_TIMEOUTS
      FROM
      ( SELECT
          BEGIN_TIME, 
          INSTANCE_NUMBER,
          MAX(INTERVAL_SECONDS) INTERVAL_SECONDS,
          EVENT_NAME,
          SUM(WAIT_TIME_MS) WAIT_TIME_MS,
          SUM(TOTAL_WAITS) TOTAL_WAITS,
          SUM(TOTAL_TIMEOUTS) TOTAL_TIMEOUTS
        FROM
        ( SELECT
            TE.SNAP_ID,
            MIN(TO_CHAR(BEGIN_INTERVAL_TIME, BI.AGGREGATE_BY)) OVER (PARTITION BY TE.SNAP_ID) BEGIN_TIME,
            DECODE(BI.INSTANCE_NUMBER, -2, 0, TE.INSTANCE_NUMBER) INSTANCE_NUMBER,
            TE.INTERVAL_SECONDS,
            TE.EVENT_NAME,
            TE.TIME_WAITED_MICRO / 1000 WAIT_TIME_MS,
            TE.TOTAL_WAITS,
            TE.TOTAL_TIMEOUTS,
            BI.AGGREGATE_BY
          FROM
            BASIS_INFO BI,
            TIMED_EVENTS_PER_SNAPSHOT TE  
          WHERE
            TE.EVENT_NAME = BI.EVENT AND
            ( BI.EXCLUDE_WEEKENDS = ' ' OR 
              TO_CHAR(TE.BEGIN_INTERVAL_TIME, 'D') NOT IN (7, 1) ) AND
            ( BI.EXCLUDE_ZERO_LINES = ' ' OR 
              TE.TOTAL_WAITS > 0 OR 
              TE.TIME_WAITED_MICRO > 0 )
        )
        GROUP BY
          BEGIN_TIME,
          SNAP_ID,
          INSTANCE_NUMBER,
          EVENT_NAME
      )
    GROUP BY
      BEGIN_TIME,
      INSTANCE_NUMBER,
      EVENT_NAME
    )
  ORDER BY
    BEGIN_TIME DESC,
    INSTANCE_NUMBER
  )
)
));
