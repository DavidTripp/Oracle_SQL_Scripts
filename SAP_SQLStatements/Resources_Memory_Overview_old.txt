SELECT NULL COL1, NULL COL2, NULL COL3 FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL COL1, NULL COL2, NULL COL3 FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    SEGMENTS_PER_BUFFER_POOL,
    SQL_STATEMENTS,
    SHARED_POOL_AREAS,
    DISPLAY_GENERAL,
    DISPLAY_PARAMETERS,
    DISPLAY_SGA,
    DISPLAY_BUFFER_POOL,
    DISPLAY_SHARED_POOL,
    DISPLAY_SQL,
    NO_HUGEPAGES_ON_LINUX
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      20 SEGMENTS_PER_BUFFER_POOL,
      10 SQL_STATEMENTS,
      20 SHARED_POOL_AREAS,
      5  LOCAL_MEM_PER_PROCESS_MB,
      'X' DISPLAY_GENERAL,
      'X' DISPLAY_PARAMETERS,
      'X' DISPLAY_SGA,
      'X' DISPLAY_BUFFER_POOL,
      'X' DISPLAY_SHARED_POOL,
      'X' DISPLAY_SQL,
      'X' NO_HUGEPAGES_ON_LINUX      /* process memory overhead, see SAP Note 1672954 */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SEGMENTS AS
( SELECT /*+ MATERIALIZE */
    DS.OWNER,
    DS.SEGMENT_NAME,
    DS.SEGMENT_TYPE,
    DS.PARTITION_NAME,
    DS.BUFFER_POOL,
    DS.TABLESPACE_NAME,
    DS.BYTES,
    DT.BLOCK_SIZE
  FROM
    DBA_SEGMENTS DS,
    DBA_TABLESPACES DT
  WHERE
    DS.TABLESPACE_NAME = DT.TABLESPACE_NAME 
),
OBJECTS AS
( SELECT /*+ MATERIALIZE */
    OWNER,
    OBJECT_NAME,
    SUBOBJECT_NAME,
    DATA_OBJECT_ID
  FROM
    DBA_OBJECTS
),
PARAMETERS AS
( SELECT /*+ MATERIALIZE */
    P.INST_ID,
    P.NAME,
    P.VALUE,
    P.ISDEFAULT
  FROM
    BASIS_INFO BI,
    GV$PARAMETER2 P
  WHERE
    P.INST_ID = BI.INSTANCE_NUMBER AND
    UPPER(P.NAME) IN 
      ( 'BITMAP_MERGE_AREA_SIZE',
        'CREATE_BITMAP_AREA_SIZE',
        'DB_BLOCK_BUFFERS', 
        'DB_BLOCK_SIZE',
        'DB_CACHE_SIZE',
        'DB_KEEP_CACHE_SIZE',
        'DB_RECYCLE_CACHE_SIZE',
        'DB_2K_CACHE_SIZE',
        'DB_4K_CACHE_SIZE',
        'DB_8K_CACHE_SIZE',
        'DB_16K_CACHE_SIZE',
        'DB_32K_CACHE_SIZE',
        'HASH_AREA_SIZE',
        'JAVA_POOL_SIZE',
        'LARGE_POOL_SIZE',
        'LOCK_SGA',
        'LOG_BUFFER',
        'MEMORY_TARGET',
        'MEMORY_MAX_TARGET',
        'PGA_AGGREGATE_TARGET',
        'PROCESSES',
        'SGA_MAX_SIZE',
        'SGA_TARGET',
        'SHARED_POOL_SIZE',
        'SORT_AREA_SIZE',
        'STREAMS_POOL_SIZE',
        'WORKAREA_SIZE_POLICY',
        '_PGA_MAX_SIZE'
      )
),
MEMORY_AREAS_HELPER AS
( SELECT /*+ MATERIALIZE */
    *
  FROM
  ( SELECT 
      OS.INST_ID INST_ID,
      1 LINE,
      'Physical memory' NAME,
      VALUE / 1024 / 1024 VALUE
    FROM
      BASIS_INFO BI,
      GV$OSSTAT OS
    WHERE
      OS.INST_ID = BI.INSTANCE_NUMBER AND
      OS.STAT_NAME = 'PHYSICAL_MEMORY_BYTES'
    UNION ALL
    ( SELECT
        SS.INST_ID INST_ID,
        2 LINE,
        'Oracle SGA used' NAME,
        SUM(SS.BYTES) / 1024 / 1024 VALUE
      FROM 
        BASIS_INFO BI,
        GV$SGASTAT SS
      WHERE
        SS.INST_ID = BI.INSTANCE_NUMBER
      GROUP BY
        SS.INST_ID
    )
    UNION ALL
    ( SELECT
        SS.INST_ID INST_ID,
        3 LINE,
        'Oracle SGA reserved' NAME,
        GREATEST(TO_NUMBER(P.VALUE), SUM(SS.BYTES)) / 1024 / 1024 VALUE
      FROM 
        BASIS_INFO BI,
        GV$SGASTAT SS,
        PARAMETERS P
      WHERE
        SS.INST_ID = BI.INSTANCE_NUMBER AND
        P.INST_ID = BI.INSTANCE_NUMBER AND
        UPPER(P.NAME) = 'SGA_MAX_SIZE'
      GROUP BY
        SS.INST_ID,
        P.VALUE
    )
    UNION ALL
    ( SELECT
        PS.INST_ID, 
        4 LINE,
        'Oracle PGA' NAME, 
        PS.VALUE / 1024 / 1024 VALUE
      FROM
        BASIS_INFO BI,
        GV$PGASTAT PS
      WHERE
        PS.INST_ID = BI.INSTANCE_NUMBER AND
        PS.NAME = 'total PGA allocated'
    )
    UNION ALL
    ( SELECT
        R.INST_ID,
        5 LINE,
        'Oracle process memory' NAME, 
        CASE
          WHEN 
            BI.NO_HUGEPAGES_ON_LINUX = 'X' AND 
            D.PLATFORM_NAME = 'Linux x86 64-bit'
          THEN 
            R.CURRENT_UTILIZATION * ( 5 + 
            SUM(S.BYTES / 1024 / 1024) / 4096 * 8 )
          WHEN 
            BI.NO_HUGEPAGES_ON_LINUX = 'X' AND 
            D.PLATFORM_NAME = 'Linux IA (64-bit)'
          THEN
            R.CURRENT_UTILIZATION * ( 5 + 
            SUM(S.BYTES / 1024 / 1024) / 65536 * 8 )
          ELSE
            R.CURRENT_UTILIZATION * 5
          END VALUE
      FROM
        BASIS_INFO BI,
        GV$RESOURCE_LIMIT R,
        GV$SGASTAT S,
        GV$DATABASE D
      WHERE
        R.INST_ID = BI.INSTANCE_NUMBER AND
        R.RESOURCE_NAME = 'processes' AND
        S.INST_ID = BI.INSTANCE_NUMBER AND
        D.INST_ID = BI.INSTANCE_NUMBER 
      GROUP BY
        R.INST_ID,
        R.CURRENT_UTILIZATION,
        D.PLATFORM_NAME,
        BI.NO_HUGEPAGES_ON_LINUX
    )
  )
),
MEMORY_AREAS AS
( SELECT /*+ MATERIALIZE */
    INST_ID,
    LINE,
    NAME,
    VALUE
  FROM
    MEMORY_AREAS_HELPER
  UNION ALL
  ( SELECT
      INST_ID,
      6 LINE,
      'Oracle total used' NAME,
      SUM(VALUE) VALUE
    FROM
      MEMORY_AREAS_HELPER
    WHERE
      NAME IN ('Oracle SGA used', 'Oracle PGA', 
        'Oracle process memory')
    GROUP BY
      INST_ID
  )
  UNION ALL
  ( SELECT
      INST_ID,
      7 LINE,
      'Oracle total reserved' NAME,
      SUM(VALUE) VALUE
    FROM
      MEMORY_AREAS_HELPER
    WHERE
      NAME IN ('Oracle SGA reserved', 'Oracle PGA', 
        'Oracle process memory')
    GROUP BY
      INST_ID
  )
),
MEMORY_AREAS_MAX_HELPER AS
( SELECT /*+ MATERIALIZE */
    *
  FROM
  ( SELECT 
      OS.INSTANCE_NUMBER INST_ID,
      1 LINE,
      'Physical memory' NAME,
      MAX(VALUE) / 1024 / 1024 VALUE
    FROM
      BASIS_INFO BI,
      DBA_HIST_OSSTAT OS
    WHERE
      BI.DBID = OS.DBID AND
      OS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER AND
      OS.STAT_NAME = 'PHYSICAL_MEMORY_BYTES'
    GROUP BY
      OS.INSTANCE_NUMBER
    UNION ALL
    ( SELECT
        INST_ID,
        2 LINE,
        NAME,
        MAX(VALUE)
      FROM
      ( SELECT
          SS.INSTANCE_NUMBER INST_ID,
          'Oracle SGA used' NAME,
          GREATEST(TO_NUMBER(MA.VALUE), SUM(SS.BYTES) / 1024 / 1024) VALUE
        FROM 
          BASIS_INFO BI,
          DBA_HIST_SGASTAT SS,
          MEMORY_AREAS MA
        WHERE
          BI.DBID = SS.DBID AND
          SS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER AND
          MA.NAME = 'Oracle SGA used'
        GROUP BY
          MA.VALUE,
          SS.INSTANCE_NUMBER,
          SS.SNAP_ID
      )
      GROUP BY
        INST_ID,
        NAME
    )
    UNION ALL
    ( SELECT
        SS.INSTANCE_NUMBER INST_ID,
        3 LINE,
        'Oracle SGA reserved' NAME,
        GREATEST(TO_NUMBER(MA.VALUE) * 1024 * 1024, P.VALUE, MAX(SS.BYTES)) / 1024 / 1024 VALUE
      FROM 
        BASIS_INFO BI,
        ( SELECT
            DBID,
            INSTANCE_NUMBER,
            SNAP_ID,
            SUM(BYTES) BYTES
          FROM
            DBA_HIST_SGASTAT
          GROUP BY
            DBID,
            INSTANCE_NUMBER,
            SNAP_ID
        ) SS,
        PARAMETERS P,
        MEMORY_AREAS MA
      WHERE
        BI.DBID = SS.DBID AND
        BI.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
        P.INST_ID = BI.INSTANCE_NUMBER AND
        UPPER(P.NAME) = 'SGA_MAX_SIZE' AND
        MA.NAME = 'Oracle SGA reserved'
      GROUP BY
        MA.VALUE,
        SS.INSTANCE_NUMBER,
        P.VALUE
    )
    UNION ALL
    ( SELECT
        PS.INSTANCE_NUMBER INST_ID,
        4 LINE,
        'Oracle PGA' NAME, 
        MAX(PS.VALUE) / 1024 / 1024 VALUE
      FROM
        BASIS_INFO BI,
        DBA_HIST_PGASTAT PS
      WHERE
        BI.DBID = PS.DBID AND
        BI.INSTANCE_NUMBER = PS.INSTANCE_NUMBER AND
        PS.NAME = 'maximum PGA allocated'
      GROUP BY
        PS.INSTANCE_NUMBER
    )
    UNION ALL
    ( SELECT
        R.INST_ID,
        5 LINE,
        'Oracle process memory' NAME, 
        CASE
          WHEN 
            BI.NO_HUGEPAGES_ON_LINUX = 'X' AND 
            D.PLATFORM_NAME = 'Linux x86 64-bit'
          THEN 
            R.MAX_UTILIZATION * ( 5 + 
            SUM(S.BYTES / 1024 / 1024) / 4096 * 8 )
          WHEN 
            BI.NO_HUGEPAGES_ON_LINUX = 'X' AND 
            D.PLATFORM_NAME = 'Linux IA (64-bit)'
          THEN
            R.MAX_UTILIZATION * ( 5 + 
            SUM(S.BYTES / 1024 / 1024) / 65536 * 8 )
          ELSE
            R.MAX_UTILIZATION * 5
          END VALUE
      FROM
        BASIS_INFO BI,
        GV$RESOURCE_LIMIT R,
        GV$SGASTAT S,
        GV$DATABASE D
      WHERE
        R.INST_ID = BI.INSTANCE_NUMBER AND
        R.RESOURCE_NAME = 'processes' AND
        S.INST_ID = BI.INSTANCE_NUMBER AND
        D.INST_ID = BI.INSTANCE_NUMBER 
      GROUP BY
        R.INST_ID,
        R.MAX_UTILIZATION,
        D.PLATFORM_NAME,
        BI.NO_HUGEPAGES_ON_LINUX
    )
  )
),
MEMORY_AREAS_MAX AS
( SELECT /*+ MATERIALIZE */
    INST_ID,
    LINE,
    NAME,
    VALUE
  FROM
    MEMORY_AREAS_MAX_HELPER
  UNION ALL
  ( SELECT
      INST_ID,
      6 LINE,
      'Oracle total used' NAME,
      SUM(VALUE) VALUE
    FROM
      MEMORY_AREAS_MAX_HELPER
    WHERE
      NAME IN ('Oracle SGA used', 'Oracle PGA', 
        'Oracle process memory')
    GROUP BY
      INST_ID
  )
  UNION ALL
  ( SELECT
      INST_ID,
      7 LINE,
      'Oracle total reserved' NAME,
      SUM(VALUE) VALUE
    FROM
      MEMORY_AREAS_MAX_HELPER
    WHERE
      NAME IN ('Oracle SGA reserved', 'Oracle PGA', 
        'Oracle process memory')
    GROUP BY
      INST_ID
  )
),
SGA_AREAS AS
( SELECT /*+ MATERIALIZE */
    SS.INST_ID INST_ID,
    NVL(POOL, NAME) NAME,
    SUM(BYTES) / 1024 / 1024 VALUE
  FROM 
    BASIS_INFO BI,
    GV$SGASTAT SS
  WHERE
    SS.INST_ID = BI.INSTANCE_NUMBER 
  GROUP BY
    SS.INST_ID,
    NVL(POOL, NAME) 
),
SGA_AREAS_MAX AS
( SELECT /*+ MATERIALIZE */
    INST_ID,
    NAME,
    MAX(VALUE) VALUE
  FROM
  ( SELECT
      SS.INSTANCE_NUMBER INST_ID,
      NVL(POOL, NAME) NAME,
      SUM(BYTES) / 1024 / 1024 VALUE
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SGASTAT SS
    WHERE
      BI.DBID = SS.DBID AND
      BI.INSTANCE_NUMBER = SS.INSTANCE_NUMBER 
    GROUP BY
      SS.SNAP_ID,
      SS.INSTANCE_NUMBER, 
      NVL(POOL, NAME) 
  )
  GROUP BY
    INST_ID,
    NAME
),
BUFFER_POOLS AS
( SELECT /*+ MATERIALIZE */
    BP.INST_ID,
    BP.NAME,
    BP.BLOCK_SIZE,
    BP.CURRENT_SIZE,
    DECODE(BPS.DB_BLOCK_GETS + BPS.CONSISTENT_GETS, 0, 0, (1 - BPS.PHYSICAL_READS / 
      (BPS.DB_BLOCK_GETS + BPS.CONSISTENT_GETS)) * 100 ) QUALITY
  FROM
    BASIS_INFO BI,
    GV$BUFFER_POOL BP,
    GV$BUFFER_POOL_STATISTICS BPS
  WHERE
    BP.INST_ID = BI.INSTANCE_NUMBER AND
    BPS.INST_ID = BP.INST_ID AND
    BPS.NAME = BP.NAME AND
    BPS.BLOCK_SIZE = BP.BLOCK_SIZE
),
BUFFER_POOL_SEGMENTS AS
( SELECT /*+ MATERIALIZE */
    POOL_NAME,
    BLOCK_SIZE,
    OWNER,
    SEGMENT_NAME,
    SIZE_BYTE
  FROM
  ( SELECT
      POOL_NAME,
      BLOCK_SIZE,
      OWNER,
      SEGMENT_NAME,
      SUM(SIZE_BYTE) SIZE_BYTE,
      SEGMENTS_PER_BUFFER_POOL,
      ROW_NUMBER() OVER (PARTITION BY POOL_NAME, BLOCK_SIZE ORDER BY SUM(SIZE_BYTE) DESC) POOLN
    FROM
    ( SELECT 
        BP.NAME POOL_NAME,
        BP.BLOCK_SIZE,
        S.OWNER,
        S.SEGMENT_NAME,
        S.PARTITION_NAME,
        BP.BLOCK_SIZE * COUNT(*) SIZE_BYTE,
        BI.SEGMENTS_PER_BUFFER_POOL,
        ROW_NUMBER() OVER (PARTITION BY O.DATA_OBJECT_ID ORDER BY 1) CLUSTRN
      FROM
        BASIS_INFO BI,
        GV$BH B,
        OBJECTS O, 
        SEGMENTS S,
        BUFFER_POOLS BP
      WHERE 
        B.INST_ID = BI.INSTANCE_NUMBER AND
        O.DATA_OBJECT_ID = B.OBJD AND
        S.OWNER = O.OWNER AND
        S.SEGMENT_NAME = O.OBJECT_NAME AND
        NVL(S.PARTITION_NAME, ' ') = NVL(O.SUBOBJECT_NAME, ' ') AND
        BP.NAME = S.BUFFER_POOL AND
        BP.BLOCK_SIZE = S.BLOCK_SIZE AND
        BP.INST_ID = B.INST_ID
      GROUP BY
        BP.NAME,
        BP.BLOCK_SIZE,
        S.OWNER,
        S.SEGMENT_NAME,
        S.PARTITION_NAME,
        BI.SEGMENTS_PER_BUFFER_POOL,
        O.DATA_OBJECT_ID
    )
    WHERE
      CLUSTRN = 1
    GROUP BY
      POOL_NAME,
      BLOCK_SIZE,
      OWNER,
      SEGMENT_NAME,
      SEGMENTS_PER_BUFFER_POOL
  )
  WHERE
    ( SEGMENTS_PER_BUFFER_POOL = -1 OR
      POOLN <= SEGMENTS_PER_BUFFER_POOL )
),
SHARED_POOL_AREAS AS
( SELECT /*+ MATERIALIZE */
    INST_ID,
    NAME,
    BYTES
  FROM
  ( SELECT
      SS.INST_ID,
      SS.NAME,
      SS.BYTES,
      BI.SHARED_POOL_AREAS
    FROM
      BASIS_INFO BI,
      GV$SGASTAT SS
    WHERE
      SS.INST_ID = BI.INSTANCE_NUMBER AND
      SS.POOL = 'shared pool'
    ORDER BY
      SS.BYTES DESC
  )
  WHERE
  ( SHARED_POOL_AREAS = -1 OR
    ROWNUM <= SHARED_POOL_AREAS )
),
SHARED_POOL_AREAS_MAX AS
( SELECT /*+ MATERIALIZE */
    SS.INSTANCE_NUMBER,
    SS.NAME,
    MAX(SS.BYTES) BYTES
  FROM
    BASIS_INFO BI,
    DBA_HIST_SGASTAT SS
  WHERE
    BI.DBID = SS.DBID AND
    BI.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
    SS.POOL = 'shared pool'
  GROUP BY
    SS.INSTANCE_NUMBER,
    SS.NAME
),
SQL_STATEMENTS AS
( SELECT /*+ MATERIALIZE */
    INST_ID,
    SQL_ID,
    SHARABLE_MEM / 1024 / 1024 SHARABLE_MEM_MB
  FROM
  ( SELECT
      SS.INST_ID,
      SS.SQL_ID,
      SS.SHARABLE_MEM,
      BI.SQL_STATEMENTS,
      ROW_NUMBER () OVER (PARTITION BY SS.INST_ID ORDER BY SHARABLE_MEM DESC ) RN 
    FROM
      BASIS_INFO BI,
      GV$SQLSTATS SS
    WHERE
      SS.INST_ID = BI.INSTANCE_NUMBER
  )
  WHERE
  ( SQL_STATEMENTS = -1 OR RN <= SQL_STATEMENTS )
)
SELECT
  'EVALUATION TIME:' COL1,
  TO_CHAR(SYSDATE, 'dd.mm.yyyy hh24:mi:ss') COL2,
  NULL COL3
FROM
  DUAL
UNION ALL
( SELECT
    'INSTANCE NUMBER:',
    TO_CHAR(INSTANCE_NUMBER),
    NULL
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT NULL, NULL, NULL FROM DUAL )
UNION ALL
( SELECT 'GENERAL OVERVIEW', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_GENERAL = 'X' )
UNION ALL
( SELECT '****************', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_GENERAL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_GENERAL = 'X' )
UNION ALL
( SELECT 'AREA', 'CURRENT_SIZE', 'MAXIMUM_SIZE' FROM BASIS_INFO WHERE DISPLAY_GENERAL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_GENERAL = 'X' )
UNION ALL
( SELECT
    NAME,
    TO_CHAR(VALUE, 999999999990.99)  || ' GB', 
    TO_CHAR(MAX_VALUE, 9999999990.99) || ' GB'
  FROM
  ( SELECT
      M.NAME,
      M.VALUE / 1024 VALUE,
      MM.VALUE / 1024 MAX_VALUE
    FROM
      BASIS_INFO BI,
      MEMORY_AREAS M,
      MEMORY_AREAS_MAX MM
    WHERE
      BI.DISPLAY_GENERAL = 'X' AND
      M.NAME = MM.NAME
    ORDER BY
      M.LINE
  )
)
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_GENERAL = 'X' )
UNION ALL
( SELECT 'SGA OVERVIEW', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SGA = 'X' )
UNION ALL
( SELECT '************', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SGA = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SGA = 'X' )
UNION ALL
( SELECT 'AREA', 'CURRENT_SIZE', 'MAXIMUM_SIZE' FROM BASIS_INFO WHERE DISPLAY_SGA = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SGA = 'X' )
UNION ALL
( SELECT
    NAME,
    TO_CHAR(VALUE, 999999999990.99)  || ' MB', 
    TO_CHAR(MAX_VALUE, 9999999990.99) || ' MB'
  FROM
  ( SELECT
      DECODE(SA.NAME, 
        'buffer_cache',   'Buffer pool',
        'fixed_sga',      'Fixed SGA',
        'java pool',      'Java pool',
        'large pool',     'Large pool',
        'log_buffer',     'Log buffer',
        'shared_io_pool', 'Shared I/O pool',
        'shared pool',    'Shared pool',
        'streams pool',   'Streams pool',
        SA.NAME) NAME,
      SA.VALUE,
      GREATEST(TO_NUMBER(SA.VALUE), TO_NUMBER(SMA.VALUE)) MAX_VALUE
    FROM
      BASIS_INFO BI,
      SGA_AREAS SA,
      SGA_AREAS_MAX SMA
    WHERE
      BI.DISPLAY_SGA = 'X' AND
      SA.NAME = SMA.NAME
    ORDER BY
      SA.VALUE DESC
  )
)
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SGA = 'X' )
UNION ALL
( SELECT 'BUFFER POOL OVERVIEW', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_BUFFER_POOL = 'X' )
UNION ALL
( SELECT '********************', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_BUFFER_POOL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_BUFFER_POOL = 'X' )
UNION ALL
( SELECT
    *
  FROM
  ( SELECT
      NAME,
      VALUE, 
      MAX_VALUE
    FROM
    ( SELECT
        NAME || ' (' || BLOCK_SIZE || ' byte)' NAME,
        NAME POOL_NAME,
        BLOCK_SIZE,
        1 LINE,
        TO_CHAR(CURRENT_SIZE, 999999999990.99)  || ' MB' VALUE,
        'Quality:' || TO_CHAR(QUALITY,  990.99) || ' %' MAX_VALUE
      FROM
        BASIS_INFO BI,
        BUFFER_POOLS BP
      WHERE
        BI.DISPLAY_BUFFER_POOL = 'X' 
      UNION ALL
      ( SELECT
          NULL NAME,
          NAME POOL_NAME,
          BLOCK_SIZE,
          2 LINE,
          NULL,
          NULL
        FROM
          BASIS_INFO BI,
          BUFFER_POOLS BP
        WHERE
          BI.DISPLAY_BUFFER_POOL = 'X' 
      )
      UNION ALL
      ( SELECT
          NAME,
          POOL_NAME,
          BLOCK_SIZE,
          2 + RN LINE,
          TO_CHAR(VALUE, 999999999990.99)  || ' MB' VALUE,
          TO_CHAR(MAX_VALUE, 99999999990.99) || ' %' MAX_VALUE
        FROM
        ( SELECT
            SEGMENT_NAME NAME,
            POOL_NAME,
            BPS.BLOCK_SIZE,
            ROW_NUMBER () OVER (PARTITION BY BPS.POOL_NAME, BPS.BLOCK_SIZE ORDER BY SIZE_BYTE DESC) RN,
            SIZE_BYTE / 1024 / 1024 VALUE,
            DECODE(BP.CURRENT_SIZE, 0, 0, BPS.SIZE_BYTE / 
              1024 / 1024 / BP.CURRENT_SIZE * 100) MAX_VALUE,
            BI.SEGMENTS_PER_BUFFER_POOL
          FROM
            BASIS_INFO BI,
            BUFFER_POOLS BP,
            BUFFER_POOL_SEGMENTS BPS
          WHERE
            BI.DISPLAY_BUFFER_POOL = 'X' AND
            BP.NAME = BPS.POOL_NAME AND
            BP.BLOCK_SIZE = BPS.BLOCK_SIZE
        )
      )
      UNION ALL
      ( SELECT
          NULL NAME,
          NAME POOL_NAME,
          BLOCK_SIZE,
          999999 LINE,
          NULL,
          NULL
        FROM
          BASIS_INFO BI,
          BUFFER_POOLS BP
        WHERE
          BI.DISPLAY_BUFFER_POOL = 'X' 
      )
    )
    ORDER BY
      POOL_NAME,
      BLOCK_SIZE,
      LINE
  )
)
UNION ALL
( SELECT 'SHARED POOL OVERVIEW', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SHARED_POOL = 'X' )
UNION ALL
( SELECT '********************', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SHARED_POOL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SHARED_POOL = 'X' )
UNION ALL
( SELECT 'AREA', 'CURRENT_SIZE', 'MAXIMUM_SIZE' FROM BASIS_INFO WHERE DISPLAY_SHARED_POOL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SHARED_POOL = 'X' )
UNION ALL
( SELECT
    NAME,
    TO_CHAR(VALUE, 999999999990.99)  || ' MB', 
    TO_CHAR(MAX_VALUE, 9999999990.99) || ' MB'
  FROM
  ( SELECT
      SA.NAME,
      SA.BYTES / 1024 / 1024 VALUE,
      GREATEST(TO_NUMBER(SA.BYTES), NVL(SMA.BYTES, 0)) / 1024 / 1024 MAX_VALUE
    FROM
      BASIS_INFO BI,
      SHARED_POOL_AREAS SA,
      SHARED_POOL_AREAS_MAX SMA
    WHERE
      BI.DISPLAY_SHARED_POOL = 'X' AND
      SA.NAME = SMA.NAME (+)
    ORDER BY
      SA.BYTES DESC
  )
)
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SHARED_POOL = 'X' )
UNION ALL
( SELECT 'SQL AREA OVERVIEW', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SQL = 'X' )
UNION ALL
( SELECT '*****************', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SQL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SQL = 'X' )
UNION ALL
( SELECT 'SQL_ID', 'SHARABLE_MEMORY', NULL FROM BASIS_INFO WHERE DISPLAY_SQL = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SQL = 'X' )
UNION ALL
( SELECT
    NAME,
    TO_CHAR(VALUE, 999999999990.99)  || ' MB', 
    NULL
  FROM
  ( SELECT
      SQ.SQL_ID NAME,
      SQ.SHARABLE_MEM_MB VALUE,
      NULL MAX_VALUE
    FROM
      BASIS_INFO BI,
      SQL_STATEMENTS SQ
    WHERE
      BI.DISPLAY_SQL = 'X' 
    ORDER BY
      SQ.SHARABLE_MEM_MB DESC
  )
)
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_SQL = 'X' )
UNION ALL
( SELECT 'PARAMETER OVERVIEW', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_PARAMETERS = 'X' )
UNION ALL
( SELECT '******************', NULL, NULL FROM BASIS_INFO WHERE DISPLAY_PARAMETERS = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_PARAMETERS = 'X' )
UNION ALL
( SELECT 'PARAMETER_NAME', 'PARAMETER_VALUE', 'IS_DEFAULT' FROM BASIS_INFO WHERE DISPLAY_PARAMETERS = 'X' )
UNION ALL
( SELECT NULL, NULL, NULL FROM BASIS_INFO WHERE DISPLAY_PARAMETERS = 'X' )
UNION ALL
( SELECT
    NAME,
    VALUE,
    ISDEFAULT
  FROM
  ( SELECT
      P.NAME,
      P.VALUE,
      P.ISDEFAULT
    FROM
      BASIS_INFO BI,
      PARAMETERS P
    WHERE
      BI.DISPLAY_PARAMETERS = 'X'
    ORDER BY
      P.NAME
  )
)
UNION ALL
( SELECT NULL, NULL, NULL FROM BUFFER_POOL_SEGMENTS WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM BUFFER_POOLS WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM SQL_STATEMENTS WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM MEMORY_AREAS WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM MEMORY_AREAS_MAX WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM SGA_AREAS WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM SGA_AREAS_MAX WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM PARAMETERS WHERE 1 = 0 )
UNION ALL
( SELECT NULL, NULL, NULL FROM SHARED_POOL_AREAS WHERE 1 = 0 )
));


