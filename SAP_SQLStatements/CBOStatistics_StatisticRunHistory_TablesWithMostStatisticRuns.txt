SELECT NULL BEGIN_TIME, NULL END_TIME, NULL OWNER, NULL TABLE_NAME, 
  NULL PARTITION_NAME, NULL STATISTICS_IN_HISTORY FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL END_TIME, NULL OWNER, NULL TABLE_NAME, 
  NULL PARTITION_NAME, NULL STATISTICS_IN_HISTORY FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    NUM_RECORDS,
    MIN_STATISTIC_RUNS,
    AGGREGATE_BY
  FROM
  ( SELECT
      TO_DATE('01.01.1000 04:57:54', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 08:53:44', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      10 NUM_RECORDS,
      -1 MIN_STATISTIC_RUNS,
      'PARTITION' AGGREGATE_BY      /* TABLE, PARTITION */
    FROM
      DUAL
  )
)
SELECT
  TO_CHAR(BEGIN_TIME, 'dd.mm.yyyy hh24:mi') BEGIN_TIME,
  TO_CHAR(END_TIME, 'dd.mm.yyyy hh24:mi') END_TIME,
  OWNER,
  TABLE_NAME,
  PARTITION_NAME,
  TO_CHAR(STATISTICS_IN_HISTORY, 99999999999999999990) STATISTICS_IN_HISTORY
FROM
( SELECT
    MIN(TSH.STATS_UPDATE_TIME) BEGIN_TIME,
    MAX(TSH.STATS_UPDATE_TIME) END_TIME,
    TSH.OWNER,
    TSH.TABLE_NAME,
    DECODE(BI.AGGREGATE_BY, 'PARTITION', TSH.PARTITION_NAME, NULL) PARTITION_NAME,
    COUNT(*) STATISTICS_IN_HISTORY,
    BI.NUM_RECORDS,
    BI.MIN_STATISTIC_RUNS
  FROM
    BASIS_INFO BI,
    DBA_TAB_STATS_HISTORY TSH
  WHERE
    TSH.STATS_UPDATE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME
  GROUP BY
    TSH.OWNER,
    TSH.TABLE_NAME,
    DECODE(BI.AGGREGATE_BY, 'PARTITION', TSH.PARTITION_NAME, NULL),
    BI.NUM_RECORDS,
    BI.MIN_STATISTIC_RUNS
  ORDER BY
    COUNT(*) DESC,
    TSH.OWNER,
    TSH.TABLE_NAME,
    DECODE(BI.AGGREGATE_BY, 'PARTITION', TSH.PARTITION_NAME, NULL)
)
WHERE
  ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS ) AND
  ( MIN_STATISTIC_RUNS = -1 OR STATISTICS_IN_HISTORY >= MIN_STATISTIC_RUNS )
));
