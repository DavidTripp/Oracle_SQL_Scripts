SELECT NULL EVENT_NAME, NULL TOTAL_WAITS, NULL TIME_WAITED,
  NULL AVG_MS, NULL PERCENT, NULL ACT_SESS FROM DUAL WHERE 1 = 0
UNION ALL ( 
SELECT NULL EVENT_NAME, NULL TOTAL_WAITS, NULL TIME_WAITED,
  NULL AVG_MS, NULL PERCENT, NULL ACT_SESS FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM ( 
WITH BASIS_INFO AS
( SELECT 
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    RTT_MICRO,
    NUM_RECORDS,
    MIN_AVG_DIRECT_PATH_TIME_MS,
    CONSIDER_TIMEOUTS,
    EXCLUDE_SYSTEM,
    EXCLUDE_ADMINISTRATIVE,
    AGGREGATE_RAC_WAITS,
    AGGREGATE_BY_WAIT_CLASS,
    TIME_UNIT,
    DECODE(TIME_UNIT, 'MS', 1, 'S', 1000, 'M', 60000, 'H', 3600000, 'D', 86400000) TIME_FACTOR
  FROM
  ( SELECT
      -1 DBID,
      -2 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 11:55:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      400 RTT_MICRO,             /* replace with average round trip time in us */
      20 NUM_RECORDS,
      1 MIN_AVG_DIRECT_PATH_TIME_MS,
      'X' CONSIDER_TIMEOUTS,
      'X' EXCLUDE_SYSTEM,
      'X' EXCLUDE_ADMINISTRATIVE,
      'X' AGGREGATE_RAC_WAITS,
      ' ' AGGREGATE_BY_WAIT_CLASS,
      'H' TIME_UNIT                     /* MS, S, M, H, D */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    MIN_SNAP_ID,
    PREV_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    GREATEST(SUM(INTERVAL_SECONDS) OVER (PARTITION BY INSTANCE_NUMBER)) TOTAL_SECONDS,
    RESTART
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (PARTITION BY HSS2.INSTANCE_NUMBER ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS1.SNAP_ID PREV_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2
    WHERE
      HSS2.DBID = BI.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR
        HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER 
      ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
    ORDER BY
      HSS2.SNAP_ID
  )
),
TOTAL_SECONDS AS
( SELECT /*+ MATERIALIZE */
    TOTAL_SECONDS
  FROM
    SNAPSHOTS
  WHERE
    ROWNUM = 1
),
TIMED_EVENTS_PER_SNAPSHOT AS
( SELECT /*+ MATERIALIZE */
    SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    EVENT_NAME,
    TOTAL_WAITS - DECODE(CONSIDER_TIMEOUTS, 'X', TOTAL_TIMEOUTS, 0) TOTAL_WAITS,
    TOTAL_TIMEOUTS,      
    GREATEST(DECODE(SUBSTR(EVENT_NAME, 1, 6), 'direct', 
      MIN_AVG_DIRECT_PATH_TIME_MS * 1000 * TOTAL_WAITS, 0),
      TIME_WAITED_MICRO) TIME_WAITED_MICRO
  FROM
  ( SELECT
      SS.SNAP_ID,
      SS.BEGIN_INTERVAL_TIME,
      SS.END_INTERVAL_TIME,       
      SS.INTERVAL_SECONDS,
      CASE
        WHEN BI.AGGREGATE_BY_WAIT_CLASS = 'X' 
          THEN HSE2.WAIT_CLASS
        WHEN ( HSE2.WAIT_CLASS = 'Cluster' OR 
               HSE2.EVENT_NAME IN
               ( 'gcs log flush sync',
                 'gcs drm freeze in enter server mode', 
                 'ges lms sync during dynamic remastering and reconfig'
               )
             ) AND 
             BI.AGGREGATE_RAC_WAITS = 'X' 
          THEN 'RAC'
        ELSE 
          HSE2.EVENT_NAME 
      END EVENT_NAME,
      DECODE(SS.RESTART, 'NO', HSE2.TOTAL_WAITS - NVL(HSE1.TOTAL_WAITS, 0),
        HSE2.TOTAL_WAITS) TOTAL_WAITS,
      DECODE(SS.RESTART, 'NO', HSE2.TOTAL_TIMEOUTS - NVL(HSE1.TOTAL_TIMEOUTS, 0),
        HSE2.TOTAL_TIMEOUTS) TOTAL_TIMEOUTS,
      DECODE(SS.RESTART, 'NO', HSE2.TIME_WAITED_MICRO - 
        NVL(HSE1.TIME_WAITED_MICRO, 0), HSE2.TIME_WAITED_MICRO) TIME_WAITED_MICRO,
      BI.MIN_AVG_DIRECT_PATH_TIME_MS,
      BI.CONSIDER_TIMEOUTS
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_SYSTEM_EVENT HSE1, 
      DBA_HIST_SYSTEM_EVENT HSE2
    WHERE
      SS.DBID = HSE2.DBID AND
      HSE1.DBID (+) = HSE2.DBID AND
      SS.INSTANCE_NUMBER = HSE2.INSTANCE_NUMBER AND
      HSE1.INSTANCE_NUMBER (+) = HSE2.INSTANCE_NUMBER AND
      SS.SNAP_ID = HSE2.SNAP_ID AND
      SS.PREV_SNAP_ID IS NOT NULL AND
      SS.SNAP_ID != SS.MIN_SNAP_ID AND
      HSE1.SNAP_ID (+) = HSE2.SNAP_ID - 1 AND
      HSE1.EVENT_NAME (+) = HSE2.EVENT_NAME AND
      SS.PREV_SNAP_ID IS NOT NULL AND
      HSE2.WAIT_CLASS != 'Idle' AND
      ( BI.EXCLUDE_SYSTEM = ' ' OR 
        HSE2.WAIT_CLASS != 'System I/O'
      ) AND
      ( BI.EXCLUDE_ADMINISTRATIVE = ' ' OR 
        ( HSE2.WAIT_CLASS != 'Administrative' AND
          HSE2.EVENT_NAME NOT IN 
          ( 'ARCH wait on SENDREQ', 
            'LGWR-LNS wait on channel',
            'LNS wait on SENDREQ', 
            'LogMiner reader: buffer',
            'MRP wait on archivelog arrival',
            'remote db file write' 
          ) 
        )
      )
    UNION ALL
    ( SELECT 
        SS.SNAP_ID,
        SS.BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME,
        SS.INTERVAL_SECONDS,
        'CPU' EVENT_NAME,
        NULL TOTAL_WAITS,
        NULL TOTAL_TIMEOUTS,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE - NVL(HSY1.VALUE, 0) , 
          HSY2.VALUE) TIME_WAITED_MICRO,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_SYS_TIME_MODEL HSY1,  
        DBA_HIST_SYS_TIME_MODEL HSY2
      WHERE
        HSY1.DBID (+) = HSY2.DBID AND
        HSY2.DBID = SS.DBID AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        HSY2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
        HSY2.SNAP_ID = SS.SNAP_ID AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        SS.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        HSY2.STAT_NAME = 'DB CPU' 
    )
    UNION ALL
    ( SELECT 
        SS.SNAP_ID,
        SS.BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME,
        SS.INTERVAL_SECONDS,
        'Network' EVENT_NAME,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE -
          NVL(HSY1.VALUE, 0), HSY2.VALUE) TOTAL_WAITS,
        0 TOTAL_TIMEOUTS,
        BI.RTT_MICRO * DECODE(SS.RESTART, 'NO', HSY2.VALUE - NVL(HSY1.VALUE, 0), 
          HSY2.VALUE) TIME_WAITED_MICRO,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_SYSSTAT HSY1, 
        DBA_HIST_SYSSTAT HSY2
      WHERE
        SS.DBID = HSY2.DBID AND
        HSY1.DBID (+) = HSY2.DBID AND
        SS.INSTANCE_NUMBER = HSY2.INSTANCE_NUMBER AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        SS.SNAP_ID = HSY2.SNAP_ID AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        SS.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        HSY2.STAT_NAME = 'user calls'                 
    )
  )
)
SELECT
  RPAD('BEGIN:', 10, ' ') || TO_CHAR(MIN(BEGIN_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss')  EVENT_NAME,
  NULL TOTAL_WAITS,
  NULL TIME_WAITED,
  NULL AVG_MS,
  NULL PERCENT,
  NULL ACTIVE_SESSIONS
FROM 
  SNAPSHOTS
WHERE
  SNAP_ID != MIN_SNAP_ID
UNION ALL
( SELECT 
    RPAD('END:', 10, ' ') || TO_CHAR(MAX(END_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss') EVENT_NAME,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED,
    NULL AVG_MS,
    NULL PERCENT,
    NULL ACTIVE_SESSIONS
  FROM 
    SNAPSHOTS
)
UNION ALL
( SELECT 
    'INSTANCE: ' || DECODE(INSTANCE_NUMBER, -2, 'ALL', TO_CHAR(INSTANCE_NUMBER)) EVENT_NAME,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED,
    NULL AVG_MS,
    NULL PERCENT,
    NULL ACTIVE_SESSIONS
  FROM 
    BASIS_INFO
)
UNION ALL
( SELECT 
    NULL EVENT_NAME,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED,
    NULL AVG_MS,
    NULL PERCENT,
    NULL ACTIVE_SESSIONS
  FROM 
    DUAL
)
UNION ALL
( SELECT 
    EVENT_NAME,
    TOTAL_WAITS,
    TIME_WAITED,
    AVG_MS,
    PERCENT,
    ACTIVE_SESSIONS
  FROM
  ( SELECT
      EVENT_NAME,
      TO_CHAR(TOTAL_WAITS, 999999999990) TOTAL_WAITS,
      LPAD(TO_CHAR(ROUND(TIME_WAITED_MS / TIME_FACTOR)) || ' ' || LOWER(TIME_UNIT), 17) TIME_WAITED,
      TO_CHAR(AVG_WAIT_MS, 9999990.99) AVG_MS,
      TO_CHAR(RATIO_TO_REPORT(TIME_WAITED_MS) OVER () * 100, 990.99) PERCENT,
      TO_CHAR(ACTIVE_SESSIONS, 999990.99) ACTIVE_SESSIONS,
      NUM_RECORDS
    FROM
    ( SELECT
        MIN(BEGIN_INTERVAL_TIME) BEGIN_INTERVAL_TIME,
        MAX(END_INTERVAL_TIME) END_INTERVAL_TIME,
        EVENT_NAME,
        SUM(TOTAL_WAITS) TOTAL_WAITS,
        SUM(TIME_WAITED_MICRO) / 1000 TIME_WAITED_MS,
        DECODE(SUM(TOTAL_WAITS), 0, 0, SUM(TIME_WAITED_MICRO) / SUM(TOTAL_WAITS) /
          1000) AVG_WAIT_MS,
        DECODE(TS.TOTAL_SECONDS, 0, 0, SUM(TIME_WAITED_MICRO) / 
          1000000 / TS.TOTAL_SECONDS) ACTIVE_SESSIONS,
        BI.NUM_RECORDS,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.TIME_UNIT,
        BI.TIME_FACTOR
      FROM
        BASIS_INFO BI,
        TOTAL_SECONDS TS,
        TIMED_EVENTS_PER_SNAPSHOT E
      GROUP BY
        E.EVENT_NAME,
        BI.NUM_RECORDS,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS,
        BI.TIME_UNIT,
        BI.TIME_FACTOR,
        TS.TOTAL_SECONDS
    )
    ORDER BY 
      TIME_WAITED_MS DESC
  )
  WHERE (NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS)
)
));

