SELECT NULL BEGIN_TIME, NULL PLAN_HASH, NULL INST, NULL ELAPSED_MS, NULL "CPU_%", NULL "IO_%",
  NULL "APP_%", NULL "CON_%", NULL "CLU_%", NULL "JVA_%", NULL "PLS_%", NULL "OTH_%"
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL PLAN_HASH, NULL INST, NULL ELAPSED_MS, NULL "CPU_%", NULL "IO_%",
  NULL "APP_%", NULL "CON_%", NULL "CLU_%", NULL "JVA_%", NULL "PLS_%", NULL "OTH_%"
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    SQL_ID
  FROM
  ( SELECT
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 22:00:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 09:00:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      '96n8u6c015gr3' SQL_ID
    FROM
      DUAL
  )
),
SNAPSHOTS AS
( SELECT 
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    ( BI.INSTANCE_NUMBER = -2 OR
      HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
    HSS.END_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.BEGIN_INTERVAL_TIME <= BI.END_TIME
  GROUP BY
    HSS.INSTANCE_NUMBER
)
SELECT
  'SQL_ID: ' || SQL_ID BEGIN_TIME,
  NULL PLAN_HASH,
  NULL INST,
  NULL ELAPSED_MS, 
  NULL "CPU_%", 
  NULL "IO_%",
  NULL "APP_%", 
  NULL "CON_%", 
  NULL "CLU_%", 
  NULL "JVA_%",
  NULL "PLS_%",
  NULL "OTH_%"
FROM
  BASIS_INFO
UNION ALL
( SELECT
    NULL BEGIN_TIME,
    NULL PLAN_HASH,
    NULL INST,
    NULL ELAPSED_MS, 
    NULL "CPU_%", 
    NULL "IO_%",
    NULL "APP_%", 
    NULL "CON_%", 
    NULL "CLU_%", 
    NULL "JVA_%",
    NULL "PLS_%",
    NULL "OTH_%"
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    'V$SQL' BEGIN_TIME,
    TO_CHAR(PLAN_HASH_VALUE, 9999999990) PLAN_HASH,
    TO_CHAR(S.INST_ID, 990) INST,
    TO_CHAR(ELAPSED_TIME / 1000, 9999999990) ELAPSED_MS,
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CPU_TIME / ELAPSED_TIME * 100), 9990) "CPU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, USER_IO_WAIT_TIME / ELAPSED_TIME * 100), 9990) "IO_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, APPLICATION_WAIT_TIME / ELAPSED_TIME * 100), 9990) "APP_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CON_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CLUSTER_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CLU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, JAVA_EXEC_TIME / ELAPSED_TIME * 100), 9990) "JVA_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, PLSQL_EXEC_TIME / ELAPSED_TIME * 100), 9990) "PLS_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, GREATEST(0, ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME - 
      APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME - CLUSTER_WAIT_TIME - JAVA_EXEC_TIME - 
      PLSQL_EXEC_TIME) / ELAPSED_TIME * 100), 9990) "OTH_%"
  FROM
    BASIS_INFO BI,
    GV$SQL S
  WHERE
    S.SQL_ID = BI.SQL_ID AND
    ( BI.INSTANCE_NUMBER = -2 OR
      S.INST_ID = BI.INSTANCE_NUMBER )
)
UNION ALL
( SELECT
    'V$SQLSTATS' BEGIN_TIME,
    TO_CHAR(PLAN_HASH_VALUE, 9999999990) PLAN_HASH,
    TO_CHAR(SS.INST_ID, 990) INST,
    TO_CHAR(ELAPSED_TIME / 1000, 9999999990) ELAPSED_MS,
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CPU_TIME / ELAPSED_TIME * 100), 9990) "CPU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, USER_IO_WAIT_TIME / ELAPSED_TIME * 100), 9990) "IO_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, APPLICATION_WAIT_TIME / ELAPSED_TIME * 100), 9990) "APP_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CON_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CLUSTER_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CLU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, JAVA_EXEC_TIME / ELAPSED_TIME * 100), 9990) "JVA_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, PLSQL_EXEC_TIME / ELAPSED_TIME * 100), 9990) "PLS_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, GREATEST(0, ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME - 
      APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME - CLUSTER_WAIT_TIME - JAVA_EXEC_TIME - 
      PLSQL_EXEC_TIME) / ELAPSED_TIME * 100), 9990) "OTH_%"
  FROM
    BASIS_INFO BI,
    GV$SQLSTATS SS
  WHERE
    SS.SQL_ID = BI.SQL_ID AND
    ( BI.INSTANCE_NUMBER = -2 OR
      SS.INST_ID = BI.INSTANCE_NUMBER )
)
UNION ALL
( SELECT
    'TOTAL (HISTORY)' BEGIN_TIME,
    TO_CHAR(PLAN_HASH_VALUE, 9999999990) PLAN_HASH,
    TO_CHAR(INST_ID, 990) INST,
    TO_CHAR(ELAPSED_TIME / 1000, 99999999990) ELAPSED_MS,
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CPU_TIME / ELAPSED_TIME * 100), 9990) "CPU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, USER_IO_WAIT_TIME / ELAPSED_TIME * 100), 9990) "IO_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, APPLICATION_WAIT_TIME / ELAPSED_TIME * 100), 9990) "APP_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CON_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CLUSTER_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CLU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, JAVA_EXEC_TIME / ELAPSED_TIME * 100), 9990) "JVA_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, PLSQL_EXEC_TIME / ELAPSED_TIME * 100), 9990) "PLS_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, GREATEST(0, ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME - 
      APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME - CLUSTER_WAIT_TIME - JAVA_EXEC_TIME - 
      PLSQL_EXEC_TIME) / ELAPSED_TIME * 100), 9990) "OTH_%"
  FROM
  ( SELECT
      HSQ.PLAN_HASH_VALUE,
      HSQ.INSTANCE_NUMBER INST_ID,
      SUM(HSQ.ELAPSED_TIME_DELTA) ELAPSED_TIME,
      SUM(HSQ.CPU_TIME_DELTA) CPU_TIME,
      SUM(HSQ.IOWAIT_DELTA) USER_IO_WAIT_TIME,
      SUM(HSQ.APWAIT_DELTA) APPLICATION_WAIT_TIME,
      SUM(HSQ.CCWAIT_DELTA) CONCURRENCY_WAIT_TIME,
      SUM(HSQ.CLWAIT_DELTA) CLUSTER_WAIT_TIME,
      SUM(HSQ.JAVEXEC_TIME_DELTA) JAVA_EXEC_TIME,
      SUM(HSQ.PLSEXEC_TIME_DELTA) PLSQL_EXEC_TIME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ, 
      SNAPSHOTS SS
    WHERE
      SS.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      HSQ.SQL_ID = BI.SQL_ID AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID 
    GROUP BY
      HSQ.INSTANCE_NUMBER,
      HSQ.PLAN_HASH_VALUE
    ORDER BY
      HSQ.INSTANCE_NUMBER,
      HSQ.PLAN_HASH_VALUE
  )
)
UNION ALL
( SELECT
    TO_CHAR(BEGIN_INTERVAL_TIME, 'YYYY-MM-DD HH24:MI:SS') BEGIN_TIME,
    TO_CHAR(PLAN_HASH_VALUE, 9999999990) PLAN_HASH,
    TO_CHAR(INST_ID, 990) INST,
    TO_CHAR(ELAPSED_TIME / 1000, 99999999990) ELAPSED_MS,
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CPU_TIME / ELAPSED_TIME * 100), 9990) "CPU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, USER_IO_WAIT_TIME / ELAPSED_TIME * 100), 9990) "IO_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, APPLICATION_WAIT_TIME / ELAPSED_TIME * 100), 9990) "APP_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CON_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, CLUSTER_WAIT_TIME / ELAPSED_TIME * 100), 9990) "CLU_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, JAVA_EXEC_TIME / ELAPSED_TIME * 100), 9990) "JVA_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, PLSQL_EXEC_TIME / ELAPSED_TIME * 100), 9990) "PLS_%",
    TO_CHAR(DECODE(ELAPSED_TIME, 0, 0, GREATEST(0, ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME - 
      APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME - CLUSTER_WAIT_TIME - JAVA_EXEC_TIME - 
      PLSQL_EXEC_TIME) / ELAPSED_TIME * 100), 9990) "OTH_%"
  FROM
  ( SELECT
      HSS.BEGIN_INTERVAL_TIME,
      HSQ.PLAN_HASH_VALUE,
      HSQ.INSTANCE_NUMBER INST_ID,
      HSQ.ELAPSED_TIME_DELTA ELAPSED_TIME,
      HSQ.CPU_TIME_DELTA CPU_TIME,
      HSQ.IOWAIT_DELTA USER_IO_WAIT_TIME,
      HSQ.APWAIT_DELTA APPLICATION_WAIT_TIME,
      HSQ.CCWAIT_DELTA CONCURRENCY_WAIT_TIME,
      HSQ.CLWAIT_DELTA CLUSTER_WAIT_TIME,
      HSQ.JAVEXEC_TIME_DELTA JAVA_EXEC_TIME,
      HSQ.PLSEXEC_TIME_DELTA PLSQL_EXEC_TIME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ,
      DBA_HIST_SNAPSHOT HSS,
      SNAPSHOTS SS
    WHERE
      SS.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      HSQ.SQL_ID = BI.SQL_ID AND
      HSQ.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSQ.SNAP_ID = HSS.SNAP_ID AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID 
    ORDER BY
      HSQ.SNAP_ID DESC,
      HSQ.INSTANCE_NUMBER,
      HSQ.PLAN_HASH_VALUE
  )
)
));

