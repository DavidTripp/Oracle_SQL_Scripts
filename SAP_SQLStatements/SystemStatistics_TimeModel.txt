SELECT /*+ OPT_PARAM('_OPTIMIZER_DISTINCT_AGG_TRANSFORM', 'FALSE') */
  NULL BEGIN_TIME, NULL SECONDS, NULL ACT_SESS, NULL BG_SESS, NULL CPUS_USED, NULL BG_CPUS_USED,
  NULL SQL_SESS, NULL PL_SQL_SESS, NULL PARSE_SESS FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT 
  NULL BEGIN_TIME, NULL SECONDS, NULL ACT_SESS, NULL BG_SESS, NULL CPUS_USED, NULL BG_CPUS_USED,
  NULL SQL_SESS, NULL PL_SQL_SESS, NULL PARSE_SESS FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    DECODE(AGGREGATE_BY,
      'SNAPSHOT',    'YYYY-MM-DD HH24:MI:SS',
      'DAY',         'YYYY-MM-DD (DY)',
      'HOUR_OF_DAY', 'HH24',
      AGGREGATE_BY ) AGGREGATE_BY,
    SORT_ORDER,
    EXCLUDE_WEEKENDS
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 12:57:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 00:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      'HOUR_OF_DAY' AGGREGATE_BY,  /* SNAPSHOT, DAY, HOUR_OF_DAY or Oracle time pattern */
      'DESC' SORT_ORDER,     /* ASC, DESC */
      ' ' EXCLUDE_WEEKENDS
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    PREV_SNAP_ID,
    MIN_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    SUM(INTERVAL_SECONDS) OVER () TOTAL_SECONDS,
    RESTART
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      HSS1.SNAP_ID PREV_SNAP_ID,
      MIN(HSS2.SNAP_ID) OVER (PARTITION BY HSS2.INSTANCE_NUMBER) MIN_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2
    WHERE
      HSS2.DBID = BI.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR 
        HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
    ORDER BY
      HSS2.SNAP_ID
  )
),
KEYFIG_PER_INTERVAL AS
( SELECT
    SNAP_ID,
    MIN(BEGIN_INTERVAL_TIME) OVER (PARTITION BY SNAP_ID) BEGIN_INTERVAL_TIME,
    PREV_SNAP_ID,
    INSTANCE_NUMBER,
    SECONDS,
    DB_TIME_US,
    CPU_TIME_US,
    SQL_EXEC_TIME_US,
    PL_SQL_TIME_US,
    PARSE_TIME_US,
    BG_DB_TIME_US,
    BG_CPU_TIME_US
  FROM
  ( SELECT
      SS.INSTANCE_NUMBER,
      SS.SNAP_ID,
      SS.BEGIN_INTERVAL_TIME,
      SS.INTERVAL_SECONDS SECONDS,
      DECODE(SS.RESTART, 'YES', HST1.VALUE, HST1.VALUE - 
        LAG(HST1.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) DB_TIME_US,
      DECODE(SS.RESTART, 'YES', HST2.VALUE, HST2.VALUE - 
        LAG(HST2.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) CPU_TIME_US,
      DECODE(SS.RESTART, 'YES', HST3.VALUE, HST3.VALUE - 
        LAG(HST3.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) SQL_EXEC_TIME_US,
      DECODE(SS.RESTART, 'YES', HST4.VALUE, HST4.VALUE - 
        LAG(HST4.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) PL_SQL_TIME_US,
      DECODE(SS.RESTART, 'YES', HST5.VALUE, HST5.VALUE - 
        LAG(HST5.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) PARSE_TIME_US,
      DECODE(SS.RESTART, 'YES', HST6.VALUE, HST6.VALUE - 
        LAG(HST6.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) BG_DB_TIME_US,
      DECODE(SS.RESTART, 'YES', HST7.VALUE, HST7.VALUE - 
        LAG(HST7.VALUE, 1) OVER (PARTITION BY SS.INSTANCE_NUMBER ORDER BY SS.SNAP_ID)) BG_CPU_TIME_US,
      SS.PREV_SNAP_ID,
      SS.MIN_SNAP_ID
    FROM
      SNAPSHOTS SS,
      DBA_HIST_SYS_TIME_MODEL HST1, 
      DBA_HIST_SYS_TIME_MODEL HST2, 
      DBA_HIST_SYS_TIME_MODEL HST3,
      DBA_HIST_SYS_TIME_MODEL HST4,
      DBA_HIST_SYS_TIME_MODEL HST5,
      DBA_HIST_SYS_TIME_MODEL HST6,
      DBA_HIST_SYS_TIME_MODEL HST7
    WHERE
      HST1.DBID = SS.DBID AND
      HST2.DBID = SS.DBID AND
      HST3.DBID = SS.DBID AND
      HST4.DBID = SS.DBID AND
      HST5.DBID = SS.DBID AND
      HST6.DBID = SS.DBID AND
      HST7.DBID = SS.DBID AND
      HST1.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST3.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST4.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST5.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST6.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST7.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HST1.SNAP_ID = SS.SNAP_ID AND
      HST2.SNAP_ID = SS.SNAP_ID AND
      HST3.SNAP_ID = SS.SNAP_ID AND
      HST4.SNAP_ID = SS.SNAP_ID AND
      HST5.SNAP_ID = SS.SNAP_ID AND
      HST6.SNAP_ID = SS.SNAP_ID AND
      HST7.SNAP_ID = SS.SNAP_ID AND
      HST1.STAT_NAME = 'DB time' AND
      HST2.STAT_NAME = 'DB CPU' AND
      HST3.STAT_NAME = 'sql execute elapsed time' AND
      HST4.STAT_NAME = 'PL/SQL execution elapsed time' AND
      HST5.STAT_NAME = 'parse time elapsed' AND
      HST6.STAT_NAME = 'background elapsed time' AND
      HST7.STAT_NAME = 'background cpu time' 
  )
  WHERE
    SNAP_ID != MIN_SNAP_ID
)
SELECT 
  'BEGIN TIME:' BEGIN_INTERVAL_TIME, 
  TO_CHAR(MIN(END_INTERVAL_TIME), 'dd.mm.yyyy') SECONDS, 
  TO_CHAR(MIN(END_INTERVAL_TIME), 'hh24:mi:ss') ACT_SESS, 
  NULL BG_ACT_SESS,
  NULL CPUS_USED, 
  NULL BG_CPUS_USED, 
  NULL SQL_SESS, 
  NULL PL_SQL_SESS, 
  NULL PARSE_SESS
FROM
  SNAPSHOTS
UNION ALL
( SELECT 
    'END TIME:' BEGIN_INTERVAL_TIME, 
    TO_CHAR(MAX(END_INTERVAL_TIME), 'dd.mm.yyyy') SECONDS, 
    TO_CHAR(MAX(END_INTERVAL_TIME), 'hh24:mi:ss') ACT_SESS, 
    NULL, NULL, NULL, NULL, NULL, NULL
  FROM 
    SNAPSHOTS
)
UNION ALL
( SELECT 
    'INSTANCE:' BEGIN_INTERVAL_TIME, 
    DECODE(INSTANCE_NUMBER, -2, 'ALL', TO_CHAR(INSTANCE_NUMBER)) SECONDS, 
    NULL ACT_SESS, 
    NULL, NULL, NULL, NULL, NULL, NULL
  FROM 
    BASIS_INFO
)
UNION ALL
( SELECT 
    'WEEKENDS EXCLUDED:' BEGIN_INTERVAL_TIME, 
    DECODE(EXCLUDE_WEEKENDS, 'X', 'YES', 'NO') SECONDS, 
    NULL ACT_SESS, 
    NULL, NULL, NULL, NULL, NULL, NULL
  FROM 
    BASIS_INFO
)
UNION ALL
( SELECT 
    NULL BEGIN_INTERVAL_TIME, 
    NULL SECONDS, 
    NULL ACT_SESS, 
    NULL, NULL, NULL, NULL, NULL, NULL
  FROM 
    DUAL
)
UNION ALL
( SELECT 
    * 
  FROM
  ( SELECT
      BEGIN_TIME,
      TO_CHAR(SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER)), 9999999990) SECONDS, 
      TO_CHAR(SUM(DB_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 999990.99) ACT_SESS,
      TO_CHAR(SUM(BG_DB_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 990.99) BG_SESS,
      TO_CHAR(SUM(CPU_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 99990.99) CPUS_USED,
      TO_CHAR(SUM(BG_CPU_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 99999990.99) BG_CPUS_USED,
      TO_CHAR(SUM(SQL_EXEC_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 9990.99) SQL_SESS,
      TO_CHAR(SUM(PL_SQL_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 9999990.99) PL_SQL_SESS,
      TO_CHAR(SUM(PARSE_TIME_US) / 1000000 / (SUM(SECONDS) / COUNT(DISTINCT(INSTANCE_NUMBER))), 999990.99) PARSE_SESS
    FROM
    ( SELECT
        TO_CHAR(BEGIN_INTERVAL_TIME, AGGREGATE_BY) BEGIN_TIME,
        K.*,
        BI.SORT_ORDER,
        BI.AGGREGATE_BY
      FROM
        BASIS_INFO BI,
        KEYFIG_PER_INTERVAL K
      WHERE
        K.PREV_SNAP_ID IS NOT NULL AND
        ( BI.EXCLUDE_WEEKENDS = ' ' OR 
          TO_CHAR(K.BEGIN_INTERVAL_TIME, 'D') NOT IN (7, 1) )
    )
    GROUP BY
      BEGIN_TIME,
      SORT_ORDER,
      AGGREGATE_BY
    ORDER BY
      DECODE(SORT_ORDER, 
        'ASC', MIN(BEGIN_TIME), SYSDATE),
      DECODE(SORT_ORDER, 
        'DESC', MIN(BEGIN_TIME), SYSDATE) DESC
  )
)
));
