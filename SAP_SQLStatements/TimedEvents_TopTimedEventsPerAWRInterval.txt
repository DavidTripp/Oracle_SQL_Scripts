SELECT NULL BEGIN_TIME, NULL INST, NULL ACT_SESS, 
  NULL EVENT_1, NULL SESS_1, NULL "%_1", NULL AVG_MS_1, NULL WAITS_1,
  NULL EVENT_2, NULL SESS_2, NULL "%_2", NULL AVG_MS_2, NULL WAITS_2,
  NULL EVENT_3, NULL SESS_3, NULL "%_3", NULL AVG_MS_3, NULL WAITS_3,
  NULL EVENT_4, NULL SESS_4, NULL "%_4", NULL AVG_MS_4, NULL WAITS_4,
  NULL EVENT_5, NULL SESS_5, NULL "%_5", NULL AVG_MS_5, NULL WAITS_5
FROM DUAL WHERE 1 = 0
UNION ALL ( 
SELECT NULL BEGIN_TIME, NULL INST, NULL ACT_SESS, 
  NULL EVENT_1, NULL SESS_1, NULL "%_1", NULL AVG_MS_1, NULL WAITS_1,
  NULL EVENT_2, NULL SESS_2, NULL "%_2", NULL AVG_MS_2, NULL WAITS_2,
  NULL EVENT_3, NULL SESS_3, NULL "%_3", NULL AVG_MS_3, NULL WAITS_3,
  NULL EVENT_4, NULL SESS_4, NULL "%_4", NULL AVG_MS_4, NULL WAITS_4,
  NULL EVENT_5, NULL SESS_5, NULL "%_5", NULL AVG_MS_5, NULL WAITS_5
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    RTT_MICRO,
    MIN_AVG_DIRECT_PATH_TIME_MS,
    DECODE(AGGREGATE_BY,
      'SNAPSHOT',    'YYYY-MM-DD HH24:MI:SS',
      'DAY',         'YYYY-MM-DD (DY)',
      'HOUR_OF_DAY', 'HH24',
      AGGREGATE_BY ) AGGREGATE_BY,
    CONSIDER_TIMEOUTS,
    EXCLUDE_WEEKENDS,
    EXCLUDE_SYSTEM,
    AGGREGATE_RAC_WAITS,
    AGGREGATE_BY_WAIT_CLASS,
    EXCLUDE_ADMINISTRATIVE,
    MIN_TIME_WAITED_S
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,          /* -1: current instance, -2: all instances aggregated, -3: all instances individually */
      TO_DATE('01.01.1900 09:07:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:00:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      400 RTT_MICRO,
      'DAY' AGGREGATE_BY,    /* SNAPSHOT, DAY, HOUR_OF_DAY or Oracle time pattern */
      1 MIN_AVG_DIRECT_PATH_TIME_MS,
      'X' CONSIDER_TIMEOUTS,
      ' ' EXCLUDE_WEEKENDS,
      'X' EXCLUDE_SYSTEM,
      'X' EXCLUDE_ADMINISTRATIVE,
      'X' AGGREGATE_RAC_WAITS,
      ' ' AGGREGATE_BY_WAIT_CLASS,
      600 MIN_TIME_WAITED_S
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    PREV_SNAP_ID,
    MIN_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    RESTART
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      HSS1.SNAP_ID PREV_SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2
    WHERE
      HSS2.DBID = BI.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR 
        BI.INSTANCE_NUMBER = -3 OR
        HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER
      ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
    ORDER BY
      HSS2.SNAP_ID
  )
),
TIMED_EVENTS_PER_SNAPSHOT AS
( SELECT /*+ MATERIALIZE */
    SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INSTANCE_NUMBER,
    INTERVAL_SECONDS,
    EVENT_NAME,
    TOTAL_WAITS - DECODE(CONSIDER_TIMEOUTS, 'X', TOTAL_TIMEOUTS, 0) TOTAL_WAITS,
    TOTAL_TIMEOUTS,      
    GREATEST(DECODE(SUBSTR(EVENT_NAME, 1, 6), 'direct', 
      MIN_AVG_DIRECT_PATH_TIME_MS * 1000 * TOTAL_WAITS, 0),
      TIME_WAITED_MICRO) TIME_WAITED_MICRO
  FROM
  ( SELECT
      SS.SNAP_ID,
      SS.BEGIN_INTERVAL_TIME,
      SS.END_INTERVAL_TIME,       
      SS.INSTANCE_NUMBER,
      SS.INTERVAL_SECONDS,
      CASE
        WHEN BI.AGGREGATE_BY_WAIT_CLASS = 'X' 
          THEN HSE2.WAIT_CLASS
        WHEN ( HSE2.WAIT_CLASS = 'Cluster' OR 
               HSE2.EVENT_NAME IN
               ( 'gcs log flush sync',
                 'gcs drm freeze in enter server mode', 
                 'ges lms sync during dynamic remastering and reconfig'
               )
             ) AND 
             BI.AGGREGATE_RAC_WAITS = 'X' 
          THEN 'RAC'
        ELSE 
          HSE2.EVENT_NAME 
      END EVENT_NAME,
      DECODE(SS.RESTART, 'NO', HSE2.TOTAL_WAITS - NVL(HSE1.TOTAL_WAITS, 0),
        HSE2.TOTAL_WAITS) TOTAL_WAITS,
      DECODE(SS.RESTART, 'NO', HSE2.TOTAL_TIMEOUTS - NVL(HSE1.TOTAL_TIMEOUTS, 0),
        HSE2.TOTAL_TIMEOUTS) TOTAL_TIMEOUTS,
      DECODE(SS.RESTART, 'NO', HSE2.TIME_WAITED_MICRO - 
        NVL(HSE1.TIME_WAITED_MICRO, 0), HSE2.TIME_WAITED_MICRO) TIME_WAITED_MICRO,
      BI.MIN_AVG_DIRECT_PATH_TIME_MS,
      BI.CONSIDER_TIMEOUTS
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_SYSTEM_EVENT HSE1, 
      DBA_HIST_SYSTEM_EVENT HSE2
    WHERE
      SS.DBID = HSE2.DBID AND
      HSE1.DBID (+) = HSE2.DBID AND
      SS.INSTANCE_NUMBER = HSE2.INSTANCE_NUMBER AND
      HSE1.INSTANCE_NUMBER (+) = HSE2.INSTANCE_NUMBER AND
      SS.SNAP_ID = HSE2.SNAP_ID AND
      SS.PREV_SNAP_ID IS NOT NULL AND
      SS.SNAP_ID != SS.MIN_SNAP_ID AND
      HSE1.SNAP_ID (+) = HSE2.SNAP_ID - 1 AND
      HSE1.EVENT_NAME (+) = HSE2.EVENT_NAME AND
      SS.PREV_SNAP_ID IS NOT NULL AND
      HSE2.WAIT_CLASS != 'Idle' AND
      HSE2.TIME_WAITED_MICRO >= 1000000 * BI.MIN_TIME_WAITED_S AND
      ( BI.EXCLUDE_SYSTEM = ' ' OR 
        HSE2.WAIT_CLASS != 'System I/O'
      ) AND
      ( BI.EXCLUDE_ADMINISTRATIVE = ' ' OR 
        ( HSE2.WAIT_CLASS != 'Administrative' AND
          HSE2.EVENT_NAME NOT IN 
          ( 'ARCH wait on SENDREQ', 
            'LGWR-LNS wait on channel',
            'LNS wait on SENDREQ',
            'LogMiner reader: buffer', 
            'MRP wait on archivelog arrival',
            'remote db file write' 
          ) 
        )
      )
    UNION ALL
    ( SELECT 
        SS.SNAP_ID,
        SS.BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME,
        SS.INSTANCE_NUMBER,
        SS.INTERVAL_SECONDS,
        'CPU' EVENT_NAME,
        NULL TOTAL_WAITS,
        NULL TOTAL_TIMEOUTS,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE - NVL(HSY1.VALUE, 0) , 
          HSY2.VALUE) TIME_WAITED_MICRO,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_SYS_TIME_MODEL HSY1,  
        DBA_HIST_SYS_TIME_MODEL HSY2
      WHERE
        HSY1.DBID (+) = HSY2.DBID AND
        HSY2.DBID = SS.DBID AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        HSY2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
        HSY2.SNAP_ID = SS.SNAP_ID AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        SS.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        HSY2.STAT_NAME = 'DB CPU' 
    )
    UNION ALL
    ( SELECT 
        SS.SNAP_ID,
        SS.BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME,
        SS.INSTANCE_NUMBER,
        SS.INTERVAL_SECONDS,
        'NETWORK' EVENT_NAME,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE -
          NVL(HSY1.VALUE, 0), HSY2.VALUE) TOTAL_WAITS,
        0 TOTAL_TIMEOUTS,
          BI.RTT_MICRO * DECODE(SS.RESTART, 'NO', HSY2.VALUE - NVL(HSY1.VALUE, 0), 
          HSY2.VALUE) TIME_WAITED_MICRO,
        BI.MIN_AVG_DIRECT_PATH_TIME_MS,
        BI.CONSIDER_TIMEOUTS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_SYSSTAT HSY1, 
        DBA_HIST_SYSSTAT HSY2
      WHERE
        SS.DBID = HSY2.DBID AND
        HSY1.DBID (+) = HSY2.DBID AND
        SS.INSTANCE_NUMBER = HSY2.INSTANCE_NUMBER AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        SS.SNAP_ID = HSY2.SNAP_ID AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        SS.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        SS.PREV_SNAP_ID IS NOT NULL AND
        HSY2.STAT_NAME = 'user calls'                 
    )
  )
)
SELECT
  'BEGIN TIME: ' || TO_CHAR(MIN(BEGIN_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
  NULL INST,
  NULL ACT_SESS,
  NULL EVENT_1,
  NULL SESS_1,
  NULL "%_1",
  NULL AVG_MS_1,
  NULL WAITS_1,
  NULL EVENT_2,
  NULL SESS_2,
  NULL "%_2",
  NULL AVG_MS_2,
  NULL WAITS_2,
  NULL EVENT_3,
  NULL SESS_3,
  NULL "%_3",
  NULL AVG_MS_3,
  NULL WAITS_3,
  NULL EVENT_4,
  NULL SESS_4,
  NULL "%_4",
  NULL AVG_MS_4,
  NULL WAITS_4,
  NULL EVENT_5,
  NULL SESS_5,
  NULL "%_5",
  NULL AVG_MS_5,
  NULL WAITS_5
FROM 
  SNAPSHOTS
WHERE
  SNAP_ID != MIN_SNAP_ID
UNION ALL
( SELECT
    'END TIME:   ' || TO_CHAR(MAX(END_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    NULL INST,
    NULL ACT_SESS,
    NULL EVENT_1,
    NULL SESS_1,
    NULL "%_1",
    NULL AVG_MS_1,
    NULL WAITS_1,
    NULL EVENT_2,
    NULL SESS_2,
    NULL "%_2",
    NULL AVG_MS_2,
    NULL WAITS_2,
    NULL EVENT_3,
    NULL SESS_3,
    NULL "%_3",
    NULL AVG_MS_3,
    NULL WAITS_3,
    NULL EVENT_4,
    NULL SESS_4,
    NULL "%_4",
    NULL AVG_MS_4,
    NULL WAITS_4,
    NULL EVENT_5,
    NULL SESS_5,
    NULL "%_5",
    NULL AVG_MS_5,
    NULL WAITS_5  
  FROM
    SNAPSHOTS
)
UNION ALL
( SELECT
    'AGGREGATED BY: ' || AGGREGATE_BY  BEGIN_TIME,
    NULL INST,
    NULL ACT_SESS,
    NULL EVENT_1,
    NULL SESS_1,
    NULL "%_1",
    NULL AVG_MS_1,
    NULL WAITS_1,
    NULL EVENT_2,
    NULL SESS_2,
    NULL "%_2",
    NULL AVG_MS_2,
    NULL WAITS_2,
    NULL EVENT_3,
    NULL SESS_3,
    NULL "%_3",
    NULL AVG_MS_3,
    NULL WAITS_3,
    NULL EVENT_4,
    NULL SESS_4,
    NULL "%_4",
    NULL AVG_MS_4,
    NULL WAITS_4,
    NULL EVENT_5,
    NULL SESS_5,
    NULL "%_5",
    NULL AVG_MS_5,
    NULL WAITS_5  
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    'WEEKENDS EXCLUDED: ' || DECODE(EXCLUDE_WEEKENDS, 'X', 'YES', 'NO') BEGIN_TIME,
    NULL INST,
    NULL ACT_SESS,
    NULL EVENT_1,
    NULL SESS_1,
    NULL "%_1",
    NULL AVG_MS_1,
    NULL WAITS_1,
    NULL EVENT_2,
    NULL SESS_2,
    NULL "%_2",
    NULL AVG_MS_2,
    NULL WAITS_2,
    NULL EVENT_3,
    NULL SESS_3,
    NULL "%_3",
    NULL AVG_MS_3,
    NULL WAITS_3,
    NULL EVENT_4,
    NULL SESS_4,
    NULL "%_4",
    NULL AVG_MS_4,
    NULL WAITS_4,
    NULL EVENT_5,
    NULL SESS_5,
    NULL "%_5",
    NULL AVG_MS_5,
    NULL WAITS_5  
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    NULL BEGIN_TIME,
    NULL INST,
    NULL ACT_SESS,
    NULL EVENT_1,
    NULL SESS_1,
    NULL "%_1",
    NULL AVG_MS_1,
    NULL WAITS_1,
    NULL EVENT_2,
    NULL SESS_2,
    NULL "%_2",
    NULL AVG_MS_2,
    NULL WAITS_2,
    NULL EVENT_3,
    NULL SESS_3,
    NULL "%_3",
    NULL AVG_MS_3,
    NULL WAITS_3,
    NULL EVENT_4,
    NULL SESS_4,
    NULL "%_4",
    NULL AVG_MS_4,
    NULL WAITS_4,
    NULL EVENT_5,
    NULL SESS_5,
    NULL "%_5",
    NULL AVG_MS_5,
    NULL WAITS_5  
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    BEGIN_TIME,
    INST,
    ACT_SESS,
    EVENT_1,
    SESS_1,
    "%_1",
    AVG_MS_1,
    WAITS_1,
    EVENT_2,
    SESS_2,
    "%_2",
    AVG_MS_2,
    WAITS_2,
    EVENT_3,
    SESS_3,
    "%_3",
    AVG_MS_3,
    WAITS_3,
    EVENT_4,
    SESS_4,
    "%_4",
    AVG_MS_4,
    WAITS_4,
    EVENT_5,
    SESS_5,
    "%_5",
    AVG_MS_5,
    WAITS_5
  FROM
  ( SELECT 
      BEGIN_TIME,
      DECODE(INSTANCE_NUMBER, 0, 'any', TO_CHAR(INSTANCE_NUMBER, 990)) INST,
      TO_CHAR(ACT_SESS, 9990.99) ACT_SESS,
      EVENT_1,
      TO_CHAR(SESS_1, 990.99) SESS_1,
      TO_CHAR(DECODE(ACT_SESS, 0, 0, SESS_1 / ACT_SESS * 100), 
        990) "%_1",
      TO_CHAR(AVG_MS_1, 999990.99) AVG_MS_1,
      TO_CHAR(WAITS_1, 99999999990) WAITS_1,
      EVENT_2,
      TO_CHAR(SESS_2, 990.99) SESS_2,
      TO_CHAR(DECODE(ACT_SESS, 0, 0, SESS_2 / ACT_SESS * 100), 
        990) "%_2",
      TO_CHAR(AVG_MS_2, 999990.99) AVG_MS_2,
      TO_CHAR(WAITS_2, 99999999990) WAITS_2,
      EVENT_3,
      TO_CHAR(SESS_3, 990.99) SESS_3,
      TO_CHAR(DECODE(ACT_SESS, 0, 0, SESS_3 / ACT_SESS * 100), 
        990) "%_3",
      TO_CHAR(AVG_MS_3, 999990.99) AVG_MS_3,
      TO_CHAR(WAITS_3, 9999999990) WAITS_3,
      EVENT_4,
      TO_CHAR(SESS_4, 990.99) SESS_4,
      TO_CHAR(DECODE(ACT_SESS, 0, 0, SESS_4 / ACT_SESS * 100), 
        990) "%_4",
      TO_CHAR(AVG_MS_4, 999990.99) AVG_MS_4,
      TO_CHAR(WAITS_4, 9999999990) WAITS_4,
      EVENT_5,
      TO_CHAR(SESS_5, 990.99) SESS_5,
      TO_CHAR(DECODE(ACT_SESS, 0, 0, SESS_5 / ACT_SESS * 100), 
        990) "%_5",
      TO_CHAR(AVG_MS_5, 999990.99) AVG_MS_5,
      TO_CHAR(WAITS_5, 9999999990) WAITS_5
    FROM
    ( SELECT
        BEGIN_TIME,
        INSTANCE_NUMBER,
        POSITION,
        INTERVAL_SECONDS INTERVAL_S,
        ACT_SESS,
        EVENT_NAME EVENT_1,
        SESS SESS_1,
        AVG_MS AVG_MS_1,
        TOTAL_WAITS WAITS_1,
        LEAD(EVENT_NAME, 1) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) EVENT_2,
        LEAD(SESS, 1) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) SESS_2,
        LEAD(AVG_MS, 1) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) AVG_MS_2,
        LEAD(TOTAL_WAITS, 1) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) WAITS_2,
        LEAD(EVENT_NAME, 2) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) EVENT_3,
        LEAD(SESS, 2) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) SESS_3,
        LEAD(AVG_MS, 2) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) AVG_MS_3,
        LEAD(TOTAL_WAITS, 2) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) WAITS_3,
        LEAD(EVENT_NAME, 3) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) EVENT_4,
        LEAD(SESS, 3) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) SESS_4,
        LEAD(AVG_MS, 3) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) AVG_MS_4,
        LEAD(TOTAL_WAITS, 3) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) WAITS_4,
        LEAD(EVENT_NAME, 4) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) EVENT_5,
        LEAD(SESS, 4) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) SESS_5,
        LEAD(AVG_MS, 4) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) AVG_MS_5,
        LEAD(TOTAL_WAITS, 4) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY POSITION) WAITS_5
      FROM
      ( SELECT
          BEGIN_TIME,
          INSTANCE_NUMBER,
          EVENT_NAME,
          SUM(SESS) OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER) ACT_SESS,
          POSITION,
          INTERVAL_SECONDS,
          SESS,
          AVG_MS,
          TOTAL_WAITS
        FROM
        ( SELECT
            BEGIN_TIME,
            INSTANCE_NUMBER,
            EVENT_NAME,
            ROW_NUMBER() OVER (PARTITION BY BEGIN_TIME, INSTANCE_NUMBER ORDER BY WAIT_TIME_MS DESC) POSITION,
            INTERVAL_SECONDS,
            DECODE(INTERVAL_SECONDS, 0, 0, WAIT_TIME_MS / 1000 / INTERVAL_SECONDS) SESS,
            DECODE(TOTAL_WAITS, 0, 0, WAIT_TIME_MS / TOTAL_WAITS) AVG_MS,
            TOTAL_WAITS
          FROM
          ( SELECT
              BEGIN_TIME,
              INSTANCE_NUMBER,
              EVENT_NAME,
              SUM(INTERVAL_SECONDS) INTERVAL_SECONDS,
              SUM(WAIT_TIME_MS) WAIT_TIME_MS,
              SUM(TOTAL_WAITS) TOTAL_WAITS
            FROM
            ( SELECT
                BEGIN_TIME, 
                INSTANCE_NUMBER,
                MAX(INTERVAL_SECONDS) INTERVAL_SECONDS,
                EVENT_NAME,
                SUM(WAIT_TIME_MS) WAIT_TIME_MS,
                SUM(TOTAL_WAITS) TOTAL_WAITS
              FROM
              ( SELECT
                  TE.SNAP_ID,
                  MIN(TO_CHAR(BEGIN_INTERVAL_TIME, BI.AGGREGATE_BY)) OVER (PARTITION BY TE.SNAP_ID) BEGIN_TIME,
                  DECODE(BI.INSTANCE_NUMBER, -2, 0, TE.INSTANCE_NUMBER) INSTANCE_NUMBER,
                  TE.INTERVAL_SECONDS,
                  TE.EVENT_NAME,
                  TE.TIME_WAITED_MICRO / 1000 WAIT_TIME_MS,
                  TE.TOTAL_WAITS,
                  BI.AGGREGATE_BY
                FROM
                  BASIS_INFO BI,
                  TIMED_EVENTS_PER_SNAPSHOT TE
                WHERE
                ( BI.EXCLUDE_WEEKENDS = ' ' OR 
                  TO_CHAR(TE.BEGIN_INTERVAL_TIME, 'D') NOT IN (7, 1) )
              )
              GROUP BY
                BEGIN_TIME,
                SNAP_ID,
                INSTANCE_NUMBER,
                EVENT_NAME
            )
            GROUP BY
              BEGIN_TIME,
              INSTANCE_NUMBER,
              EVENT_NAME
          )
        )
      )
      WHERE
        POSITION <= 10
    )
    WHERE 
      POSITION = 1
    ORDER BY
      BEGIN_TIME DESC,
      DECODE(INSTANCE_NUMBER, 0, 'any', TO_CHAR(INSTANCE_NUMBER, 990)) 
  )
)
));
