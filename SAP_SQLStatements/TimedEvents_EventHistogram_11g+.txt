SELECT NULL UPPER_WAIT_TIME_MS, NULL WAIT_COUNT, NULL TIME_WAITED_S,
  NULL PERCENT, NULL CUM_PERCENT, NULL ACTIVE_SESSIONS FROM DUAL WHERE 1 = 0
UNION ALL ( 
SELECT NULL UPPER_WAIT_TIME_MS, NULL WAIT_COUNT, NULL TIME_WAITED_S,
  NULL PERCENT, NULL CUM_PERCENT, NULL ACTIVE_SESSIONS FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM ( 
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    EVENT_NAME
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,        /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 11:55:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      'db file sequential read' EVENT_NAME
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    MIN_SNAP_ID,
    PREV_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    RESTART
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (PARTITION BY HSS2.INSTANCE_NUMBER ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS1.SNAP_ID PREV_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2
    WHERE
      HSS2.DBID = BI.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR
        HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER 
      ) AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
    ORDER BY
      HSS2.SNAP_ID
  )
),
TOTAL_SECONDS AS
( SELECT
    MAX(SUM(INTERVAL_SECONDS)) TOTAL_SECONDS
  FROM
    SNAPSHOTS
  GROUP BY
    DBID,
    INSTANCE_NUMBER
),
EVENT_HISTOGRAM_PER_SNAPSHOT AS
( SELECT /*+ MATERIALIZE */
    SS.DBID,
    SS.INSTANCE_NUMBER,
    SS.SNAP_ID,
    BI.EVENT_NAME,
    EH2.WAIT_TIME_MILLI,
    DECODE(SS.RESTART, 
      'YES', EH2.WAIT_COUNT,
      'NO',  EH2.WAIT_COUNT - EH1.WAIT_COUNT) WAIT_COUNT
  FROM
    BASIS_INFO BI,
    SNAPSHOTS SS,
    DBA_HIST_EVENT_HISTOGRAM EH1,
    DBA_HIST_EVENT_HISTOGRAM EH2
  WHERE
    EH2.DBID = SS.DBID AND
    EH1.DBID (+) = EH2.DBID AND
    EH2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
    EH1.INSTANCE_NUMBER (+) = EH2.INSTANCE_NUMBER AND
    SS.SNAP_ID != SS.MIN_SNAP_ID AND
    SS.PREV_SNAP_ID IS NOT NULL AND
    EH2.SNAP_ID = SS.SNAP_ID AND
    EH1.SNAP_ID = SS.PREV_SNAP_ID AND
    EH2.EVENT_NAME = BI.EVENT_NAME AND
    EH1.EVENT_NAME (+) = EH2.EVENT_NAME AND
    EH1.WAIT_TIME_MILLI (+) = EH2.WAIT_TIME_MILLI
) 
SELECT
  'BEGIN:    ' || TO_CHAR(MIN(BEGIN_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss')  UPPER_WAIT_TIME_MS,
  NULL TOTAL_WAITS,
  NULL TIME_WAITED_S,
  NULL PERCENT,
  NULL CUM_PERCENT,
  NULL ACTIVE_SESSIONS
FROM 
  SNAPSHOTS
WHERE
  SNAP_ID != MIN_SNAP_ID
UNION ALL
( SELECT 
    'END:      ' || TO_CHAR(MAX(END_INTERVAL_TIME), 'dd.mm.yyyy hh24:mi:ss') UPPER_WAIT_TIME_MS,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED_S,
    NULL PERCENT,
    NULL CUM_PERCENT,
  NULL ACTIVE_SESSIONS
  FROM 
    SNAPSHOTS
)
UNION ALL
( SELECT 
    'INSTANCE: ' || DECODE(INSTANCE_NUMBER, -2, 'ALL', TO_CHAR(INSTANCE_NUMBER)) UPPER_WAIT_TIME_MS,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED_S,
    NULL PERCENT,
    NULL CUM_PERCENT,
    NULL ACTIVE_SESSIONS
  FROM 
    BASIS_INFO
)
UNION ALL
( SELECT 
    'EVENT:    ' || EVENT_NAME UPPER_WAIT_TIME_MS,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED_S,
    NULL PERCENT,
    NULL CUM_PERCENT,
    NULL ACTIVE_SESSIONS
  FROM 
    BASIS_INFO
)
UNION ALL
( SELECT 
    NULL UPPER_WAIT_TIME_MS,
    NULL TOTAL_WAITS,
    NULL TIME_WAITED_S,
    NULL PERCENT,
    NULL CUM_PERCENT,
    NULL ACTIVE_SESSIONS
  FROM 
    DUAL
)
UNION ALL
( SELECT 
    TO_CHAR(UPPER_WAIT_TIME_MS, 99999999999999999999999999999990) UPPER_WAIT_TIME_MS,
    TO_CHAR(TOTAL_WAITS, 99999999990) TOTAL_WAITS,
    TO_CHAR(TIME_WAITED_S, 999999990.99) TIME_WAITED_S,
    TO_CHAR(PERCENT, 990.99) PERCENT,
    TO_CHAR(CUM_PERCENT, 9999990.99) CUM_PERCENT,
    TO_CHAR(ACTIVE_SESSIONS, 99999999990.99) ACTIVE_SESSIONS
  FROM
  ( SELECT
      UPPER_WAIT_TIME_MS,
      TOTAL_WAITS,
      TIME_WAITED_S,
      PERCENT,
      SUM(PERCENT) OVER (ORDER BY UPPER_WAIT_TIME_MS RANGE UNBOUNDED PRECEDING) CUM_PERCENT,
      TIME_WAITED_S / TOTAL_SECONDS ACTIVE_SESSIONS
    FROM
    ( SELECT
        EH.WAIT_TIME_MILLI UPPER_WAIT_TIME_MS,
        EH.WAIT_TIME_MILLI * DECODE(EH.WAIT_TIME_MILLI, 1, 0.5, 0.75) * 
          SUM(EH.WAIT_COUNT) / 1000 TIME_WAITED_S,
        SUM(EH.WAIT_COUNT) TOTAL_WAITS,
        RATIO_TO_REPORT(EH.WAIT_TIME_MILLI * 
          DECODE(EH.WAIT_TIME_MILLI, 1, 0.5, 0.75) * SUM(EH.WAIT_COUNT)) OVER () * 100 PERCENT,
        TS.TOTAL_SECONDS
      FROM
        TOTAL_SECONDS TS,
        EVENT_HISTOGRAM_PER_SNAPSHOT EH
      GROUP BY
        EH.WAIT_TIME_MILLI,
        TS.TOTAL_SECONDS
    )
    ORDER BY 
      UPPER_WAIT_TIME_MS
  )
)
));

