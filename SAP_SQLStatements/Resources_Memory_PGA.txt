SELECT NULL BEGIN_TIME, NULL PGA_PEAK_MB, NULL PGA_CURRENT_MB, NULL PGA_AUTO_MB, 
  NULL PGA_MANUAL_MB, NULL "PROCESSED_MB/H", NULL "TEMP_IO_MB/H", NULL "OVERALLOC/H"
  FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL PGA_PEAK_MB, NULL PGA_CURRENT_MB, NULL PGA_AUTO_MB, 
  NULL PGA_MANUAL_MB, NULL "PROCESSED_MB/H", NULL "TEMP_IO_MB/H", NULL "OVERALLOC/H"
  FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), 
      INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    DECODE(AGGREGATE_BY,
      'SNAPSHOT',    'YYYY-MM-DD HH24:MI:SS',
      'DAY',         'YYYY-MM-DD (DY)',
      'HOUR_OF_DAY', 'HH24',
      AGGREGATE_BY ) AGGREGATE_BY
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      TO_DATE('01.01.1000 09:07:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:00:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      'SNAPSHOT' AGGREGATE_BY    /* SNAPSHOT, DAY, HOUR_OF_DAY or Oracle time pattern */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    HSS2.DBID,
    HSS2.INSTANCE_NUMBER,
    HSS2.SNAP_ID,
    HSS1.SNAP_ID PREV_SNAP_ID,
    HSS2.BEGIN_INTERVAL_TIME,
    HSS2.END_INTERVAL_TIME,
    TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
               TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
      INTERVAL_SECONDS,
    DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
  FROM 
    BASIS_INFO BI,
    DBA_HIST_SNAPSHOT HSS1, 
    DBA_HIST_SNAPSHOT HSS2
  WHERE
    HSS2.DBID = BI.DBID AND
    HSS1.DBID (+) = HSS2.DBID AND
    HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER AND
    HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
    HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
  ORDER BY
    HSS2.SNAP_ID
)
SELECT
  BEGIN_TIME,
  TO_CHAR(PGA_PEAK_MB, 9999990.99) PGA_PEAK_MB,
  TO_CHAR(PGA_CURRENT_MB, 9999999990.99) PGA_CURRENT_MB,
  TO_CHAR(PGA_AUTO_MB, 9999990.99) PGA_AUTO_MB,
  TO_CHAR(PGA_MANUAL_MB, 999999990.99) PGA_MANUAL_MB,
  TO_CHAR(PROCESSED_MB / SECONDS * 3600, 9999999990.99) "PROCESSED_MB/H",
  TO_CHAR(TEMP_IO_MB / SECONDS * 3600, 99999990.99) "TEMP_IO_MB/H",
  TO_CHAR(OVERALLOCATIONS / SECONDS * 3600, 9999990.99) "OVERALLOC/H"
FROM
( SELECT
    TO_CHAR(BEGIN_INTERVAL_TIME, AGGREGATE_BY) BEGIN_TIME,
    SUM(SECONDS) SECONDS,
    MAX(PGA_PEAK_MB) PGA_PEAK_MB,
    MAX(PGA_CURRENT_MB) PGA_CURRENT_MB,
    MAX(PGA_AUTO_MB) PGA_AUTO_MB,
    MAX(PGA_MANUAL_MB) PGA_MANUAL_MB,
    SUM(PROCESSED_MB) PROCESSED_MB,
    SUM(TEMP_IO_MB) TEMP_IO_MB,
    SUM(OVERALLOCATIONS) OVERALLOCATIONS
  FROM
  ( SELECT
      SS.BEGIN_INTERVAL_TIME, 
      SS.INTERVAL_SECONDS SECONDS,
      HPS1.VALUE / 1024 / 1024 PGA_CURRENT_MB,
      NVL(HPS2.VALUE, 0) / 1024 / 1024 PGA_AUTO_MB,
      NVL(HPS3.VALUE, 0) / 1024 / 1024 PGA_MANUAL_MB,
      DECODE(HPS4.VALUE, NULL, 0, DECODE(SS.RESTART, 'YES', HPS4.VALUE, HPS4.VALUE - 
        LAG(HPS4.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) / 1024 / 1024) PROCESSED_MB,
      DECODE(HPS5.VALUE, NULL, 0, DECODE(SS.RESTART, 'YES', HPS5.VALUE, HPS5.VALUE - 
        LAG(HPS5.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) / 1024 / 1024) TEMP_IO_MB,
      NVL(HPS6.VALUE, 0) / 1024 / 1024 PGA_PEAK_MB,
      DECODE(HPS7.VALUE, NULL, 0, DECODE(SS.RESTART, 'YES', HPS7.VALUE, HPS7.VALUE - 
        LAG(HPS7.VALUE, 1) OVER (ORDER BY SS.SNAP_ID))) OVERALLOCATIONS,
      SS.PREV_SNAP_ID,
      BI.AGGREGATE_BY
    FROM 
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_PGASTAT HPS1, 
      DBA_HIST_PGASTAT HPS2, 
      DBA_HIST_PGASTAT HPS3,
      DBA_HIST_PGASTAT HPS4,
      DBA_HIST_PGASTAT HPS5,
      DBA_HIST_PGASTAT HPS6,
      DBA_HIST_PGASTAT HPS7
    WHERE
      HPS1.DBID = SS.DBID AND
      HPS2.DBID (+) = SS.DBID AND
      HPS3.DBID (+) = SS.DBID AND
      HPS4.DBID (+) = SS.DBID AND
      HPS5.DBID (+) = SS.DBID AND
      HPS6.DBID (+) = SS.DBID AND
      HPS7.DBID (+) = SS.DBID AND
      HPS1.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HPS2.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HPS3.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HPS4.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HPS5.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HPS6.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HPS7.INSTANCE_NUMBER (+) = SS.INSTANCE_NUMBER AND
      HPS1.SNAP_ID = SS.SNAP_ID AND
      HPS2.SNAP_ID (+) = SS.SNAP_ID AND
      HPS3.SNAP_ID (+) = SS.SNAP_ID AND
      HPS4.SNAP_ID (+) = SS.SNAP_ID AND
      HPS5.SNAP_ID (+) = SS.SNAP_ID AND
      HPS6.SNAP_ID (+) = SS.SNAP_ID AND
      HPS7.SNAP_ID (+) = SS.SNAP_ID AND
      HPS1.NAME = 'total PGA inuse' AND
      HPS2.NAME (+) = 'total PGA used for auto workareas' AND
      HPS3.NAME (+) = 'total PGA used for manual workareas' AND
      HPS4.NAME (+) = 'bytes processed' AND
      HPS5.NAME (+) = 'extra bytes read/written' AND
      HPS6.NAME (+) = 'maximum PGA allocated' AND
      HPS7.NAME (+) = 'over allocation count'
  )
  WHERE 
    PREV_SNAP_ID IS NOT NULL
  GROUP BY
    TO_CHAR(BEGIN_INTERVAL_TIME, AGGREGATE_BY)
  ORDER BY
    1 DESC
)
));
