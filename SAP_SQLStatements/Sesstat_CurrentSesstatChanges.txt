SELECT NULL PROGRAM, NULL STAT_NAME, NULL SID, NULL INST, NULL USER_NAME, NULL INTERVAL_S, NULL CHANGE,
  NULL CHANGE_PER_S FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL PROGRAM, NULL STAT_NAME, NULL SID, NULL INST, NULL USER_NAME, NULL INTERVAL_S, NULL CHANGE,
  NULL CHANGE_PER_S FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    -1 INSTANCE_NUMBER,
    -1 SESSION_ID,
    '%' USER_NAME,
    '%' PROGRAM,
    'physical write total bytes' STAT_NAME,
    -1 STATISTIC#,
    'CHANGE' ORDER_BY,          /* 'INSTANCE SID PROGRAM STAT_NAME STATISTIC# VALUE CHANGE USER' or parts */
    -1 NUM_RECORDS,
    10 SLEEP_CYCLES
  FROM
    DUAL
),
CYCLES AS
( SELECT
    ROWNUM CNT
  FROM
    BASIS_INFO BI,
    V$SESSTAT SS
  WHERE
    ROWNUM <= BI.SLEEP_CYCLES
),
TIME_1 AS
( SELECT /*+ MATERIALIZE */
    CTIME SECONDS
  FROM
    V$LOCK
  WHERE
    TYPE = 'MR' AND
    ROWNUM = 1
),
SAMPLE_1 AS
( SELECT /*+ MATERIALIZE */
    SE.SID,
    SE.INST_ID,
    SE.USERNAME USER_NAME,
    SE.PROGRAM,
    SY.NAME STAT_NAME,
    SS.STATISTIC#,
    SS.VALUE VALUE
  FROM
    BASIS_INFO BI,
    GV$SESSION SE,
    GV$SESSTAT SS,
    GV$SYSSTAT SY
  WHERE
    ( BI.SESSION_ID = -1 OR 
      BI.SESSION_ID = SE.SID ) AND
    SE.SID = SS.SID AND
    ( BI.INSTANCE_NUMBER = -1 OR
      BI.INSTANCE_NUMBER = SE.INST_ID ) AND
    NVL(SE.USERNAME, ' ') LIKE BI.USER_NAME AND
    SE.INST_ID = SS.INST_ID AND
    SS.INST_ID = SY.INST_ID AND
    SE.PROGRAM LIKE BI.PROGRAM AND
    SY.NAME LIKE BI.STAT_NAME AND
    ( BI.STATISTIC# = -1 OR
      SS.STATISTIC# = BI.STATISTIC# ) AND
    SS.STATISTIC# = SY.STATISTIC# 
),
SLEEPING AS
( SELECT /*+ MATERIALIZE */
    1
  FROM
    V$SESSTAT SS,
    CYCLES C
),
TIME_2 AS
( SELECT /*+ MATERIALIZE */
    CTIME SECONDS
  FROM
    V$LOCK
  WHERE
    TYPE = 'MR' AND
    ROWNUM = 1
),
SAMPLE_2 AS
( SELECT /*+ MATERIALIZE */
    SE.SID,
    SE.INST_ID,
    SE.USERNAME USER_NAME,
    SE.PROGRAM,
    SY.NAME STAT_NAME,
    SS.STATISTIC#,
    SS.VALUE VALUE
  FROM
    BASIS_INFO BI,
    GV$SESSION SE,
    GV$SESSTAT SS,
    GV$SYSSTAT SY
  WHERE
    ( BI.SESSION_ID = -1 OR 
      BI.SESSION_ID = SE.SID ) AND
    SE.SID = SS.SID AND
    ( BI.INSTANCE_NUMBER = -1 OR
      BI.INSTANCE_NUMBER = SE.INST_ID ) AND
    NVL(SE.USERNAME, ' ') LIKE BI.USER_NAME AND
    SE.INST_ID = SS.INST_ID AND
    SS.INST_ID = SY.INST_ID AND
    SE.PROGRAM LIKE BI.PROGRAM AND
    SY.NAME LIKE BI.STAT_NAME AND
    ( BI.STATISTIC# = -1 OR
      SS.STATISTIC# = BI.STATISTIC# ) AND
    SS.STATISTIC# = SY.STATISTIC# 
)
SELECT
  'Evaluation date:' PROGRAM,
  TO_CHAR(SYSDATE, 'dd.mm.yyyy hh24:mi:ss') STAT_NAME, 
  NULL SID, NULL INST, NULL USER_NAME,
  NULL INTERVAL_S, NULL CHANGE, NULL CHANGE_PER_S
FROM
  DUAL
UNION ALL
( SELECT
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
  FROM
    DUAL
)
UNION ALL
( SELECT
    PROGRAM,
    STAT_NAME,
    SID,
    INST,
    USER_NAME,
    INTERVAL_S,
    CHANGE,
    CHANGE_PER_S
  FROM
  ( SELECT
      S1.PROGRAM,
      S1.STAT_NAME,
      TO_CHAR(S1.SID, 99990) SID,
      TO_CHAR(S1.INST_ID, 990) INST,
      S1.USER_NAME,
      TO_CHAR(T2.SECONDS - T1.SECONDS, 999999990) INTERVAL_S,
      TO_CHAR(S2.VALUE - S1.VALUE, 999999990) CHANGE,
      TO_CHAR(DECODE(T2.SECONDS, T1.SECONDS, 0, 
        ( S2.VALUE - S1.VALUE ) / (T2.SECONDS - T1.SECONDS)), 99999990.99) CHANGE_PER_S,
      BI.NUM_RECORDS
    FROM
      BASIS_INFO BI,
      TIME_1 T1,
      TIME_2 T2,
      SAMPLE_1 S1,
      SAMPLE_2 S2
    WHERE
      S1.SID = S2.SID AND
      S1.INST_ID = S2.INST_ID AND
      S1.STAT_NAME = S2.STAT_NAME 
    ORDER BY
      DECODE(INSTR(BI.ORDER_BY, 'INSTANCE'), 0, 1, S1.INST_ID),
      DECODE(INSTR(BI.ORDER_BY, 'SID'), 0, 1, S1.SID),
      DECODE(INSTR(BI.ORDER_BY, 'USER'), 0, 1, S1.USER_NAME),
      DECODE(INSTR(BI.ORDER_BY, 'PROGRAM'), 0, '1', S1.PROGRAM),
      DECODE(INSTR(BI.ORDER_BY, 'STAT_NAME'), 0, '1', S1.STAT_NAME),
      DECODE(INSTR(BI.ORDER_BY, 'STATISTIC#'), 0, 1, S1.STATISTIC#),
      DECODE(INSTR(BI.ORDER_BY, 'VALUE'), 0, 1, S1.VALUE) DESC,
      DECODE(INSTR(BI.ORDER_BY, 'CHANGE'), 0, 1, S2.VALUE - S1.VALUE) DESC
  )
  WHERE
    NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS 
)
UNION ALL
( SELECT NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
  FROM SLEEPING WHERE 1 = 0
)
));

