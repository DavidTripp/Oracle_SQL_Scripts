SELECT NULL LINE FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL LINE FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT 
  /*+ OPT_PARAM('_PUSH_JOIN_UNION_VIEW', 'FALSE') OPT_PARAM('_COMPLEX_VIEW_MERGING', 'FALSE')
      OPT_PARAM('_OPTIMIZER_NEW_JOIN_CARD_COMPUTATION', 'FALSE') */  
  * FROM (
WITH BASIS_INFO AS
( SELECT
    'SAP%' OWNER,
    TO_DATE('01.01.1000 14:27:44', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
    TO_DATE('31.12.9999 14:37:26', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
    '%' SEGMENT_NAME,
    'INDEX' SEGMENT_TYPE,      /* TABLE, INDEX or ALL */
    -1 MIN_SIZE_MB,
    -1 NUM_RECORDS,
    -1 NUM_LARGEST_SEGMENTS,
    -1 NUM_IO_READ_SEGMENTS,
    50 QUALITY_THRESHOLD,
    100 UNUSED_MB_THRESHOLD,
    'UNUSED' SORT_BY,
    'X' ONLY_SEGMENT_NAMES,
    'X' INCLUDE_OWNER
  FROM
    DUAL
),
SEGMENT_SELECTION AS
( SELECT /*+ MATERIALIZE */
    OWNER,
    SEGMENT_NAME,
    SUM(SIZE_POS) SIZE_POS,
    SUM(IO_POS) IO_POS
  FROM
  ( SELECT
      OWNER,
      SEGMENT_NAME,
      SIZE_POS,
      0 IO_POS
    FROM
    ( SELECT
        S.OWNER,
        S.SEGMENT_NAME,
        ROW_NUMBER () OVER (ORDER BY SUM(S.BYTES) DESC) SIZE_POS,
        BI.NUM_LARGEST_SEGMENTS,
        BI.NUM_IO_READ_SEGMENTS
      FROM
        DBA_SEGMENTS S,
        BASIS_INFO BI
      WHERE
        S.SEGMENT_TYPE IN ('INDEX', 'INDEX PARTITION', 
          'TABLE', 'TABLE PARTITION')
      GROUP BY
        S.OWNER,
        S.SEGMENT_NAME,
        BI.NUM_LARGEST_SEGMENTS,
        BI.NUM_IO_READ_SEGMENTS
      ORDER BY
        SUM(S.BYTES) DESC
    )
    WHERE
      NUM_LARGEST_SEGMENTS = -1 OR 
      NUM_IO_READ_SEGMENTS = -1 OR 
      SIZE_POS <= NUM_LARGEST_SEGMENTS
    UNION ALL
    ( SELECT
        OWNER,
        SEGMENT_NAME,
        0 SIZE_POS,
        IO_POS
      FROM
      ( SELECT
          DECODE(NVL(O.OWNER, SSO.OWNER), 
            '** UNAVAILABLE **', NVL(O2.OWNER, 'not available'),
            NVL(O.OWNER, SSO.OWNER)) OWNER,
          DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME), 
            '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
            NVL(O.OBJECT_NAME, SSO.OBJECT_NAME)) SEGMENT_NAME,
          ROW_NUMBER () OVER (ORDER BY SUM(S.PHYSICAL_READS_DELTA) DESC) IO_POS,
          BI.NUM_LARGEST_SEGMENTS,
          BI.NUM_IO_READ_SEGMENTS
        FROM
          BASIS_INFO BI,
          DBA_HIST_SEG_STAT S,
          DBA_OBJECTS O,
          DBA_HIST_SEG_STAT_OBJ SSO,
          DBA_OBJECTS O2
        WHERE
          S.OBJ# = O.OBJECT_ID (+) AND
          S.DATAOBJ# = O.DATA_OBJECT_ID (+) AND
          S.OBJ# = SSO.OBJ# (+) AND
          S.DATAOBJ# = SSO.DATAOBJ# (+) AND
          S.OBJ# = O2.OBJECT_ID (+) AND
          SSO.OBJECT_TYPE IN ('INDEX', 'INDEX PARTITION',
            'TABLE', 'TABLE PARTITION')
        GROUP BY
          DECODE(NVL(O.OWNER, SSO.OWNER), 
            '** UNAVAILABLE **', NVL(O2.OWNER, 'not available'),
            NVL(O.OWNER, SSO.OWNER)),
          DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME), 
            '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
            NVL(O.OBJECT_NAME, SSO.OBJECT_NAME)),
          BI.NUM_LARGEST_SEGMENTS,
          BI.NUM_IO_READ_SEGMENTS
      )
      WHERE
        NUM_IO_READ_SEGMENTS = -1 OR IO_POS <= NUM_IO_READ_SEGMENTS
    )
  )
  GROUP BY
    OWNER,
    SEGMENT_NAME
)
SELECT
  DECODE(ONLY_SEGMENT_NAMES, 'X', DECODE(INCLUDE_OWNER, 'X', OWNER || '.') || SEGMENT_NAME|| DECODE(PART_NAME, NULL, NULL, '.' || PART_NAME),
    DECODE(ROWNUM, 
      1, DECODE(SEGMENT_TYPE, 'TABLE', 'reorg_table = ( ', 'INDEX', 'rebuild_index = ( ')) || 
      DECODE(INCLUDE_OWNER, 'X', OWNER || '.') || SEGMENT_NAME ||
    DECODE(ROWNUM, MAX(ROWNUM) OVER (), ' )', ', ')) LINE
FROM
( SELECT
    TO_CHAR(ANALYSIS_TIME, 'dd.mm.yyyy hh24:mi:ss') ANALYSIS_TIME,
    OWNER,
    SEGMENT_NAME,
    SEGMENT_TYPE,
    PARTITION_NAME PART_NAME,
    DECODE(SIZE_POS, 0, ' ', TO_CHAR(SIZE_POS, 9999990)) SIZE_POS,
    DECODE(IO_POS, 0, ' ', TO_CHAR(IO_POS, 9999990)) IO_POS,
    TO_CHAR(UNUSED_MB, 999999990.99) UNUSED_MB,
    TO_CHAR("QUALITY_%", 99990.99) "QUALITY_%",
    TO_CHAR(DATA_GROSS_MB, 99999990.99) GROSS_MB,
    TO_CHAR(DATA_NET_MB, 99999990.99) NET_MB,
    ONLY_SEGMENT_NAMES,
    INCLUDE_OWNER
  FROM
  ( SELECT
      ANALYSIS_TIME,
      OWNER,
      SEGMENT_NAME,
      SEGMENT_TYPE,
      PARTITION_NAME,
      UNUSED_MB,
      DATA_NET_MB / DATA_GROSS_MB * 100 "QUALITY_%",
      DATA_GROSS_MB,
      DATA_NET_MB,
      MIN_SIZE_MB,
      NUM_RECORDS,
      QUALITY_THRESHOLD,
      UNUSED_MB_THRESHOLD,
      SORT_BY,
      SIZE_POS,
      IO_POS,
      ONLY_SEGMENT_NAMES,
      INCLUDE_OWNER
    FROM
    ( SELECT
        ANALYSIS_TIME,
        OWNER,
        SEGMENT_NAME,
        PARTITION_NAME,
        SEGMENT_TYPE,
        MESSAGE,
        MORE_INFO,
        DECODE(SIGN(INSTR(MORE_INFO, 'Allocated Space')), 1,
          REGEXP_REPLACE(MORE_INFO,'.*Allocated Space:([0-9]+):.*', 
          '\1', 1, 1, 'i') / 1024 / 1024, 0) DATA_GROSS_MB,
        DECODE(SIGN(INSTR(MORE_INFO, 'Used Space')), 1,
          REGEXP_REPLACE(MORE_INFO,'.*Used Space:([0-9]+):.*', 
          '\1', 1, 1, 'i') / 1024 / 1024, 0) DATA_NET_MB,
        DECODE(SIGN(INSTR(MORE_INFO, 'Reclaimable Space')), 1,
          REGEXP_REPLACE(MORE_INFO,
          '.*Reclaimable Space[ ]*:([0-9]+):.*', 
          '\1', 1, 1, 'i') / 1024 / 1024, 0) UNUSED_MB,
        MIN_SIZE_MB,
        NUM_RECORDS,
        QUALITY_THRESHOLD,
        UNUSED_MB_THRESHOLD,
        SORT_BY,
        SIZE_POS,
        IO_POS,
        ONLY_SEGMENT_NAMES,
        INCLUDE_OWNER
      FROM
      ( SELECT
          DAT.EXECUTION_START ANALYSIS_TIME,
          DAO.ATTR1 OWNER,
          DAO.ATTR2 SEGMENT_NAME,
          DAO.ATTR3 PARTITION_NAME,
          DAO.TYPE SEGMENT_TYPE,
          DAF.MESSAGE MESSAGE,
          DAF.MORE_INFO,
          ROW_NUMBER () OVER (PARTITION BY DAO.ATTR1, DAO.ATTR2, 
            NVL(DAO.ATTR3, ' ') ORDER BY DAT.EXECUTION_START DESC) ROW_NUMBER,
          BI.MIN_SIZE_MB,
          BI.NUM_RECORDS,
          BI.QUALITY_THRESHOLD,
          BI.UNUSED_MB_THRESHOLD,
          BI.SORT_BY,
          S.SIZE_POS,
          S.IO_POS,
          BI.ONLY_SEGMENT_NAMES,
          BI.INCLUDE_OWNER
        FROM
          BASIS_INFO BI,
          SEGMENT_SELECTION S,
          DBA_ADVISOR_TASKS DAT,
          DBA_ADVISOR_FINDINGS DAF,
          DBA_ADVISOR_OBJECTS DAO
        WHERE
          DAO.ATTR1 LIKE BI.OWNER AND
          DAO.ATTR2 LIKE BI.SEGMENT_NAME AND
          DAO.ATTR1 = S.OWNER AND
          DAO.ATTR2 = S.SEGMENT_NAME AND
          DAT.OWNER = DAF.OWNER AND
          DAT.TASK_ID = DAF.TASK_ID AND
          DAF.TASK_ID = DAO.TASK_ID AND
          DAF.OBJECT_ID = DAO.OBJECT_ID AND
          DAT.ADVISOR_NAME = 'Segment Advisor' AND
          DAF.MORE_INFO LIKE 'Alloc%' AND
          DAF.MESSAGE NOT LIKE 'Compress%' AND /* Wrong space data with compress possible */
          ( BI.SEGMENT_TYPE = 'ALL' OR DAO.TYPE LIKE BI.SEGMENT_TYPE || '%' ) AND
          ( DAT.EXECUTION_START BETWEEN BI.BEGIN_DATE AND BI.END_DATE )
      ) 
      WHERE
        ROW_NUMBER = 1
    )
    WHERE
      DATA_GROSS_MB > 0
    ORDER BY
      DECODE ( SORT_BY, 'UNUSED', 100000000 - UNUSED_MB, 
        'QUALITY', "QUALITY_%" ) 
  )
  WHERE
    ( MIN_SIZE_MB = -1 OR DATA_GROSS_MB >= MIN_SIZE_MB ) AND
    ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS ) AND
    ( QUALITY_THRESHOLD = -1 OR "QUALITY_%" <= QUALITY_THRESHOLD ) AND
    ( UNUSED_MB_THRESHOLD = -1 OR UNUSED_MB >= UNUSED_MB_THRESHOLD )
)
));
