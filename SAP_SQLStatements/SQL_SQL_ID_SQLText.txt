SELECT 
  /*+ OPT_PARAM('_OPTIMIZER_MJC_ENABLED', FALSE) 
      OPT_PARAM('_OPTIMIZER_CARTESIAN_ENABLED', 'FALSE') 
      OPT_PARAM('_COMPLEX_VIEW_MERGING', 'FALSE') 
      OPT_PARAM('_CONNECT_BY_USE_UNION_ALL', 'FALSE')
      OPT_PARAM('_OPTIMIZER_COST_BASED_TRANSFORMATION', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_DISTINCT_AGG_TRANSFORM', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_GROUP_BY_PLACEMENT', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_JOIN_SEL_SANITY_CHECK', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_NEW_JOIN_CARD_COMPUTATION', 'FALSE') 
      OPT_PARAM('_PUSH_JOIN_UNION_VIEW', 'FALSE') 
      OPT_PARAM('_PUSH_JOIN_UNION_VIEW2', 'FALSE') 
      OPT_PARAM('_PUSH_JOIN_PREDICATE', 'FALSE')
      OPT_PARAM('QUERY_REWRITE_ENABLED', 'FALSE')
  */
  NULL LINE FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL LINE FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    '80z9rz1g0xsbs' SQL_ID,
    'X' COMPLEX_SQL_TEXT,      /* deactivation for large SQL statements useful */
    ' ' COMMA_AS_SPLITTER,
    'X' BLANK_AS_SPLITTER     
  FROM
    DUAL
),
SQL_TEXT_LOB AS 
( SELECT /*+ MATERIALIZE */ 
    SS.SQL_FULLTEXT SQL_TEXT,
    DBMS_LOB.GETLENGTH("SQL_FULLTEXT") LENGTH,
    LENGTH(REGEXP_REPLACE(SS.SQL_FULLTEXT, '[^ ]', '')) NUM_BLANKS,
    LENGTH(REGEXP_REPLACE(SS.SQL_FULLTEXT, '[^,]', '')) NUM_COMMA
  FROM
    BASIS_INFO BI,
    V$SQLSTATS SS 
  WHERE
    SS.SQL_ID = BI.SQL_ID
  UNION ALL /*+ MATERIALIZE */
  ( SELECT 
      HST.SQL_TEXT,
      DBMS_LOB.GETLENGTH("SQL_TEXT") LENGTH,
      LENGTH(REGEXP_REPLACE(HST.SQL_TEXT, '[^ ]', '')) NUM_BLANKS,
      LENGTH(REGEXP_REPLACE(HST.SQL_TEXT, '[^,]', '')) NUM_COMMA
    FROM
      DBA_HIST_SQLTEXT HST, BASIS_INFO BI
    WHERE
      HST.SQL_ID = BI.SQL_ID AND
      NOT EXISTS 
      ( SELECT 1 FROM V$SQLSTATS SS, BASIS_INFO BI WHERE SS.SQL_ID = BI.SQL_ID )
  )
),
START_POSITIONS AS
( SELECT /*+ MATERIALIZE LEADING(AA) */
    DECODE(ROWNUM, 
      1, 1, 
      NUM_BLANKS + 2, LENGTH + 1, 
      DBMS_LOB.INSTR(STL.SQL_TEXT, ' ', 1, ROWNUM - 1) + 1) POS
  FROM
    BASIS_INFO BI,
    SQL_TEXT_LOB STL,
    ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 
      ( SELECT NUM_BLANKS + 2 FROM SQL_TEXT_LOB)
    )
  WHERE
    BI.COMPLEX_SQL_TEXT = 'X' AND
    BI.BLANK_AS_SPLITTER = 'X'
  UNION
  ( SELECT /*+ MATERIALIZE LEADING(AA) */
      DECODE(ROWNUM, 
        1, 1, 
        NUM_COMMA + 2, LENGTH + 1, 
        DBMS_LOB.INSTR(STL.SQL_TEXT, ',', 1, ROWNUM - 1) + 1) POS
    FROM
      BASIS_INFO BI,
      SQL_TEXT_LOB STL,
      ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 
        ( SELECT NUM_COMMA + 2 FROM SQL_TEXT_LOB)
      )
    WHERE
      BI.COMPLEX_SQL_TEXT = 'X' AND
      BI.COMMA_AS_SPLITTER = 'X'
  )
),
START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    POS1,
    NVL(POS2, POS_OVERFLOW) POS2
  FROM
  ( SELECT
      SP1.POS POS1,
      MAX(SP2.POS) POS2,
      MIN(SP3.POS) POS_OVERFLOW
    FROM
      START_POSITIONS SP1,
      START_POSITIONS SP2,
      START_POSITIONS SP3
    WHERE
      SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + 80 AND
      SP3.POS > SP1.POS
    GROUP BY
      SP1.POS
  )
),
START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    POS1,
    POS2
  FROM
    START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR 
    POS2 = POS1
  UNION ALL
  ( SELECT
      (R.ROWNUMBER - 1) * 80 + 1 POS1,
      R.ROWNUMBER * 80 + 1 POS2
    FROM
      BASIS_INFO BI,
      SQL_TEXT_LOB STL,
      ( SELECT ROWNUM ROWNUMBER FROM V$SESSTAT WHERE ROWNUM <= 1000 ) R
    WHERE
      BI.COMPLEX_SQL_TEXT = ' ' AND
      R.ROWNUMBER * 80 <= LENGTH(STL.SQL_TEXT) + 80
  )
)
SELECT
  DBMS_LOB.SUBSTR(STL.SQL_TEXT, SEP.POS2 - SEP.POS1, SEP.POS1) LINE
FROM
  START_END_LINE_POSITIONS SEP, 
  SQL_TEXT_LOB STL
ORDER BY SEP.POS1
));
