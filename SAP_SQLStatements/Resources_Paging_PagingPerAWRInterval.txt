SELECT NULL BEGIN_TIME, NULL PHYSICAL_MEM_GB, NULL PAGE_IN_MB, NULL PAGE_OUT_MB,
  NULL PGA_ALLOCATED_MB, NULL PGA_uSED_MB FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL PHYSICAL_MEM_GB, NULL PAGE_IN_MB, NULL PAGE_OUT_MB,
  NULL PGA_ALLOCATED_MB, NULL PGA_uSED_MB FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'),
      INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      TO_DATE('20.06.2010 23:55:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 23:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT
    HSS2.DBID,
    HSS2.INSTANCE_NUMBER,
    HSS2.SNAP_ID,
    FIRST_VALUE(HSS2.SNAP_ID) OVER (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
    HSS2.BEGIN_INTERVAL_TIME,
    HSS2.END_INTERVAL_TIME,
    TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
               TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
      INTERVAL_SECONDS,
    DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
  FROM 
    BASIS_INFO BI,
    DBA_HIST_SNAPSHOT HSS1, 
    DBA_HIST_SNAPSHOT HSS2
  WHERE
    BI.DBID = HSS1.DBID AND
    BI.DBID = HSS2.DBID AND
    BI.INSTANCE_NUMBER = HSS1.INSTANCE_NUMBER AND
    HSS1.INSTANCE_NUMBER = HSS2.INSTANCE_NUMBER AND
    HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    HSS1.SNAP_ID = HSS2.SNAP_ID - 1 
)
SELECT
  'INSTANCE: ' || TO_CHAR(INSTANCE_NUMBER) BEGIN_TIME,
  NULL PHYSICAL_MEM_GB,
  NULL PAGE_IN_MB,
  NULL PAGE_OUT_MB,
  NULL PGA_ALLOCATED_MB,
  NULL PGA_USED_MB
FROM
  BASIS_INFO
UNION ALL
( SELECT
    NULL BEGIN_TIME,
    NULL PHYSICAL_MEM_GB,
    NULL PAGE_IN_MB,
    NULL PAGE_OUT_MB,
    NULL PGA_ALLOCATED_MB,
    NULL PGA_USED_MB
  FROM
    DUAL
)
UNION ALL
( SELECT
    BEGIN_TIME,
    PHYSICAL_MEM_GB,
    PAGE_IN_MB,
    PAGE_OUT_MB,
    PGA_ALLOCATED_MB,
    PGA_USED_MB
  FROM
  ( SELECT
      TO_CHAR(BEGIN_INTERVAL_TIME, 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
      TO_CHAR(PHYSICAL_MEMORY_BYTES / 1024 / 1024 / 1024, 99999999990.99) PHYSICAL_MEM_GB,
      TO_CHAR(PAGE_IN_MB, 9999990.99) PAGE_IN_MB,
      TO_CHAR(PAGE_OUT_MB, 9999990.99) PAGE_OUT_MB,
      TO_CHAR(PGA_ALLOCATED_MB, 999999999990.99) PGA_ALLOCATED_MB,
      TO_CHAR(PGA_USED_MB, 9999990.99) PGA_USED_MB
    FROM
    ( SELECT
        SNAP_ID,
        BEGIN_INTERVAL_TIME,
        PHYSICAL_MEMORY_BYTES,
        DECODE(RESTART, 'YES', ROUND(PAGE_IN_BYTES / 1000000), ROUND((PAGE_IN_BYTES - 
          LAG(PAGE_IN_BYTES, 1) OVER (ORDER BY SNAP_ID)) / 1000000, 2)) PAGE_IN_MB,
        DECODE(RESTART, 'YES', ROUND(PAGE_OUT_BYTES / 1000000), ROUND((PAGE_OUT_BYTES - 
          LAG(PAGE_OUT_BYTES, 1) OVER (ORDER BY SNAP_ID)) / 1000000, 2)) PAGE_OUT_MB,
        PGA_ALLOCATED_MB,
        PGA_USED_MB
      FROM
      ( SELECT
          SS.SNAP_ID SNAP_ID,
          SS.BEGIN_INTERVAL_TIME BEGIN_INTERVAL_TIME,
          SS.RESTART,
          MAX(DECODE(HOS.STAT_NAME, 'PHYSICAL_MEMORY_BYTES', HOS.VALUE, 0)) PHYSICAL_MEMORY_BYTES,
          MAX(DECODE(HOS.STAT_NAME, 'VM_IN_BYTES', HOS.VALUE, 0)) PAGE_IN_BYTES,
          MAX(DECODE(HOS.STAT_NAME, 'VM_OUT_BYTES', HOS.VALUE, 0)) PAGE_OUT_BYTES,
          MAX(DECODE(HPS.NAME, 'total PGA allocated', HPS.VALUE, 0)) / 1024 / 1024
            PGA_ALLOCATED_MB,
          MAX(DECODE(HPS.NAME, 'total PGA inuse', HPS.VALUE, 0)) / 1024 / 1024 PGA_USED_MB
        FROM
          SNAPSHOTS SS,
          DBA_HIST_OSSTAT HOS, 
          DBA_HIST_PGASTAT HPS
        WHERE
          SS.DBID = HOS.DBID AND
          SS.DBID = HPS.DBID AND
          SS.INSTANCE_NUMBER = HOS.INSTANCE_NUMBER AND
          SS.INSTANCE_NUMBER = HPS.INSTANCE_NUMBER AND
          SS.SNAP_ID = HOS.SNAP_ID AND
          SS.SNAP_ID = HPS.SNAP_ID
        GROUP BY
          SS.SNAP_ID,
          SS.BEGIN_INTERVAL_TIME,
          SS.RESTART
      )  
    )
    WHERE
      PAGE_IN_MB >= 0 AND
      PAGE_OUT_MB >= 0
    ORDER BY 
      SNAP_ID DESC
  )
)
));
