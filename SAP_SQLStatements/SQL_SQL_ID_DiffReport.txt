SELECT   /*+ OPTIMIZER_FEATURES_ENABLE('10.2.0.4') */
  /* Optimizer level 10.2.0.4 required to eliminate ORA-00979 errors on 11g */
  NULL STAT_NAME, NULL VALUE, NULL VALUE_PER_EXECUTION, 
  NULL VALUE_PER_ROW FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL STAT_NAME, NULL VALUE, NULL VALUE_PER_EXECUTION, 
  NULL VALUE_PER_ROW FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_DATE, 
      NULL, BEGIN_DATE_1, 
      TO_DATE('01.01.1900 00:00:00', 'dd.mm.yyyy hh24:mi:ss')), 
      BEGIN_DATE_1) BEGIN_DATE_1,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_DATE, 
      NULL, END_DATE_1, 
      SQL_PLAN_DATE ), END_DATE_1 ) END_DATE_1,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_TIME, 
      NULL, BEGIN_TIME_1, 
      TO_TIMESTAMP('01.01.1900 00:00:00', 'dd.mm.yyyy hh24:mi:ss') ), 
      BEGIN_TIME_1 ) BEGIN_TIME_1,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_TIME, 
      NULL, END_TIME_1, 
      SQL_PLAN_TIME ), END_TIME_1 ) END_TIME_1,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_DATE, 
      NULL, BEGIN_DATE_2, 
      SQL_PLAN_DATE), BEGIN_DATE_2 ) BEGIN_DATE_2,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_DATE, 
      NULL, END_DATE_2, 
      TO_DATE('31.12.9999 00:00:00', 'dd.mm.yyyy hh24:mi:ss') ), 
      END_DATE_2 ) END_DATE_2,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_TIME, 
      NULL, BEGIN_TIME_2, 
      SQL_PLAN_TIME ), BEGIN_TIME_2 ) BEGIN_TIME_2,
    DECODE(USE_SQL_PLAN_TIME, 'X', DECODE(SQL_PLAN_TIME, 
      NULL, END_TIME_2, 
      TO_TIMESTAMP('31.12.9999 00:00:00', 'dd.mm.yyyy hh24:mi:ss') ), 
      END_TIME_2 ) END_TIME_2,
    INSTANCE_NUMBER,
    SQL_ID,
    SQL_ID_NEW,
    PLAN_HASH,
    PLAN_HASH_NEW,
    SQL_PLAN_TIME,
    USE_SQL_PLAN_TIME,
    REDUCED_OUTPUT,
    DECODE(SQL_ID, SQL_ID_NEW, ' ', 'X') DIFFERENT_SQL_IDS
  FROM
  ( SELECT
      BEGIN_DATE_1,
      END_DATE_1,
      TO_TIMESTAMP(TO_CHAR(BEGIN_DATE_1, 'dd.mm.yyyy hh24:mi:ss'), 
        'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME_1,
      TO_TIMESTAMP(TO_CHAR(END_DATE_1, 'dd.mm.yyyy hh24:mi:ss'), 
        'dd.mm.yyyy hh24:mi:ss') END_TIME_1,
      BEGIN_DATE_2,
      END_DATE_2,
      TO_TIMESTAMP(TO_CHAR(BEGIN_DATE_2, 'dd.mm.yyyy hh24:mi:ss'), 
        'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME_2,
      TO_TIMESTAMP(TO_CHAR(END_DATE_2, 'dd.mm.yyyy hh24:mi:ss'), 
        'dd.mm.yyyy hh24:mi:ss') END_TIME_2,
      BI.INSTANCE_NUMBER,
      BI.SQL_ID,
      NVL(BI.SQL_ID_NEW, BI.SQL_ID) SQL_ID_NEW,
      BI.PLAN_HASH,
      BI.PLAN_HASH_NEW,
      SP.PLAN_HASH_VALUE,
      USE_SQL_PLAN_TIME,
      MAX(SP.TIMESTAMP) SQL_PLAN_TIME,
      DECODE(MAX(SP.TIMESTAMP), NULL, NULL, TO_DATE(TO_CHAR(MAX(SP.TIMESTAMP), 
        'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss')) SQL_PLAN_DATE,
      REDUCED_OUTPUT
    FROM
    ( SELECT
        TO_DATE('01.01.1111 00:00:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE_1,
        sysdate-0.5 END_DATE_1,
        sysdate-0.5 BEGIN_DATE_2,
        TO_DATE('30.12.8888 01:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE_2,
        -1 INSTANCE_NUMBER,
        'azvhhxh0kpr1s' SQL_ID,
        '' SQL_ID_NEW,
        -1 PLAN_HASH,
        -1 PLAN_HASH_NEW,
        'X' USE_SQL_PLAN_TIME,
        'X' REDUCED_OUTPUT
      FROM
        DUAL
    ) BI,
    GV$SQL_PLAN SP
    WHERE
      NVL(BI.SQL_ID_NEW, BI.SQL_ID) = SP.SQL_ID (+) 
    GROUP BY
      BEGIN_DATE_1,
      END_DATE_1,
      BEGIN_DATE_2,
      END_DATE_2,
      BI.INSTANCE_NUMBER,
      BI.SQL_ID,
      BI.SQL_ID_NEW,
      BI.PLAN_HASH,
      BI.PLAN_HASH_NEW,
      SP.PLAN_HASH_VALUE,
      BI.USE_SQL_PLAN_TIME
  )
  WHERE
    ( ( PLAN_HASH_NEW = -1 OR PLAN_HASH_NEW = PLAN_HASH_VALUE ) AND
      SQL_PLAN_TIME IS NOT NULL
    ) OR 
    USE_SQL_PLAN_TIME != 'X'
),
SNAPSHOTS AS
( SELECT 
    1 INTERVAL_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME,
    MIN(BI.SQL_ID) SQL_ID,
    MIN(BI.PLAN_HASH) PLAN_HASH,
    MIN(BI.SQL_PLAN_TIME) SQL_PLAN_TIME,
    MIN(BI.USE_SQL_PLAN_TIME) USE_SQL_PLAN_TIME
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    ( BI.INSTANCE_NUMBER = -1 OR HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
    HSS.BEGIN_INTERVAL_TIME >= BI.BEGIN_TIME_1 AND
    HSS.END_INTERVAL_TIME <= BI.END_TIME_1
  UNION ALL
  ( SELECT 
      2 INTERVAL_NUMBER,
      MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
      MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
      MAX(HSS.SNAP_ID) END_SNAP_ID,
      MAX(HSS.END_INTERVAL_TIME) END_TIME,
      MIN(BI.SQL_ID_NEW) SQL_ID,
      MIN(BI.PLAN_HASH_NEW) PLAN_HASH,
      MIN(BI.SQL_PLAN_TIME) SQL_PLAN_TIME,
      MIN(BI.USE_SQL_PLAN_TIME) USE_SQL_PLAN_TIME
    FROM 
      DBA_HIST_SNAPSHOT HSS,
      BASIS_INFO BI
    WHERE
      ( BI.INSTANCE_NUMBER = -1 OR HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
      HSS.BEGIN_INTERVAL_TIME >= BI.BEGIN_TIME_2 AND
      HSS.END_INTERVAL_TIME <= BI.END_TIME_2
  )
),
LINES AS
( SELECT  1 LINENR, 'SQL_ID'                     STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  2 LINENR, 'Module'                     STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  3 LINENR, 'Time Frame'                 STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  4 LINENR, 'Executions'                 STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  5 LINENR, 'Records'                    STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  6 LINENR, 'Disk Reads'                 STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  7 LINENR, 'Buffer Gets'                STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  8 LINENR, 'Elapsed Time (ms)'          STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT  9 LINENR, 'CPU Time (ms)'              STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT 10 LINENR, 'I/O Wait Time (ms)'         STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT 11 LINENR, 'Application Wait Time (ms)' STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 12 LINENR, 'Concurrency Wait Time (ms)' STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 13 LINENR, 'Cluster Wait Time (ms)'     STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 14 LINENR, 'PL/SQL Time (ms)'           STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 15 LINENR, 'Direct Writes'              STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 16 LINENR, 'Parse Calls'                STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 17 LINENR, 'Sharable Memory (kb)'       STAT_NAME FROM BASIS_INFO WHERE REDUCED_OUTPUT = ' ' UNION ALL
  SELECT 18 LINENR, 'Time / block read (ms)'     STAT_NAME FROM BASIS_INFO UNION ALL
  SELECT 19 LINENR, 'Buffer Quality (%)'         STAT_NAME FROM BASIS_INFO
),
SUBLINES AS
( SELECT 1 SUBLINENR, 'Interval 1' STAT_NAME FROM DUAL UNION ALL
  SELECT 2 SUBLINENR, 'Interval 2' STAT_NAME FROM DUAL UNION ALL
  SELECT 3 SUBLINENR, 'Difference 1 vs. 2' STAT_NAME FROM DUAL UNION ALL
  SELECT 4 SUBLINENR, 'Empty' STAT_NAME FROM DUAL 
),
VSQL_VALUES AS
( SELECT
    NVL(MIN(S.MODULE), 'ZZZZ') MODULE,
    NVL(SUM(S.EXECUTIONS), 0) EXECUTIONS,
    NVL(SUM(S.ROWS_PROCESSED), 0) RECORDS,
    NVL(SUM(S.DISK_READS), 0) DISK_READS,
    NVL(SUM(S.BUFFER_GETS), 0) BUFFER_GETS,
    NVL(SUM(S.ELAPSED_TIME / 1000), 0) ELAPSED_TIME_MS,
    NVL(SUM(S.CPU_TIME / 1000), 0) CPU_TIME_MS,
    NVL(SUM(S.USER_IO_WAIT_TIME / 1000), 0) IO_WAIT_TIME_MS,
    NVL(SUM(S.APPLICATION_WAIT_TIME / 1000), 0) APP_WAIT_TIME_MS,
    NVL(SUM(S.CONCURRENCY_WAIT_TIME / 1000), 0) CONC_WAIT_TIME_MS,
    NVL(SUM(S.CLUSTER_WAIT_TIME / 1000), 0) CLUSTER_WAIT_TIME_MS,
    NVL(SUM(S.PLSQL_EXEC_TIME / 1000), 0) PLSQL_TIME_MS,
    NVL(SUM(S.DIRECT_WRITES), 0) DIRECT_WRITES,
    NVL(SUM(S.PARSE_CALLS), 0) PARSE_CALLS,
    NVL(MAX(ROUND(S.SHARABLE_MEM / 1024)), 0) SHARABLE_MEM_KB,
    NVL(MIN(S.LAST_LOAD_TIME), '9999-01-01/00:00:01') LAST_LOAD_TIME
  FROM
    V$SQL S,
    BASIS_INFO BI
  WHERE
    S.SQL_ID = NVL(BI.SQL_ID_NEW, BI.SQL_ID) AND
    ( BI.PLAN_HASH_NEW = -1 OR S.PLAN_HASH_VALUE = BI.PLAN_HASH_NEW )
)
SELECT
  STAT_NAME,
  LPAD(DECODE(LINENR, 18, TO_CHAR(VALUE, 999999999990.99), 19, TO_CHAR(VALUE, 999999999990.99),
    DECODE(SUBLINENR, 3, TO_CHAR(VALUE, 999999999990.99), VALUE)) || 
    DECODE(SUBLINENR, 3, DECODE(VALUE, NULL, NULL, ' %'), NULL ), 20) VALUE,
  DECODE(LINENR, 2, SUBSTR(VALUE, 21, 20), 3, VALUE_PER_EXECUTION, 
    DECODE(SUBLINENR, 3, TO_CHAR(VALUE_PER_EXECUTION, 9999999999990.99) || 
    DECODE(VALUE_PER_EXECUTION, NULL, NULL, ' %'), 
    TO_CHAR(VALUE_PER_EXECUTION, 999999999999990.99)))  VALUE_PER_EXECUTION,
  DECODE(SUBLINENR, 3, TO_CHAR(VALUE_PER_ROW, 9999990.99) || 
    DECODE(VALUE_PER_ROW, NULL, NULL, ' %'), 
    TO_CHAR(VALUE_PER_ROW, 999999990.99))  VALUE_PER_ROW
FROM
( SELECT
    LINENR,
    SUBLINENR,
    MAX(DECODE(SUBLINENR, 1, STAT_NAME, NULL)) STAT_NAME,
    DECODE(LINENR, 
       1, DECODE(SUBLINENR, 
         1, MAX(DECODE(INTERVAL_NUMBER, 1, SQL_ID, NULL)),
         2, MAX(DECODE(INTERVAL_NUMBER, 2, SQL_ID, NULL)),
         3, NULL,
         4, NULL,
         NULL),
       2, DECODE(SUBLINENR,
         1, MAX(DECODE(INTERVAL_NUMBER, 1, MODULE, NULL)),
         2, MAX(DECODE(INTERVAL_NUMBER, 2, MODULE, NULL)),
         3, NULL,
         4, NULL,
         NULL),
       3, DECODE(SUBLINENR,
         1, MAX(DECODE(INTERVAL_NUMBER, 1, SUBSTR(TIME_FRAME, 1, 20), NULL)),
         2, MAX(DECODE(INTERVAL_NUMBER, 2, SUBSTR(TIME_FRAME, 1, 20), NULL)),
         3, NULL,
         4, NULL,
         NULL),
       4, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
       5, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
       6, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DISK_READS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DISK_READS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DISK_READS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DISK_READS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DISK_READS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
       7, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, BUFFER_GETS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, BUFFER_GETS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, BUFFER_GETS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, BUFFER_GETS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, BUFFER_GETS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
       8, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, ELAPSED_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, ELAPSED_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, ELAPSED_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, ELAPSED_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, ELAPSED_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
       9, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, CPU_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, CPU_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CPU_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, CPU_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, CPU_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      10, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, IO_WAIT_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, IO_WAIT_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, IO_WAIT_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, IO_WAIT_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, IO_WAIT_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      11, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, APP_WAIT_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, APP_WAIT_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, APP_WAIT_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, APP_WAIT_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, APP_WAIT_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      12, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, CONC_WAIT_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, CONC_WAIT_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CONC_WAIT_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, CONC_WAIT_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, CONC_WAIT_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      13, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, CLUSTER_WAIT_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, CLUSTER_WAIT_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CLUSTER_WAIT_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, CLUSTER_WAIT_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, CLUSTER_WAIT_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      14, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, PLSQL_TIME_MS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, PLSQL_TIME_MS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, PLSQL_TIME_MS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, PLSQL_TIME_MS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, PLSQL_TIME_MS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      15, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DIRECT_WRITES, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DIRECT_WRITES, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DIRECT_WRITES, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DIRECT_WRITES, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DIRECT_WRITES, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      16, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, PARSE_CALLS, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, PARSE_CALLS, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, PARSE_CALLS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, PARSE_CALLS, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, PARSE_CALLS, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      17, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, SHARABLE_MEM_KB, NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, SHARABLE_MEM_KB, NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, SHARABLE_MEM_KB, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, SHARABLE_MEM_KB, NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, SHARABLE_MEM_KB, NULL)) * 100 - 100),
         4, NULL,
         NULL),
      18, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(DISK_READS, 0, 0, IO_WAIT_TIME_MS / DISK_READS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(DISK_READS, 0, 0, IO_WAIT_TIME_MS / DISK_READS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, IO_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DISK_READS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, DISK_READS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(DISK_READS, 0, 0, IO_WAIT_TIME_MS / DISK_READS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(DISK_READS, 0, 0, IO_WAIT_TIME_MS / DISK_READS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      19, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100), NULL)),
         3, NULL,
         4, NULL,
         NULL),
    NULL) VALUE,  
    DECODE(LINENR, 
       1, NULL,
       2, NULL,
       3, DECODE(SUBLINENR,
         1, MAX(DECODE(INTERVAL_NUMBER, 1, SUBSTR(TIME_FRAME, 21, 19), NULL)),
         2, MAX(DECODE(INTERVAL_NUMBER, 2, SUBSTR(TIME_FRAME, 21, 19), NULL)),
         3, NULL,
         4, NULL,
         NULL),
       4, NULL,
       5, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, RECORDS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, RECORDS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, RECORDS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, RECORDS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       6, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, DISK_READS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, DISK_READS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DISK_READS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, DISK_READS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, DISK_READS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       7, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, BUFFER_GETS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, BUFFER_GETS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, BUFFER_GETS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, BUFFER_GETS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, BUFFER_GETS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       8, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, ELAPSED_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, ELAPSED_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, ELAPSED_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, ELAPSED_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, ELAPSED_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       9, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, CPU_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, CPU_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CPU_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, CPU_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, CPU_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      10, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, IO_WAIT_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, IO_WAIT_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, IO_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, IO_WAIT_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, IO_WAIT_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      11, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, APP_WAIT_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, APP_WAIT_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, APP_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, APP_WAIT_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, APP_WAIT_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      12, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, CONC_WAIT_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, CONC_WAIT_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CONC_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, CONC_WAIT_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, CONC_WAIT_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      13, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, CLUSTER_WAIT_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, CLUSTER_WAIT_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CLUSTER_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, CLUSTER_WAIT_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, CLUSTER_WAIT_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      14, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, PLSQL_TIME_MS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, PLSQL_TIME_MS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, PLSQL_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, PLSQL_TIME_MS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, PLSQL_TIME_MS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      15, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, DIRECT_WRITES / EXECUTIONS), NULL)),
        2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, DIRECT_WRITES / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DIRECT_WRITES, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, DIRECT_WRITES / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, DIRECT_WRITES / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      16, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, PARSE_CALLS / EXECUTIONS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, PARSE_CALLS / EXECUTIONS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, PARSE_CALLS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, EXECUTIONS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, EXECUTIONS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(EXECUTIONS, 0, 0, PARSE_CALLS / EXECUTIONS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(EXECUTIONS, 0, 0, PARSE_CALLS / EXECUTIONS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      17, NULL,
      18, NULL,
      19, NULL,
    NULL) VALUE_PER_EXECUTION,
    DECODE(LINENR, 
       1, NULL,
       2, NULL,
       3, NULL,
       4, NULL,
       5, NULL,
       6, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, DISK_READS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, DISK_READS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DISK_READS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, DISK_READS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, DISK_READS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       7, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, BUFFER_GETS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, BUFFER_GETS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, BUFFER_GETS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, BUFFER_GETS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, BUFFER_GETS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       8, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, ELAPSED_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, ELAPSED_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, ELAPSED_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, ELAPSED_TIME_MS / RECORDS), NULL)) /
              SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, ELAPSED_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
       9, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, CPU_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, CPU_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CPU_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, CPU_TIME_MS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, CPU_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      10, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, IO_WAIT_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, IO_WAIT_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, IO_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, IO_WAIT_TIME_MS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, IO_WAIT_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      11, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, APP_WAIT_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, APP_WAIT_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, APP_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, APP_WAIT_TIME_MS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, APP_WAIT_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      12, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, CONC_WAIT_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, CONC_WAIT_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CONC_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, CONC_WAIT_TIME_MS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, CONC_WAIT_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      13, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, CLUSTER_WAIT_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, CLUSTER_WAIT_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, CLUSTER_WAIT_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, CLUSTER_WAIT_TIME_MS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, CLUSTER_WAIT_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      14, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, PLSQL_TIME_MS / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, PLSQL_TIME_MS / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, PLSQL_TIME_MS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, PLSQL_TIME_MS / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, PLSQL_TIME_MS / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      15, DECODE(SUBLINENR, 
         1, SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, DIRECT_WRITES / RECORDS), NULL)),
         2, SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, DIRECT_WRITES / RECORDS), NULL)),
         3, DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, DIRECT_WRITES, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 1, RECORDS, NULL)), 0, 0,
            DECODE(SUM(DECODE(INTERVAL_NUMBER, 2, RECORDS, NULL)), 0, 0,
            SUM(DECODE(INTERVAL_NUMBER, 2, DECODE(RECORDS, 0, 0, DIRECT_WRITES / RECORDS), NULL)) /
            SUM(DECODE(INTERVAL_NUMBER, 1, DECODE(RECORDS, 0, 0, DIRECT_WRITES / RECORDS), NULL)) * 100 - 100))),
         4, NULL,
         NULL),
      16, NULL,
      17, NULL,
      18, NULL,
      19, NULL,
    NULL) VALUE_PER_ROW
  FROM
  ( SELECT
      SS.INTERVAL_NUMBER INTERVAL_NUMBER,
      SS.SQL_ID SQL_ID, 
      DECODE(HSQ.SQL_ID, NULL, MIN(VSV.MODULE),                      MIN(HSQ.MODULE))                           MODULE,
      DECODE(HSQ.SQL_ID, NULL, SUM(VSV.EXECUTIONS),                  SUM(HSQ.EXECUTIONS_DELTA))                 EXECUTIONS,
      DECODE(HSQ.SQL_ID, NULL, SUM(VSV.RECORDS),                     SUM(HSQ.ROWS_PROCESSED_DELTA))             RECORDS,
      DECODE(HSQ.SQL_ID, NULL, SUM(VSV.DISK_READS),                  SUM(HSQ.DISK_READS_DELTA))                 DISK_READS,
      DECODE(HSQ.SQL_ID, NULL, SUM(VSV.BUFFER_GETS),                 SUM(HSQ.BUFFER_GETS_DELTA))                BUFFER_GETS,
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.ELAPSED_TIME_MS)),      ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000)) ELAPSED_TIME_MS,
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.CPU_TIME_MS)),          ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000))     CPU_TIME_MS,
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.IO_WAIT_TIME_MS)),      ROUND(SUM(HSQ.IOWAIT_DELTA) / 1000))       IO_WAIT_TIME_MS,
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.APP_WAIT_TIME_MS)),     ROUND(SUM(HSQ.APWAIT_DELTA) / 1000))       APP_WAIT_TIME_MS, 
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.CONC_WAIT_TIME_MS)),    ROUND(SUM(HSQ.CCWAIT_DELTA) / 1000))       CONC_WAIT_TIME_MS,
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.CLUSTER_WAIT_TIME_MS)), ROUND(SUM(HSQ.CLWAIT_DELTA) / 1000))       CLUSTER_WAIT_TIME_MS,
      DECODE(HSQ.SQL_ID, NULL, ROUND(SUM(VSV.PLSQL_TIME_MS)),        ROUND(SUM(HSQ.PLSEXEC_TIME_DELTA) / 1000)) PLSQL_TIME_MS,
      DECODE(HSQ.SQL_ID, NULL, SUM(VSV.DIRECT_WRITES),               SUM(HSQ.DIRECT_WRITES_DELTA))              DIRECT_WRITES,
      DECODE(HSQ.SQL_ID, NULL, SUM(VSV.PARSE_CALLS),                 SUM(HSQ.PARSE_CALLS_DELTA))                PARSE_CALLS,
      DECODE(HSQ.SQL_ID, NULL, MAX(ROUND(VSV.SHARABLE_MEM_KB)),      MAX(ROUND(HSQ.SHARABLE_MEM / 1024)))       SHARABLE_MEM_KB,
      L.LINENR LINENR,
      S.SUBLINENR SUBLINENR,
      SS.PLAN_HASH,
      DECODE(SS.PLAN_HASH, -1, -1, HSQ.PLAN_HASH_VALUE) PLAN_HASH_VALUE,
      L.STAT_NAME STAT_NAME,
      DECODE(HSQ.SQL_ID, NULL, 
        TO_CHAR(MIN(TO_DATE(VSV.LAST_LOAD_TIME, 
          'yyyy-mm-dd/hh24:mi:ss')), 
          'dd.mm.yyyy hh24:mi:ss') || '-' || 
          TO_CHAR(SYSDATE, 'dd.mm.yyyy hh24:mi:ss'),
        TO_CHAR(MIN(SS.BEGIN_TIME), 'dd.mm.yyyy hh24:mi:ss') || '-' ||
        TO_CHAR(MAX(SS.END_TIME), 'dd.mm.yyyy hh24:mi:ss')) TIME_FRAME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ, 
      SNAPSHOTS SS,
      LINES L,
      SUBLINES S,
      VSQL_VALUES VSV
    WHERE
      HSQ.SNAP_ID (+) BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      HSQ.SQL_ID (+) = SS.SQL_ID AND
      NOT ( L.LINENR = 1              AND S.SUBLINENR = 2 AND BI.DIFFERENT_SQL_IDS = ' ' OR
            L.LINENR = 2              AND S.SUBLINENR = 2 OR
            L.LINENR IN (1, 2, 3, 18) AND S.SUBLINENR = 3 OR
            L.LINENR = 19             AND S.SUBLINENR = 4 )
    GROUP BY
      HSQ.SQL_ID,
      DECODE(SS.PLAN_HASH, -1, -1, HSQ.PLAN_HASH_VALUE),
      SS.SQL_ID,
      SS.PLAN_HASH,
      SS.INTERVAL_NUMBER,
      L.LINENR,
      S.SUBLINENR,
      L.STAT_NAME
  )
  WHERE
    PLAN_HASH = -1 OR PLAN_HASH = PLAN_HASH_VALUE OR PLAN_HASH_VALUE IS NULL
  GROUP BY
    LINENR,
    SUBLINENR,
    STAT_NAME
  ORDER BY
    LINENR,
    SUBLINENR
  )
));
