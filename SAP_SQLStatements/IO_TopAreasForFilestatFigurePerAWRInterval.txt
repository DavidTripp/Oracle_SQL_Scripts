SELECT NULL BEGIN_TIME, NULL VALUE_TOTAL, NULL VALUE_PER_S, NULL AREA_1, NULL VALUE_1,
  NULL PCT_1, NULL AREA_2, NULL VALUE_2, NULL PCT_2, NULL AREA_3, NULL VALUE_3, NULL PCT_3, 
  NULL AREA_4, NULL VALUE_4, NULL PCT_4, NULL AREA_5, NULL VALUE_5, NULL PCT_5
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL VALUE_TOTAL, NULL VALUE_PER_S, NULL AREA_1, NULL VALUE_1,
  NULL PCT_1, NULL AREA_2, NULL VALUE_2, NULL PCT_2, NULL AREA_3, NULL VALUE_3, NULL PCT_3, 
  NULL AREA_4, NULL VALUE_4, NULL PCT_4, NULL AREA_5, NULL VALUE_5, NULL PCT_5
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ INLINE */  /* hint sometimes required to push SNAP_IDs into DBA_HIST_ACTIVE_SESS_HISTORY */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    FILE_NAME,
    TABLESPACE_NAME,
    KEY_FIGURE,
    AGGREGATE_BY
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,             /* -1 for all instances */
      TO_DATE('01.01.1000 00:00:00', 
        'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 02:00:00', 
        'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,            /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      '%' FILE_NAME,
      '%' TABLESPACE_NAME,
      'Single block reads' KEY_FIGURE,       
            /* 'Reads', 'Writes', 'Single block reads', 'Multi block reads', 'Read time (s)', 
               'Write time (s)', 'Single block read time (s)', 'Blocks read', 'Blocks written' */
      'SAPDATA' AGGREGATE_BY       /* FILE, TABLESPACE, DRIVE or SAPDATA */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE ) 
),
SNAPSHOTS AS
( SELECT 
    HSS2.DBID,
    HSS2.INSTANCE_NUMBER INST_ID,
    HSS2.SNAP_ID,
    FIRST_VALUE(HSS2.SNAP_ID) OVER 
      (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
    HSS2.BEGIN_INTERVAL_TIME,
    HSS2.END_INTERVAL_TIME,
    TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
               TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
      INTERVAL_SECONDS,
    DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 
      'NO', 'YES') RESTART
  FROM 
    BASIS_INFO BI,
    DBA_HIST_SNAPSHOT HSS1, 
    DBA_HIST_SNAPSHOT HSS2
  WHERE
    BI.DBID = HSS2.DBID AND
    HSS2.DBID = HSS1.DBID (+) AND
    ( BI.INSTANCE_NUMBER = -1 OR
      BI.INSTANCE_NUMBER = HSS2.INSTANCE_NUMBER ) AND
    HSS2.INSTANCE_NUMBER = HSS1.INSTANCE_NUMBER (+) AND
    HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND 
      BI.END_TIME AND
    HSS2.SNAP_ID - 1 = HSS1.SNAP_ID (+)
),
FILESTAT_HELPER AS
( SELECT
    *
  FROM
    DBA_HIST_FILESTATXS 
  UNION ALL
  ( SELECT
      *
    FROM
      DBA_HIST_TEMPSTATXS 
  )
),
FILESTAT AS
( SELECT /*+ MATERIALIZE */
    SS2.BEGIN_INTERVAL_TIME,
    SS2.END_INTERVAL_TIME,
    SS2.INTERVAL_SECONDS,
    SS2.INST_ID,
    FS2.SNAP_ID,
    FS2.FILENAME FILE_NAME,
    FS2.TSNAME TABLESPACE_NAME,
    DECODE(INSTR(UPPER(FS2.FILENAME), 'SAPDATA'), 0, 
      DECODE(INSTR(UPPER(FS2.FILENAME), 'SAPTEMP'), 0, 'n/a',
      REGEXP_REPLACE(FS2.FILENAME, '.*(saptemp[0-9]+).*', '\1', 1, 1, 'i')),
      REGEXP_REPLACE(FS2.FILENAME, '.*(sapdata[0-9]+).*', '\1', 1, 1, 'i'))
      SAPDATA,
    DECODE(SUBSTR(FS2.FILENAME, 2, 1), ':', 
      SUBSTR(FS2.FILENAME, 1, 2), 'n/a') DRIVE,
    FS2.PHYRDS - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.PHYRDS) READS,
    FS2.PHYWRTS - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.PHYWRTS) WRITES,
    FS2.SINGLEBLKRDS - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.SINGLEBLKRDS) SB_READS,
    FS2.PHYRDS - FS2.SINGLEBLKRDS - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.PHYRDS - FS1.SINGLEBLKRDS) MB_READS,
    (FS2.READTIM - DECODE(SS2.RESTART, 'YES', 0,  
      FS1.READTIM)) / 100 READTIME_S,
    (FS2.WRITETIM - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.WRITETIM)) / 100 WRITETIME_S,
    (FS2.SINGLEBLKRDTIM - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.SINGLEBLKRDTIM)) / 100 SB_READTIME_S,
    FS2.PHYBLKRD - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.PHYBLKRD) BLOCKS_READ,
    FS2.PHYBLKWRT - DECODE(SS2.RESTART, 'YES', 0, 
      FS1.PHYBLKWRT) BLOCKS_WRITTEN,
    DECODE(SS2.RESTART, 'YES', 
      DECODE(FS2.PHYRDS - FS2.SINGLEBLKRDS, 0, 0, 
      (FS2.PHYBLKRD - FS2.SINGLEBLKRDS) / 
      (FS2.PHYRDS - FS2.SINGLEBLKRDS)),
      DECODE(FS2.PHYRDS - FS2.SINGLEBLKRDS - 
      (FS1.PHYRDS - FS1.SINGLEBLKRDS), 0, 0,
      (FS2.PHYBLKRD - FS2.SINGLEBLKRDS - 
      (FS1.PHYBLKRD - FS1.SINGLEBLKRDS)) / 
      (FS2.PHYRDS - FS2.SINGLEBLKRDS - 
      (FS1.PHYRDS - FS1.SINGLEBLKRDS)))) BLKS_PER_MBR,
    DECODE(SS2.RESTART, 'YES', DECODE(FS2.PHYRDS, 0, 0, 
      FS2.READTIM * 10 / FS2.PHYRDS),
      DECODE(FS2.PHYRDS - FS1.PHYRDS, 0, 0, 
      (FS2.READTIM - FS1.READTIM) * 10 / 
      (FS2.PHYRDS - FS1.PHYRDS))) AVG_BR_MS,
    DECODE(SS2.RESTART, 'YES', DECODE(FS2.SINGLEBLKRDS, 0, 0, 
        FS2.SINGLEBLKRDTIM * 10 / 
      FS2.SINGLEBLKRDS), DECODE(FS2.SINGLEBLKRDS - 
      FS1.SINGLEBLKRDS, 0, 0, 
      (FS2.SINGLEBLKRDTIM - FS1.SINGLEBLKRDTIM) * 10 / 
      (FS2.SINGLEBLKRDS - FS1.SINGLEBLKRDS))) AVG_SBR_MS
  FROM
    BASIS_INFO BI,
    FILESTAT_HELPER FS1,
    FILESTAT_HELPER FS2,
    SNAPSHOTS SS1,
    SNAPSHOTS SS2
  WHERE
    BI.DBID = FS1.DBID AND
    BI.DBID = FS2.DBID AND
    BI.DBID = SS1.DBID AND
    BI.DBID = SS2.DBID AND
    ( BI.INSTANCE_NUMBER = -1 OR 
      FS1.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
    FS2.INSTANCE_NUMBER = FS1.INSTANCE_NUMBER AND
    SS1.INST_ID = FS1.INSTANCE_NUMBER AND
    SS2.INST_ID = FS1.INSTANCE_NUMBER AND
    FS1.SNAP_ID = FS2.SNAP_ID - 1 AND
    FS1.SNAP_ID = SS1.SNAP_ID AND
    SS1.SNAP_ID = SS2.SNAP_ID - 1 AND
    FS1.FILENAME = FS2.FILENAME AND
    FS1.TSNAME LIKE BI.TABLESPACE_NAME AND
    FS1.FILENAME LIKE BI.FILE_NAME
)
SELECT
  'KEY FIGURE:' BEGIN_TIME,
  KEY_FIGURE VALUE_TOTAL,
  NULL VALUE_PER_S,
  NULL AREA_1,
  NULL VALUE_1,
  NULL PCT_1,
  NULL AREA_2,
  NULL VALUE_2,
  NULL PCT_2,
  NULL AREA_3,
  NULL VALUE_3,
  NULL PCT_3,
  NULL AREA_4,
  NULL VALUE_4,
  NULL PCT_4,
  NULL AREA_5,
  NULL VALUE_5,
  NULL PCT_5
FROM
  BASIS_INFO
UNION ALL
( SELECT
    NULL BEGIN_TIME,
    NULL VALUE_TOTAL,
    NULL VALUE_PER_S,
    NULL AREA_1,
    NULL VALUE_1,
    NULL PCT_1,
    NULL AREA_2,
    NULL VALUE_2,
    NULL PCT_2,
    NULL AREA_3,
    NULL VALUE_3,
    NULL PCT_3,
    NULL AREA_4,
    NULL VALUE_4,
    NULL PCT_4,
    NULL AREA_5,
    NULL VALUE_5,
    NULL PCT_5
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    *
  FROM
  ( SELECT
      TO_CHAR(BEGIN_INTERVAL_TIME, 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
      TO_CHAR(VALUE_TOTAL, 99999999999999990) VALUE_TOTAL,
      TO_CHAR(VALUE_PER_S, 9999990.99) VALUE_PER_S,
      AREA_1,
      TO_CHAR(VALUE_1, 99999990) VALUE_1,
      TO_CHAR(PCT_1, 990.99) PCT_1,
      AREA_2,
      TO_CHAR(VALUE_2, 99999990) VALUE_2,
      TO_CHAR(PCT_2, 990.99) PCT_2,
      AREA_3,
      TO_CHAR(VALUE_3, 99999990) VALUE_3,
      TO_CHAR(PCT_3, 990.99) PCT_3,
      AREA_4,
      TO_CHAR(VALUE_4, 99999990) VALUE_4,
      TO_CHAR(PCT_4, 990.99) PCT_4,
      AREA_5,
      TO_CHAR(VALUE_5, 99999990) VALUE_5,
      TO_CHAR(PCT_5, 990.99) PCT_5
    FROM
    ( SELECT
        BEGIN_INTERVAL_TIME,
        SNAP_ID,
        SUM(SUM(VALUE)) OVER (PARTITION BY SNAP_ID) VALUE_TOTAL,
        SUM(SUM(VALUE)) OVER (PARTITION BY SNAP_ID) / INTERVAL_SECONDS VALUE_PER_S,
        AREA AREA_1,
        SUM(VALUE) VALUE_1,
        SUM(PERCENT) PCT_1,
        LEAD(AREA, 1) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) AREA_2,
        LEAD(SUM(VALUE), 1) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) VALUE_2,
        LEAD(SUM(PERCENT), 1) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) PCT_2,
        LEAD(AREA, 2) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) AREA_3,
        LEAD(SUM(VALUE), 2) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) VALUE_3,
        LEAD(SUM(PERCENT), 2) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) PCT_3,
        LEAD(AREA, 3) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) AREA_4,
        LEAD(SUM(VALUE), 3) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) VALUE_4,
        LEAD(SUM(PERCENT), 3) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) PCT_4,
        LEAD(AREA, 4) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) AREA_5,
        LEAD(SUM(VALUE), 4) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) VALUE_5,
        LEAD(SUM(PERCENT), 4) OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) PCT_5,
        ROW_NUMBER() OVER (PARTITION BY SNAP_ID ORDER BY SUM(VALUE) DESC) POSITION
      FROM
      ( SELECT
          BEGIN_INTERVAL_TIME,
          SNAP_ID,
          INTERVAL_SECONDS,
          AREA,
          VALUE,
          RATIO_TO_REPORT(VALUE) OVER (PARTITION BY SNAP_ID) * 100 PERCENT
        FROM
        ( SELECT
            FS.BEGIN_INTERVAL_TIME,
            FS.SNAP_ID,
            FS.INTERVAL_SECONDS,
            FS.INST_ID,
            BI.KEY_FIGURE,
            DECODE ( BI.AGGREGATE_BY,
              'FILE',                            FS.FILE_NAME,
              'TABLESPACE',                      FS.TABLESPACE_NAME,
              'DRIVE',                           FS.DRIVE,
              'SAPDATA',                         FS.SAPDATA ) AREA,
            DECODE ( BI.KEY_FIGURE,
              'Reads',                           FS.READS,
              'Writes',                          FS.WRITES,
              'Single block reads',              FS.SB_READS,
              'Multi block reads',               FS.MB_READS,
              'Read time (s)',                   FS.READTIME_S,
              'Write time (s)',                  FS.WRITETIME_S,
              'Single block read time (s)',      FS.SB_READTIME_S,
              'Blocks read',                     FS.BLOCKS_READ,
              'Blocks written',                  FS.BLOCKS_WRITTEN ) VALUE
          FROM
            BASIS_INFO BI,
            FILESTAT FS  
        )
      )
      GROUP BY
        BEGIN_INTERVAL_TIME,
        SNAP_ID,
        INTERVAL_SECONDS,
        AREA
    )
    WHERE
      POSITION = 1
    ORDER BY
      SNAP_ID DESC
  )
) 
));

