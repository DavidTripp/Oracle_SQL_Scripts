SELECT NULL TIMEFRAME, NULL SECONDS, NULL OCCURRENCES, 
  NULL OCCURRENCES_PER_S FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL TIMEFRAME, NULL SECONDS, NULL OCCURRENCES, 
  NULL OCCURRENCES_PER_S FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    STAT_NAME,
    THRESHOLD_VALUE_PER_S
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      TO_DATE('01.01.1000 00:00:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 01:05:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   
      -1 END_SNAP_ID,
      'table scans (long tables)' STAT_NAME,
      -1 THRESHOLD_VALUE_PER_S
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    DBID,
    INSTANCE_NUMBER,
    SNAP_ID,
    MIN_SNAP_ID,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    SUM(INTERVAL_SECONDS) OVER () TOTAL_SECONDS,
    RESTART
  FROM
  ( SELECT
      HSS2.DBID,
      HSS2.INSTANCE_NUMBER,
      HSS2.SNAP_ID,
      FIRST_VALUE(HSS2.SNAP_ID) OVER (ORDER BY HSS2.SNAP_ID) MIN_SNAP_ID,
      HSS2.BEGIN_INTERVAL_TIME,
      HSS2.END_INTERVAL_TIME,
      TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
        TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
        86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
                 TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
        INTERVAL_SECONDS,
      DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
    FROM 
      DBA_HIST_SNAPSHOT HSS1, 
      DBA_HIST_SNAPSHOT HSS2,
      BASIS_INFO BI
    WHERE
      BI.DBID = HSS2.DBID AND
      HSS1.DBID (+) = HSS2.DBID AND
      BI.INSTANCE_NUMBER = HSS2.INSTANCE_NUMBER AND
      HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
      HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
  )
)
SELECT
  'STAT_NAME: ' || STAT_NAME TIMEFRAME,
  NULL SECONDS,
  NULL OCCURRENCES,
  NULL OCCURRENCES_PER_S
FROM
  BASIS_INFO
UNION ALL
( SELECT
    'THRESHOLD / S: ' || THRESHOLD_VALUE_PER_S TIMEFRAME,
    NULL SECONDS,
    NULL OCCURRENCES,
    NULL OCCURRENCES_PER_S
  FROM
    BASIS_INFO
  WHERE
    THRESHOLD_VALUE_PER_S > 0
)
UNION ALL
( SELECT
    NULL TIMEFRAME,
    NULL SECONDS,
    NULL OCCURRENCES,
    NULL OCCURRENCES_PER_S
  FROM
    DUAL
)
UNION ALL
( SELECT
    TIMEFRAME,
    SECONDS,
    OCCURRENCES,
    OCCURRENCES_PER_S
  FROM
  ( SELECT
      TO_CHAR(BEGIN_INTERVAL_TIME, 'dd.mm.yyyy hh24:mi:ss') || '-' ||
        TO_CHAR(END_INTERVAL_TIME, 'dd.mm.yyyy hh24:mi:ss') TIMEFRAME,
      LPAD(INTERVAL_SECONDS, 7) SECONDS,
      LPAD(OCCURRENCES, 13) OCCURRENCES,
      TO_CHAR(OCCURRENCES / INTERVAL_SECONDS, 999999999999999990.99) OCCURRENCES_PER_S
    FROM
    ( SELECT 
        SS.SNAP_ID SNAP_ID,
        SS.BEGIN_INTERVAL_TIME BEGIN_INTERVAL_TIME,
        SS.END_INTERVAL_TIME END_INTERVAL_TIME,
        SS.INTERVAL_SECONDS INTERVAL_SECONDS,
        HSY2.STAT_NAME STAT_NAME,
        BI.THRESHOLD_VALUE_PER_S,
        DECODE(SS.RESTART, 'NO', HSY2.VALUE -
          NVL(HSY1.VALUE, 0), HSY2.VALUE) OCCURRENCES
      FROM 
        BASIS_INFO BI,
        DBA_HIST_SYSSTAT HSY1, 
        DBA_HIST_SYSSTAT HSY2,
        SNAPSHOTS SS
      WHERE
        HSY2.DBID = SS.DBID AND
        HSY1.DBID (+) = HSY2.DBID AND
        HSY2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
        HSY1.INSTANCE_NUMBER (+) = HSY2.INSTANCE_NUMBER AND
        HSY2.SNAP_ID = SS.SNAP_ID AND
        HSY1.SNAP_ID (+) = HSY2.SNAP_ID - 1 AND
        HSY1.STAT_NAME (+) = HSY2.STAT_NAME AND
        HSY2.SNAP_ID != SS.MIN_SNAP_ID AND
        HSY2.STAT_NAME = BI.STAT_NAME
    )
    WHERE
      OCCURRENCES / INTERVAL_SECONDS >= THRESHOLD_VALUE_PER_S
    ORDER BY 
      END_INTERVAL_TIME DESC
  )
)
));
