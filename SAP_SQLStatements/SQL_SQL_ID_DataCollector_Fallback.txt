SELECT /*
  SQL_ID DATA COLLECTOR for Oracle >= 10.2.0.2
  Description:  Collection of comprehensive information for a SQL statement with a given SQL_ID
  Version:      2.55 (January, 6th 2011)
  Author:       Martin Frauendorfer (SAP Active Global Support)
  Feedback:     martin.frauendorfer@sap.com
  Performance:  Runtime up to 2 minutes is acceptable, in case of longer runtime check the following:
                - Proper Oracle parameters (SAP note 830576)
                - Current Oracle patches (10.2.0.2: SAP note 981875; 10.2.0.4: SAP note 1137346)
                - Existence of DDIC and fixed object statistics (SAP note 838725)
                - Delete DBA_SEGMENTS related section below (between "REMOVE START" and "REMOVE END")
  Restrictions: - Oracle Diagnostic Pack must be licensed
                - In RAC environments only the current instance is taken into account.
  Usage:
    DBACOCKPIT (SQL Command Editor):
      Replace all occurrences of &&sql_id below with the SQL_ID you want to analyze
      Execute
      Choose monospaced output (e.g. "List" -> "Print Preview" or "List Output") for better readability
    SQLPLUS:
      Make sure that client terminal has configured width of >= 250 characters
      sqlplus / as sysdba
      COLUMN PART1 FORMAT A80
      COLUMN PART2 FORMAT A80
      COLUMN PART3 FORMAT A80
      SET LINESIZE 250
      SET PAGESIZE 0
      SET VERIFY OFF
      SPOOL sql.out
      @sql.txt
      <sql_id>
      SPOOL OFF
      EXIT
      Display generated text file sql.out
*/
  /*+ OPT_PARAM('_PUSH_JOIN_UNION_VIEW', 'FALSE') OPT_PARAM('OPTIMIZER_DYNAMIC_SAMPLING', 6) */
  /* _PUSH_JOIN_UNION_VIEW hint is necessary to avoid ORA-00600 [12811] (bug 6408017) */
  SUBSTR(LINE, 1, 80) PART1,
  SUBSTR(LINE, 81, 80) PART2,
  SUBSTR(LINE, 161, 80) PART3
FROM
(
SELECT
  'DETAIL INFORMATION FOR SQL_ID: &&sql_id' LINE
FROM
  DUAL
UNION ALL
( SELECT
    RPAD('EVALUATION TIME:', 31) || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM DUAL
)
UNION ALL
( SELECT
    RPAD('DATABASE NAME:', 31) || NAME
  FROM
    V$DATABASE
)
UNION ALL
( SELECT
    RPAD('INSTANCE NAME:', 31) || INSTANCE_NAME
  FROM
    V$INSTANCE
)
UNION ALL
( SELECT
    RPAD('VERSION:', 31) || VERSION
  FROM
    V$INSTANCE
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL STATEMENT (V$SQLSTATS, DBA_HIST_SQLTEXT, V$SQL):'
  FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( WITH SQL_TEXT_LOB AS 
    ( SELECT
        SQL_FULLTEXT SQL_TEXT,
        DBMS_LOB.GETLENGTH("SQL_FULLTEXT") LENGTH,
        LENGTH(REGEXP_REPLACE(SQL_FULLTEXT, '[^ ]', '')) NUM_BLANKS
      FROM
        V$SQLSTATS
      WHERE
        SQL_ID = '&&sql_id' 
      UNION ALL 
      ( SELECT
          SQL_TEXT,
          DBMS_LOB.GETLENGTH("SQL_TEXT") LENGTH,
          LENGTH(REGEXP_REPLACE(SQL_TEXT, '[^ ]', '')) NUM_BLANKS
        FROM
          DBA_HIST_SQLTEXT
        WHERE
          SQL_ID = '&&sql_id' AND
          NOT EXISTS 
          ( SELECT 1 FROM V$SQLSTATS WHERE SQL_ID = '&&sql_id' )
      )
      UNION ALL 
      ( SELECT
          SQL_FULLTEXT SQL_TEXT,
          DBMS_LOB.GETLENGTH("SQL_FULLTEXT") LENGTH,
          LENGTH(REGEXP_REPLACE(SQL_FULLTEXT, '[^ ]', '')) NUM_BLANKS
        FROM
          V$SQL
        WHERE
          SQL_ID = '&&sql_id' AND
          NOT EXISTS 
          ( SELECT 1 FROM V$SQLSTATS WHERE SQL_ID = '&&sql_id' ) AND
          NOT EXISTS
          ( SELECT 1 FROM DBA_HIST_SQLTEXT WHERE SQL_ID = '&&sql_id' ) 
      )      
    ),
    START_POSITIONS AS
    ( SELECT
        DECODE(ROWNUM, 
          1, 1, 
          NUM_BLANKS + 2, LENGTH + 1, 
          DBMS_LOB.INSTR(STL.SQL_TEXT, ' ', 1, ROWNUM - 1) + 1) POS
      FROM
        SQL_TEXT_LOB STL,
        ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 
          ( SELECT NUM_BLANKS + 2 FROM SQL_TEXT_LOB)
        )
    ),
    START_END_POSITIONS AS
    ( SELECT
        POS1,
        NVL(POS2, POS_OVERFLOW) POS2
      FROM
      ( SELECT
          SP1.POS POS1,
          MAX(SP2.POS) POS2,
          MIN(SP3.POS) POS_OVERFLOW
        FROM
          START_POSITIONS SP1,
          START_POSITIONS SP2,
          START_POSITIONS SP3
        WHERE
          SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + 80 AND
          SP3.POS > SP1.POS
        GROUP BY
          SP1.POS
      )
    ),
    START_END_LINE_POSITIONS AS
    ( SELECT
        POS1,
        POS2
      FROM
        START_END_POSITIONS
      START WITH
        POS1 = 1
      CONNECT BY PRIOR 
        POS2 = POS1
    )
    SELECT
      DBMS_LOB.SUBSTR(STL.SQL_TEXT, SEP.POS2 - SEP.POS1, SEP.POS1) LINE
    FROM
      START_END_LINE_POSITIONS SEP, 
      SQL_TEXT_LOB STL
    ORDER BY SEP.POS1
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL CACHE (V$SQLSTATS, DBA_HIST_SQLSTAT):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('END_INTERVAL_TIME', 19) ||
    LPAD('EXECUTIONS', 11) ||
    LPAD('RECORDS', 12) ||
    LPAD('REC/EXEC', 12) ||
    LPAD('DISK_READS', 11) ||
    LPAD('DISK_READS/EXE', 15) ||
    LPAD('BUFFER_GETS', 12) ||
    LPAD('BUFFER_GETS/EXE', 16) ||
    LPAD('BUFFER_GETS/REC', 16) ||
    LPAD('ELA_TIME_MS', 12) ||
    LPAD('ELA_TIME_MS/EXE', 16) ||
    LPAD('CPU_TIME_MS', 12) ||
    LPAD('CPU_TIME_MS/EXE', 16) ||
    LPAD('PARSE_MS', 12) ||
    LPAD('PARSES', 7) ||
    RPAD(' MODULE', 41) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('V$SQL (Child:' || TO_CHAR(CHILD_NUMBER, 90) || ')', 19) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ROWS_PROCESSED, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)), 
      99999990.99) ||
    LPAD(DISK_READS, 11) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),  
      99999999990.99) ||
    LPAD(BUFFER_GETS, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)), 
      999999999990.99) ||
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED, 
      2)), 999999999990.99) ||
    LPAD(ROUND(ELAPSED_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS, 
      2)), 999999999990.99) ||
    LPAD(ROUND(CPU_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(CPU_TIME / 1000 / EXECUTIONS, 2)), 
      999999999990.99) ||
    LPAD('not avail.', 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
    V$SQL
  WHERE
    SQL_ID = '&&sql_id'
)
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 19) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ROWS_PROCESSED, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)), 
      99999990.99) ||
    LPAD(DISK_READS, 11) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),  
      99999999990.99) ||
    LPAD(BUFFER_GETS, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)), 
      999999999990.99) ||
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED, 
      2)), 999999999990.99) ||
    LPAD(ROUND(ELAPSED_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS, 
      2)), 999999999990.99) ||
    LPAD(ROUND(CPU_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(CPU_TIME / 1000 / EXECUTIONS, 2)), 
      999999999990.99) ||
    LPAD(ROUND(AVG_HARD_PARSE_TIME / 1000, 2), 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' not available in V$SQLSTATS', 41) LINE
  FROM
    V$SQLSTATS
  WHERE
    SQL_ID = '&&sql_id'
)
UNION ALL
( SELECT
    RPAD(END_INTERVAL_TIME, 19) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(RECORDS, 12) ||
    LPAD(RECORDS_PER_EXEC, 12) ||
    LPAD(DISK_READS, 11) ||
    LPAD(DISK_READS_PER_EXEC, 15) ||
    LPAD(BUFFER_GETS, 12) ||
    LPAD(BUFFER_GETS_PER_EXEC, 16) ||
    LPAD(BUFFER_GETS_PER_RECORD, 16) ||
    LPAD(ELAPSED_TIME_MS, 12) ||
    LPAD(ELAPSED_TIME_MS_PER_EXEC, 16) ||
    LPAD(CPU_TIME_MS, 12) ||
    LPAD(CPU_TIME_MS_PER_EXEC, 16) ||
    LPAD(AVG_PARSE, 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
  ( SELECT
      'TOTAL (HISTORY)' END_INTERVAL_TIME,
      SUM(HSQ.EXECUTIONS_DELTA) EXECUTIONS,
      SUM(HSQ.ROWS_PROCESSED_DELTA) RECORDS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ROWS_PROCESSED_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 99999990.99) RECORDS_PER_EXEC,
      SUM(HSQ.DISK_READS_DELTA) DISK_READS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.DISK_READS_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 99999999990.99) DISK_READS_PER_EXEC,
      SUM(HSQ.BUFFER_GETS_DELTA) BUFFER_GETS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 999999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(SUM(HSQ.ROWS_PROCESSED_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) / 
        SUM(HSQ.ROWS_PROCESSED_DELTA)), 999999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ELAPSED_TIME_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.CPU_TIME_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,
      SUM(HSQ.PARSE_CALLS_DELTA) PARSE_CALLS,
      NULL MODULE
    FROM
      DBA_HIST_SQLSTAT HSQ,
      V$INSTANCE I
    WHERE
      I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      HSQ.SQL_ID = '&&sql_id'
  )
)
UNION ALL
( SELECT
    LPAD(END_INTERVAL_TIME, 19) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(RECORDS, 12) ||
    LPAD(RECORDS_PER_EXEC, 12) ||
    LPAD(DISK_READS, 11) ||
    LPAD(DISK_READS_PER_EXEC, 15) ||
    LPAD(BUFFER_GETS, 12) ||
    LPAD(BUFFER_GETS_PER_EXEC, 16) ||
    LPAD(BUFFER_GETS_PER_RECORD, 16) ||
    LPAD(ELAPSED_TIME_MS, 12) ||
    LPAD(ELAPSED_TIME_MS_PER_EXEC, 16) ||
    LPAD(CPU_TIME_MS, 12) ||
    LPAD(CPU_TIME_MS_PER_EXEC, 16) ||
    LPAD(AVG_PARSE, 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
  ( SELECT
      TO_CHAR(HSS.END_INTERVAL_TIME, 'YYYY-MM-DD HH24:MI:SS')
        END_INTERVAL_TIME,
      HSQ.EXECUTIONS_DELTA EXECUTIONS,
      HSQ.ROWS_PROCESSED_DELTA RECORDS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.ROWS_PROCESSED_DELTA /
        HSQ.EXECUTIONS_DELTA), 99999990.99) RECORDS_PER_EXEC,
      HSQ.DISK_READS_DELTA DISK_READS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.DISK_READS_DELTA /
        HSQ.EXECUTIONS_DELTA), 99999999990.99) DISK_READS_PER_EXEC,
      HSQ.BUFFER_GETS_DELTA BUFFER_GETS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.BUFFER_GETS_DELTA /
        HSQ.EXECUTIONS_DELTA), 999999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(HSQ.ROWS_PROCESSED_DELTA, 0, 0, HSQ.BUFFER_GETS_DELTA /
        HSQ.ROWS_PROCESSED_DELTA), 999999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(HSQ.ELAPSED_TIME_DELTA / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.ELAPSED_TIME_DELTA /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(HSQ.CPU_TIME_DELTA / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(HSQ.EXECUTIONS_DELTA, 0, 0, HSQ.CPU_TIME_DELTA /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,
      HSQ.PARSE_CALLS_DELTA PARSE_CALLS,
      HSQ.MODULE MODULE
    FROM
      DBA_HIST_SQLSTAT HSQ,
      DBA_HIST_SNAPSHOT HSS,
      V$INSTANCE I
    WHERE
      I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSQ.SNAP_ID = HSS.SNAP_ID AND 
      HSQ.SQL_ID = '&&sql_id'
    ORDER BY
      HSS.SNAP_ID DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('SOURCE', 18) || LPAD('CPU_%', 5) || LPAD('USER_IO_%', 10) || LPAD('APPLICATION_%', 14) ||
    LPAD('CONCURRENCY_%', 14) || LPAD('OTHER_%', 8) || LPAD('CLUSTER_%', 10) || LPAD('PLSQL_%', 8) ||
    LPAD('JAVA_%', 7) || LPAD('FETCHES_PER_EXEC', 17) || LPAD('END_OF_FETCH_%', 15) ||
    LPAD('BUFFER_QUALITY_%', 17) || LPAD('DISK_READ_TIME_MS', 18) LINE
  FROM DUAL
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 18) || LPAD("CPU_%", 5) || LPAD("USER_IO_%", 10) || LPAD("APPLICATION_%", 14) ||
    LPAD("CONCURRENCY_%", 14) || LPAD("OTHER_%", 8) || LPAD("CLUSTER_%", 10) || LPAD("PLSQL_%", 8) ||
    LPAD("JAVA_%", 7) || LPAD("FETCHES_PER_EXEC", 17) || LPAD("END_OF_FETCH_%", 15) ||
    LPAD("BUFFER_QUALITY_%", 17) || LPAD("DISK_READ_TIME_MS", 18) LINE
  FROM
  ( SELECT
      ROUND(CPU_TIME / ELAPSED_TIME * 100) "CPU_%",
      ROUND(USER_IO_WAIT_TIME / ELAPSED_TIME * 100) "USER_IO_%",
      ROUND(APPLICATION_WAIT_TIME / ELAPSED_TIME * 100) "APPLICATION_%",
      ROUND(CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100) "CONCURRENCY_%",
      ROUND((ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME -
        APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME -
        CLUSTER_WAIT_TIME - PLSQL_EXEC_TIME -
        JAVA_EXEC_TIME) / ELAPSED_TIME * 100) "OTHER_%",
      ROUND(CLUSTER_WAIT_TIME / ELAPSED_TIME * 100) "CLUSTER_%",
      ROUND(PLSQL_EXEC_TIME / ELAPSED_TIME * 100) "PLSQL_%",
      ROUND(JAVA_EXEC_TIME / ELAPSED_TIME * 100) "JAVA_%",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS), 9999999999990.99) "FETCHES_PER_EXEC",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, END_OF_FETCH_COUNT / EXECUTIONS * 100), 9999999990.99) "END_OF_FETCH_%",
      TO_CHAR(DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100), 
        999999999990.99) "BUFFER_QUALITY_%",
      TO_CHAR(DECODE(DISK_READS, 0, 0, USER_IO_WAIT_TIME / DISK_READS / 1000),
        9999999999990.99) "DISK_READ_TIME_MS"
    FROM V$SQLSTATS
    WHERE SQL_ID = '&&sql_id' AND ELAPSED_TIME > 0
  )
)
UNION ALL
( SELECT
    RPAD('DBA_HIST_SQLSTAT', 18) || LPAD("CPU_%", 5) || LPAD("USER_IO_%", 10) || LPAD("APPLICATION_%", 14) ||
    LPAD("CONCURRENCY_%", 14) || LPAD("OTHER_%", 8) || LPAD("CLUSTER_%", 10) || LPAD("PLSQL_%", 8) ||
    LPAD("JAVA_%", 7) || LPAD("FETCHES_PER_EXEC", 17) || LPAD("END_OF_FETCH_%", 15) ||
    LPAD("BUFFER_QUALITY_%", 17) || LPAD("DISK_READ_TIME_MS", 18) LINE
  FROM
  ( SELECT
      ROUND(CPU_TIME_MS / ELAPSED_TIME_MS * 100) "CPU_%",
      ROUND(USER_IO_TIME_MS / ELAPSED_TIME_MS * 100) "USER_IO_%",
      ROUND(APPLICATION_TIME_MS / ELAPSED_TIME_MS * 100) "APPLICATION_%",
      ROUND(CONCURRENCY_TIME_MS / ELAPSED_TIME_MS * 100) "CONCURRENCY_%",
      ROUND((ELAPSED_TIME_MS - CPU_TIME_MS - USER_IO_TIME_MS -
        APPLICATION_TIME_MS - CONCURRENCY_TIME_MS -
        CLUSTER_TIME_MS - PLSQL_TIME_MS - 
        JAVA_TIME_MS) / ELAPSED_TIME_MS * 100) "OTHER_%",
      ROUND(CLUSTER_TIME_MS / ELAPSED_TIME_MS * 100) "CLUSTER_%",
      ROUND(PLSQL_TIME_MS / ELAPSED_TIME_MS * 100) "PLSQL_%",
      ROUND(JAVA_TIME_MS / ELAPSED_TIME_MS * 100) "JAVA_%",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS), 9999999999990.99) "FETCHES_PER_EXEC",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, END_OF_FETCH_COUNT / EXECUTIONS * 100), 9999999990.99) "END_OF_FETCH_%",
      TO_CHAR(DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100), 
        999999999990.99) "BUFFER_QUALITY_%",
      TO_CHAR(DECODE(DISK_READS, 0, 0, USER_IO_TIME_MS / DISK_READS), 
        9999999999990.99) "DISK_READ_TIME_MS"
    FROM
    ( SELECT
        ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
        ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
        ROUND(SUM(HSQ.IOWAIT_DELTA) / 1000) USER_IO_TIME_MS,
        ROUND(SUM(HSQ.APWAIT_DELTA) / 1000) APPLICATION_TIME_MS,
        ROUND(SUM(HSQ.CCWAIT_DELTA) / 1000) CONCURRENCY_TIME_MS,
        ROUND(SUM(HSQ.CLWAIT_DELTA) / 1000) CLUSTER_TIME_MS,
        ROUND(SUM(HSQ.PLSEXEC_TIME_DELTA) / 1000) PLSQL_TIME_MS,
        ROUND(SUM(JAVEXEC_TIME_DELTA) / 1000) JAVA_TIME_MS,
        SUM(BUFFER_GETS_DELTA) BUFFER_GETS,
        SUM(DISK_READS_DELTA) DISK_READS,
        SUM(FETCHES_DELTA) FETCHES,
        SUM(END_OF_FETCH_COUNT_DELTA) END_OF_FETCH_COUNT,
        SUM(EXECUTIONS_DELTA) EXECUTIONS
      FROM
        DBA_HIST_SQLSTAT HSQ,
        V$INSTANCE I
      WHERE
        I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
        HSQ.SQL_ID = '&&sql_id'
    )
    WHERE
      ELAPSED_TIME_MS > 0
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'VIEW DEFINITIONS (V$SQL, V$OBJECT_DEPENDENCY, ' ||
      'DBA_OBJECTS, DBMS_METADATA.GET_DDL), NO SYS* VIEWS, ' ||
      'truncated to 4000 characters:' LINE
  FROM DUAL
)
UNION ALL
( SELECT
    '(only available if statement is in V$SQL)' LINE
  FROM DUAL
)
UNION ALL
( SELECT 
    DECODE(I, 1, ' ',
              2, VIEW_NAME || ':',
              3, ' ',
              TRANSLATE(TRANSLATE(SUBSTR(VIEW_DEFINITION, 1 + (I - 4) * 80,
                80), CHR(10), ' '), CHR(9), ' ')) LINE
  FROM
  ( SELECT DISTINCT
      OD.TO_NAME VIEW_NAME,
      TO_CHAR(SUBSTR(DBMS_METADATA.GET_DDL('VIEW', OD.TO_NAME, OD.TO_OWNER), 1, 4000))
        VIEW_DEFINITION
    FROM
      V$SQL S, 
      V$OBJECT_DEPENDENCY OD,
      DBA_OBJECTS O
    WHERE
      S.SQL_ID = '&&sql_id' AND
      S.ADDRESS = OD.FROM_ADDRESS AND
      S.HASH_VALUE = OD.FROM_HASH AND
      OD.TO_OWNER = O.OWNER AND
      OD.TO_NAME = O.OBJECT_NAME AND
      O.OBJECT_TYPE = 'VIEW' AND
      OD.TO_OWNER NOT LIKE 'SYS%' ) V,
  ( SELECT ROWNUM I FROM DBA_HIST_SQLTEXT WHERE ROWNUM <= 52 ) C
  WHERE
    DBMS_LOB.GETLENGTH("VIEW_DEFINITION") > (I - 4) * 80
) 
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'EXECUTION PLAN (V$SQL_PLAN, DBA_HIST_SQL_PLAN):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('CHILD_NUMBER', 13) ||
    LPAD('ID', 5) ||
    LPAD('SEARCH_COLUMNS', 15) ||
    LPAD('CPU_COST_%', 11) ||
    LPAD('TIMESTAMP', 20) ||
    LPAD('COST', 16) ||
    LPAD('CARDINALITY', 16) ||
    ' ACTION' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      TIMESTAMP,
      ID,
      CHILD_NUMBER,
      LPAD(CHILD_NUMBER, 13) ||
      LPAD(ID, 5) ||
      LPAD(SEARCH_COLUMNS, 15) ||
      LPAD(ROUND(DECODE(COST, NULL, 0, 0, 0,
        DECODE(IO_COST, NULL, 0, (COST - IO_COST) / COST * 100))), 11) ||
      LPAD(DECODE(ID, 0, TO_CHAR(TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS'), ' '), 20) ||
      LPAD(NVL(COST, 0), 16) || 
      LPAD(NVL(CARDINALITY, 0), 16) ||
      ' ' || LPAD(' ', DEPTH) || OPERATION || ' ' || OPTIONS ||
        DECODE(OBJECT_NAME, NULL, NULL, ' (' || OBJECT_NAME || ')') LINE
    FROM 
      V$SQL_PLAN
    WHERE
      SQL_ID = '&&sql_id'
    UNION
    ( SELECT
        TIMESTAMP,
        ID,
        9999 CHILD_NUMBER,
        LPAD('0', 13) ||
        LPAD(ID, 5) ||
        LPAD(SEARCH_COLUMNS, 15) ||
        LPAD(ROUND(DECODE(COST, NULL, 0, 0, 0,
          DECODE(IO_COST, NULL, 0, (COST - IO_COST) / COST * 100))), 11) ||
        LPAD(DECODE(ID, 0, TO_CHAR(TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS'), ' '), 20) ||
        LPAD(NVL(COST, 0), 16) ||
        LPAD(NVL(CARDINALITY, 0), 16) ||
        ' ' || LPAD(' ', DEPTH) || OPERATION || ' ' || OPTIONS ||
          DECODE(OBJECT_NAME, NULL, NULL, ' (' || OBJECT_NAME || ')') LINE
      FROM 
        DBA_HIST_SQL_PLAN HSP
      WHERE
        SQL_ID = '&&sql_id' AND
        NOT EXISTS 
       ( SELECT 1 FROM V$SQL_PLAN SP
         WHERE SQL_ID = '&&sql_id' AND SP.PLAN_HASH_VALUE = HSP.PLAN_HASH_VALUE )
    )
    ORDER BY TIMESTAMP DESC, CHILD_NUMBER, ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL WORKAREAS (V$SQL_WORKAREA):' LINE
  FROM 
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('OPERATION_ID ', 13) ||
    RPAD('OPERATION_TYPE', 24) ||
    LPAD('LAST_MEMORY_USED', 17) ||
    LPAD('LAST_TEMPSEG_SIZE', 18) ||
    LPAD('MAX_TEMPSEG_SIZE', 17) ||
    LPAD('OPTIMAL_EXECUTIONS', 19) ||
    LPAD('ONEPASS_EXECUTIONS', 19) ||
    LPAD('MULTIPASSES_EXECUTIONS', 23) LINE
  FROM  
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(OPERATION_ID || ' ', 13) ||
      RPAD(OPERATION_TYPE, 24) ||
      LPAD(LAST_MEMORY_USED, 17) ||
      LPAD(LAST_TEMPSEG_SIZE, 18) ||
      LPAD(MAX_TEMPSEG_SIZE, 17) ||
      LPAD(OPTIMAL_EXECUTIONS, 19) ||
      LPAD(ONEPASS_EXECUTIONS, 19) ||
      LPAD(MULTIPASSES_EXECUTIONS, 23) LINE
    FROM
      V$SQL_WORKAREA
    WHERE
      SQL_ID = '&&sql_id'
    ORDER BY
      OPERATION_ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'ACTIVE SQL WORKAREAS (V$SQL_WORKAREA_ACTIVE):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('OPERATION_ID ', 13) ||
    RPAD('OPERATION_TYPE', 24) ||
    LPAD('MAX_MEMORY_USED', 17) ||
    LPAD('TEMPSEG_SIZE', 18) ||
    LPAD('NUMBER_PASSES', 14) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(OPERATION_ID || ' ', 13) ||
      RPAD(OPERATION_TYPE, 24) ||
      LPAD(MAX_MEM_USED, 17) ||
      LPAD(TEMPSEG_SIZE, 18) ||
      LPAD(NUMBER_PASSES, 14) LINE
    FROM
      V$SQL_WORKAREA_ACTIVE
    WHERE
      SQL_ID = '&&sql_id'
    ORDER BY
      OPERATION_ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL INFO, TIMED EVENTS AND ACCESSED OBJECTS (DBA_HIST_ACTIVE_SESS_HISTORY):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( WITH ASH_DISTRIBUTION AS
    ( SELECT
        ACTION,
        WAIT_CLASS,
        OBJECT_NAME,
        SUM(BLOCKS_ACCESSED) BLOCKS_ACCESSED,
        SQL_OPCODE,
        MODULE,
        MOD_ACTION,
        COUNT(*) OCCURRENCES
      FROM
      ( SELECT DISTINCT
          ASH.SESSION_ID SID,
          ASH.SAMPLE_TIME SAMPLE_TIME,
          DECODE(SESSION_STATE,
            'WAITING', EVENT || DECODE(SUBSTR(EVENT, 1, 5),
            'enq: ', ' (' || TO_CHAR(BITAND(P1, 65535)) || ' / ' ||
            TO_CHAR(DECODE(BITAND(P1, 65535),
              1, 'Null',
              2, 'Sub-Share',
              3, 'Sub-Exclusive',
              4, 'Share',
              5, 'Share/Sub-Exclusive',
              6, 'Exclusive', 'Other')) || ')' ), 'CPU') ACTION,
          ASH.WAIT_CLASS,
          NVL(DECODE(ASH.WAIT_CLASS,
            'Application', O.OBJECT_NAME,
            'Cluster', O.OBJECT_NAME,
            'User I/O', DECODE(EVENT, 'direct path read temp', 'not available',
            'direct path write temp', 'not available', O.OBJECT_NAME),
            'not available'), DECODE(SSO.OBJECT_NAME, NULL, 'not available',
          SSO.OBJECT_NAME || ' (previous)')) OBJECT_NAME,
          DECODE(ASH.WAIT_CLASS, 'User I/O', P3, 0) BLOCKS_ACCESSED,
          SQL_OPCODE,
          MODULE,
          ACTION MOD_ACTION
        FROM
          DBA_HIST_ACTIVE_SESS_HISTORY ASH,
          DBA_OBJECTS O,
          DBA_HIST_SEG_STAT_OBJ SSO,
          V$INSTANCE I
        WHERE
          I.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER AND
          ASH.CURRENT_OBJ# = O.OBJECT_ID (+) AND
          ASH.CURRENT_OBJ# = SSO.OBJ# (+) AND
          ASH.SQL_ID = '&&sql_id'
      )
      GROUP BY
        ACTION,
        WAIT_CLASS,
        OBJECT_NAME,
        SQL_OPCODE,
        MODULE,
        MOD_ACTION
    )
    SELECT
      RPAD('SQL_TYPE', 30) ||
      RPAD('MODULE', 50) ||
      RPAD('MOD_ACTION', 30) LINE
    FROM DUAL
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(A.NAME, 30) ||
        RPAD(ASH.MODULE, 50) ||
        RPAD(ASH.MOD_ACTION, 30) LINE
      FROM ASH_DISTRIBUTION ASH, AUDIT_ACTIONS A
      WHERE ASH.SQL_OPCODE = A.ACTION AND ROWNUM = 1
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OBJECT_NAME', 30) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PERCENT', 8) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(OBJECT_NAME, 30) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 9990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          OBJECT_NAME
        ORDER BY
          SUM(OCCURRENCES) DESC
      )
      WHERE
        ROWNUM <= 10
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('ACTION', 50) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PERCENT', 8) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(ACTION, 50) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 9990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          ACTION
        ORDER BY
          SUM(OCCURRENCES) DESC
      )
      WHERE
        ROWNUM <= 10
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL  
    ( SELECT
        RPAD('OBJECT_NAME', 30) ||
        RPAD('ACTION', 50) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PERCENT', 8) ||
        LPAD('BLOCKS_PER_WAIT', 16) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(OBJECT_NAME, 30) ||
          RPAD(ACTION, 50) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 9990.99) ||
          DECODE(WAIT_CLASS, 'User I/O', DECODE(ACTION, 'Data file init write', ' ',
            TO_CHAR(SUM(BLOCKS_ACCESSED) / SUM(OCCURRENCES), 999999999990.99)), ' ') LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          ACTION,
          WAIT_CLASS,
          OBJECT_NAME
        ORDER BY
          SUM(OCCURRENCES) DESC
      )
      WHERE
        ROWNUM <= 10
    )
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'TOP HOURS (DBA_HIST_ACTIVE_SESS_HISTORY):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('HOUR', 20) ||
    LPAD('SAMPLES', 12) ||
    LPAD('PERCENT', 8) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(HOUR || ':00:00', 20) ||
      LPAD(NUM, 12) ||
      LPAD(PERCENT, 8) LINE
    FROM
    ( SELECT
        HOUR,
        SUM(NUM) NUM,
        TO_CHAR(RATIO_TO_REPORT(SUM(NUM)) OVER () * 100, 990.99) PERCENT
      FROM
      ( SELECT
          TO_CHAR(ASH.SAMPLE_TIME, 'YYYY-MM-DD HH24') HOUR,
          COUNT(*) NUM
        FROM
          DBA_HIST_ACTIVE_SESS_HISTORY ASH,
          V$INSTANCE I
        WHERE
          I.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER AND
          SQL_ID = '&&sql_id'
        GROUP BY
          TO_CHAR(ASH.SAMPLE_TIME, 'YYYY-MM-DD HH24')
      )
      GROUP BY
        HOUR
    )
    ORDER BY NUM DESC
  )
  WHERE 
  ROWNUM <= 10
)     
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( WITH
      TABLE_INFO
    AS
    ( SELECT DISTINCT OBJECT_OWNER TABLE_OWNER, OBJECT_NAME TABLE_NAME
      FROM DBA_HIST_SQL_PLAN
      WHERE
        SQL_ID = '&&sql_id' AND
        ( OBJECT_TYPE LIKE '%TABLE%' OR OPERATION = 'DELETE' )
      UNION
      ( SELECT DISTINCT OBJECT_OWNER TABLE_OWNER, OBJECT_NAME TABLE_NAME
        FROM V$SQL_PLAN
        WHERE
          SQL_ID = '&&sql_id' AND
          ( OBJECT_TYPE LIKE '%TABLE%' OR OPERATION = 'DELETE' )
      )
      UNION
      ( SELECT DISTINCT I.TABLE_OWNER TABLE_OWNER, I.TABLE_NAME TABLE_NAME
        FROM DBA_HIST_SQL_PLAN HSP, DBA_INDEXES I
        WHERE
          HSP.OBJECT_OWNER = I.OWNER AND HSP.OBJECT_NAME = I.INDEX_NAME AND
          HSP.SQL_ID = '&&sql_id' AND HSP.OBJECT_TYPE LIKE '%INDEX%'
      )
      UNION
      ( SELECT DISTINCT I.TABLE_OWNER TABLE_OWNER, I.TABLE_NAME TABLE_NAME
        FROM V$SQL_PLAN HSP, DBA_INDEXES I
        WHERE
          HSP.OBJECT_OWNER = I.OWNER AND HSP.OBJECT_NAME = I.INDEX_NAME AND
          HSP.SQL_ID = '&&sql_id' AND HSP.OBJECT_TYPE LIKE '%INDEX%'
      )
      UNION
      ( SELECT DISTINCT OD.TO_OWNER TABLE_OWNER, OD.TO_NAME TABLE_NAME
        FROM V$SQL S, V$OBJECT_DEPENDENCY OD
        WHERE
          S.ADDRESS = OD.FROM_ADDRESS AND S.HASH_VALUE = OD.FROM_HASH AND
          S.SQL_ID = '&&sql_id' AND OD.TO_TYPE = 2
      )
      UNION
      ( SELECT HSS.PARSING_SCHEMA_NAME TABLE_OWNER,
          REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
            'INSERT INTO[ "]+([^ "]+)[ "]+.*', '\1', 1, 1, 'i')
            TABLE_NAME
        FROM DBA_HIST_SQLTEXT HST, DBA_HIST_SQLSTAT HSS, V$INSTANCE I
        WHERE I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HSS.SQL_ID = HST.SQL_ID AND HST.SQL_ID = '&&sql_id'
      )
      UNION
      ( SELECT REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
            'BEGIN DBMS_STATS.*OWNNAME => [''"]+([^''"]+)[''"]+.*', '\1', 1, 1, 'i') TABLE_OWNER,
          REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
            'BEGIN DBMS_STATS.*TABNAME => [''"]+([^''"]+)[''"]+.*', '\1', 1, 1, 'i') TABLE_NAME
        FROM DBA_HIST_SQLTEXT HST,  DBA_HIST_SQLSTAT HSS, V$INSTANCE I
        WHERE I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HSS.SQL_ID = HST.SQL_ID AND HST.SQL_ID = '&&sql_id'
      )
    ),
    TABPART_STORAGE AS
    ( SELECT AVG(DTP.PCT_FREE) PCT_FREE, AVG(DTP.INI_TRANS) INI_TRANS
      FROM DBA_TAB_PARTITIONS DTP, TABLE_INFO TI
      WHERE TI.TABLE_OWNER = DTP.TABLE_OWNER AND TI.TABLE_NAME = DTP.TABLE_NAME
    ),
    TABLE_STORAGE AS
    ( SELECT TI.TABLE_OWNER, TI.TABLE_NAME, NULL PARTITION_NAME, DT.IOT_TYPE,
        NVL(DT.PCT_FREE, PS.PCT_FREE) PCT_FREE, NVL(DT.INI_TRANS, PS.INI_TRANS) INI_TRANS
      FROM DBA_TABLES DT, TABLE_INFO TI, TABPART_STORAGE PS
      WHERE TI.TABLE_OWNER = DT.OWNER AND TI.TABLE_NAME = DT.TABLE_NAME
      UNION ALL
      ( SELECT TI.TABLE_OWNER, TI.TABLE_NAME, DTP.PARTITION_NAME, NULL,
          DTP.PCT_FREE, DTP.INI_TRANS
        FROM DBA_TAB_PARTITIONS DTP, TABLE_INFO TI
        WHERE TI.TABLE_OWNER = DTP.TABLE_OWNER AND TI.TABLE_NAME = DTP.TABLE_NAME
      )
    ),
    INDEX_INFO AS
    ( SELECT DISTINCT I.OWNER INDEX_OWNER, I.INDEX_NAME, I.INDEX_TYPE
      FROM DBA_INDEXES I, TABLE_INFO T
      WHERE T.TABLE_OWNER = I.TABLE_OWNER AND
        T.TABLE_NAME = I.TABLE_NAME AND I.INDEX_TYPE != 'LOB'
    ),
    INDPART_STORAGE AS
    ( SELECT AVG(DTP.PCT_FREE) PCT_FREE, AVG(DTP.INI_TRANS) INI_TRANS
      FROM DBA_IND_PARTITIONS DTP, INDEX_INFO TI
      WHERE TI.INDEX_OWNER = DTP.INDEX_OWNER AND TI.INDEX_NAME = DTP.INDEX_NAME
    ),
    INDEX_STORAGE AS
    ( SELECT TI.INDEX_OWNER, TI.INDEX_NAME, NULL PARTITION_NAME,
        DT.INDEX_TYPE, NVL(DT.PCT_FREE, PS.PCT_FREE) PCT_FREE,
        NVL(DT.INI_TRANS, PS.INI_TRANS) INI_TRANS
      FROM DBA_INDEXES DT, INDEX_INFO TI, INDPART_STORAGE PS
      WHERE TI.INDEX_OWNER = DT.OWNER AND TI.INDEX_NAME = DT.INDEX_NAME
      UNION ALL
      ( SELECT TI.INDEX_OWNER, TI.INDEX_NAME, DTP.PARTITION_NAME,
          TI.INDEX_TYPE, DTP.PCT_FREE, DTP.INI_TRANS
        FROM DBA_IND_PARTITIONS DTP, INDEX_INFO TI
        WHERE TI.INDEX_OWNER = DTP.INDEX_OWNER AND TI.INDEX_NAME = DTP.INDEX_NAME
      )
    )
    ( SELECT
        'SEGMENT STATISTICS (V$SEGMENT_STATISTICS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('SEGMENT_NAME', 35) || LPAD('LOG_READS', 12) || LPAD('PHYS_READS', 12) ||
        LPAD('DIR_READS', 12) || LPAD('PHYS_WRITES', 12) || LPAD('DIR_WRITES', 12) ||
        LPAD('ITL_WAITS', 12) || LPAD('ROW_LOCKS', 12) || LPAD('BUFFER_BUSY', 12) ||
        LPAD('BLK_CHANGES', 12) || LPAD('SEGMENT_SCANS', 14) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT * FROM
      ( SELECT
          RPAD(O.OBJECT_NAME, 35) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'logical reads', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical reads', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical reads direct', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical writes', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical writes direct', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'ITL waits', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'row lock waits', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'buffer busy waits', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'db block changes', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'segment scans', VALUE, 0)), 14) LINE
        FROM V$SEGSTAT SS, DBA_OBJECTS O
        WHERE
          SS.OBJ# = O.OBJECT_ID AND
          ( O.OBJECT_TYPE = 'TABLE' AND
            ( O.OWNER, O.OBJECT_NAME ) IN
            ( SELECT TABLE_OWNER, TABLE_NAME FROM TABLE_INFO
            ) OR
            O.OBJECT_TYPE = 'INDEX' AND
            ( O.OWNER, O.OBJECT_NAME ) IN
            ( SELECT INDEX_OWNER, INDEX_NAME FROM INDEX_INFO
          ) )     
        GROUP BY O.OBJECT_NAME
        ORDER BY O.OBJECT_NAME
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'SEGMENT STATISTICS (DBA_HIST_SEG_STAT):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('SEGMENT_NAME', 35) ||
        LPAD('LOG_READS', 12) ||
        LPAD('PHYS_READS', 12) ||
        LPAD('DIR_READS', 12) ||
        LPAD('PHYS_WRITES', 12) ||
        LPAD('DIR_WRITES', 12) ||
        LPAD('ITL_WAITS', 12) ||
        LPAD('ROW_LOCKS', 12) ||
        LPAD('BUFFER_BUSY', 12) ||
        LPAD('BLK_CHANGES', 12) ||
        LPAD('SEGMENT_SCANS', 14) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(OBJECT_NAME, 35) ||
          LPAD(SUM(LOGICAL_READS_DELTA), 12) ||
          LPAD(SUM(PHYSICAL_READS_DELTA), 12) ||
          LPAD(SUM(PHYSICAL_READS_DIRECT_DELTA), 12) ||
          LPAD(SUM(PHYSICAL_WRITES_DELTA), 12) ||
          LPAD(SUM(PHYSICAL_WRITES_DIRECT_DELTA), 12) ||
          LPAD(SUM(ITL_WAITS_DELTA), 12) ||
          LPAD(SUM(ROW_LOCK_WAITS_DELTA), 12) ||
          LPAD(SUM(BUFFER_BUSY_WAITS_DELTA), 12) ||
          LPAD(SUM(DB_BLOCK_CHANGES_DELTA), 12) ||
          LPAD(SUM(TABLE_SCANS_DELTA), 14) LINE
        FROM
          DBA_HIST_SEG_STAT HSS,
          DBA_HIST_SEG_STAT_OBJ HSO,
          V$INSTANCE I
        WHERE
          I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HSS.OBJ# = HSO.OBJ# AND
          ( HSO.OBJECT_TYPE = 'TABLE' AND
            ( HSO.OWNER, HSO.OBJECT_NAME ) IN
            ( SELECT 
                TABLE_OWNER,
                TABLE_NAME
              FROM
                TABLE_INFO
            ) OR
            HSO.OBJECT_TYPE = 'INDEX' AND
            ( HSO.OWNER, HSO.OBJECT_NAME ) IN
            ( SELECT 
                INDEX_OWNER,
                INDEX_NAME
              FROM
                INDEX_INFO
            )
          )
          GROUP BY
            OBJECT_NAME
          ORDER BY
            OBJECT_NAME
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'INDEX COLUMNS (DBA_INDEXES):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('TABLE_NAME', 30) ||
        RPAD('INDEX_NAME', 30) ||
        RPAD('COLUMN_NAME', 30) ||
        LPAD('NUM_DISTINCT', 12) ||
        LPAD('COLUMN_POSITION', 16) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(DECODE(TABLE_NAME, LAG(TABLE_NAME, 1) OVER
          (ORDER BY TABLE_NAME, INDEX_NAME, COLUMN_POSITION),
          ' ', TABLE_NAME), 30) ||
        RPAD(DECODE(INDEX_NAME, LAG(INDEX_NAME, 1) OVER
          (ORDER BY TABLE_NAME, INDEX_NAME, COLUMN_POSITION),
          ' ', INDEX_NAME), 30) ||
        RPAD(COLUMN_NAME, 30) ||
        LPAD(NVL(TO_CHAR(NUM_DISTINCT), ' '), 12) ||
        LPAD(COLUMN_POSITION, 16) LINE
      FROM
      ( SELECT
          I.TABLE_NAME,
          I.INDEX_NAME,
          I.COLUMN_NAME,
          I.COLUMN_POSITION,
          T.NUM_DISTINCT,
          ROWNUM ROWNUMBER
        FROM
          DBA_IND_COLUMNS I, DBA_TAB_COLUMNS T, TABLE_INFO TI
        WHERE 
          I.TABLE_OWNER = TI.TABLE_OWNER AND
          I.TABLE_NAME = TI.TABLE_NAME AND
          I.TABLE_OWNER = T.OWNER AND
          I.TABLE_NAME = T.TABLE_NAME AND
          I.COLUMN_NAME = T.COLUMN_NAME
        ORDER BY
          I.TABLE_NAME,
          I.INDEX_NAME,
          I.COLUMN_POSITION
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'CBO STATISTICS (DBA_TAB_STATISTICS, DBA_INDEXES, DBA_TAB_COLUMNS):' LINE
      FROM DUAL 
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'TABLE STATISTICS:' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) ||
        RPAD('TABLE_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('NUM_ROWS', 12) ||
        LPAD('BLOCKS', 10) ||
        LPAD('AVG_ROW_LEN', 12) ||
        LPAD('LAST_ANALYZED', 22) ||
        LPAD('SAMPLE_SIZE', 12) ||
        LPAD('CREATION_TIME', 22) ||
        LPAD('LAST_DDL_TIME', 22) ||
        LPAD('USER_STATS', 11) LINE
      FROM DUAL 
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          LINE
        FROM
        ( SELECT
            RPAD(T.OWNER, 10) ||
            RPAD(T.TABLE_NAME, 35) ||
            RPAD(NVL(T.PARTITION_NAME, ' '), 30) ||
            LPAD(NVL(TO_CHAR(T.NUM_ROWS), ' '), 12) ||
            LPAD(NVL(TO_CHAR(T.BLOCKS), ' '), 10) ||
            LPAD(NVL(TO_CHAR(T.AVG_ROW_LEN), ' '), 12) ||
            LPAD(DECODE(T.LAST_ANALYZED, NULL, ' ', TO_CHAR(T.LAST_ANALYZED, 'YYYY-MM-DD HH24:MI:SS')), 22) ||
            LPAD(NVL(TO_CHAR(T.SAMPLE_SIZE), '0'), 12) ||
            LPAD(DECODE(O.CREATED, NULL, ' ', TO_CHAR(O.CREATED,
              'YYYY-MM-DD HH24:MI:SS')), 22) ||
            LPAD(DECODE(O.LAST_DDL_TIME, NULL, ' ', TO_CHAR(O.LAST_DDL_TIME, 'YYYY-MM-DD HH24:MI:SS')), 22) ||
            LPAD(T.USER_STATS, 11) LINE,
            T.OWNER,
            T.TABLE_NAME,
            NVL(PARTITION_NAME, ' ') PARTITION_NAME
          FROM
            DBA_TAB_STATISTICS T, DBA_OBJECTS O, TABLE_INFO TI
          WHERE
            O.OWNER (+) = T.OWNER AND
            O.OBJECT_NAME (+) = T.TABLE_NAME AND
            O.SUBOBJECT_NAME (+) IS NULL AND
            T.OWNER = TI.TABLE_OWNER AND
            T.TABLE_NAME = TI.TABLE_NAME AND
            O.OBJECT_TYPE (+) = 'TABLE'
        )
        ORDER BY
          OWNER,
          TABLE_NAME,
          PARTITION_NAME
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'INDEX STATISTICS (INDEX PARTITIONS ARE NOT CONSIDERED):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('INDEX_NAME', 30) ||
        LPAD('NUM_ROWS', 12) ||
        LPAD('LEAF_BLOCKS', 12) ||
        LPAD('DISTINCT_KEYS', 14) ||
        LPAD('CLUST_FACTOR', 13) ||
        LPAD('BLEVEL', 7) ||
        LPAD('LAST_ANALYZED', 22) ||
        LPAD('SAMPLE_SIZE', 12) ||
        RPAD(' INDEX_TYPE', 12) ||
        RPAD('UNIQUENESS', 11) ||
        LPAD('CREATION_DATE', 22) ||
        LPAD('LAST_DDL_TIME', 22) ||
        LPAD('USER_STATS', 11) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT 
          RPAD(I.INDEX_NAME, 30) ||
          LPAD(NVL(TO_CHAR(I.NUM_ROWS), ' '), 12) ||
          LPAD(NVL(TO_CHAR(I.LEAF_BLOCKS), ' '), 12) ||
          LPAD(NVL(TO_CHAR(I.DISTINCT_KEYS), ' '), 14) ||
          LPAD(NVL(TO_CHAR(I.CLUSTERING_FACTOR), ' '), 13) ||
          LPAD(NVL(TO_CHAR(I.BLEVEL), ' '), 7) ||
          LPAD(DECODE(I.LAST_ANALYZED, NULL, ' ', TO_CHAR(I.LAST_ANALYZED, 'YYYY-MM-DD HH24:MI:SS')), 22) ||
          LPAD(NVL(TO_CHAR(I.SAMPLE_SIZE), ' '), 12) ||
          RPAD(' ' || I.INDEX_TYPE, 12) ||
          RPAD(I.UNIQUENESS, 11) ||
          LPAD(TO_CHAR(O.CREATED, 'YYYY-MM-DD HH24:MI:SS'), 22) ||
          LPAD(TO_CHAR(O.LAST_DDL_TIME, 'YYYY-MM-DD HH24:MI:SS'), 22) ||
          LPAD(I.USER_STATS, 11) LINE
        FROM
          DBA_INDEXES I, DBA_OBJECTS O, INDEX_INFO II
        WHERE
          I.INDEX_TYPE != 'LOB' AND
          I.OWNER = O.OWNER AND
          I.INDEX_NAME = O.OBJECT_NAME AND
          O.SUBOBJECT_NAME IS NULL AND
          I.OWNER = II.INDEX_OWNER AND
          I.INDEX_NAME = II.INDEX_NAME AND
          O.OBJECT_TYPE = 'INDEX'
        ORDER BY
          I.OWNER,
          I.TABLE_NAME,
          I.INDEX_NAME
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'COLUMN STATISTICS:' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('TABLE_NAME', 30) ||
        RPAD('COLUMN_NAME', 25) ||
        LPAD('NUM_DISTINCT', 13) ||
        LPAD('DENSITY', 9) ||
        LPAD('NUM_BUCKETS', 12) ||
        LPAD('AVG_COL_LEN', 12) ||
        LPAD('NULLABLE', 9) ||
        LPAD('NUM_NULLS', 12) ||
        RPAD(' DATA_TYPE', 20) ||
        LPAD('LAST_ANALYZED', 22) ||
        LPAD('SAMPLE_SIZE', 12) ||
        LPAD('USER_STATS', 11) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(DECODE(TCS.TABLE_NAME, LAG(TCS.TABLE_NAME, 1) OVER 
            (ORDER BY TCS.OWNER, TCS.TABLE_NAME, TCS.COLUMN_NAME),
            ' ', TCS.TABLE_NAME), 30) ||
          RPAD(TCS.COLUMN_NAME, 25) ||
          LPAD(NVL(TO_CHAR(TCS.NUM_DISTINCT), ' '), 13) ||
          LPAD(DECODE(TCS.DENSITY, NULL, ' ', TO_CHAR(TCS.DENSITY, 90.999999)), 9) ||
          LPAD(NVL(TO_CHAR(TCS.NUM_BUCKETS), ' '), 12) ||
          LPAD(NVL(TO_CHAR(TCS.AVG_COL_LEN), ' '), 12) ||
          LPAD(NVL(TCS.NULLABLE, ' '), 9) ||
          LPAD(NVL(TO_CHAR(TCS.NUM_NULLS), ' '), 12) ||
          RPAD(' ' || TCS.DATA_TYPE, 20) ||
          LPAD(DECODE(TCS.LAST_ANALYZED, NULL, ' ', TO_CHAR(TCS.LAST_ANALYZED, 
            'YYYY-MM-DD HH24:MI:SS')), 22) ||
          LPAD(NVL(TO_CHAR(TCS.SAMPLE_SIZE), ' '), 12) ||
          LPAD(TCS.USER_STATS, 11) LINE
        FROM
          DBA_TAB_COLUMNS TCS, TABLE_INFO TI
        WHERE
          TCS.OWNER = TI.TABLE_OWNER AND
          TCS.TABLE_NAME = TI.TABLE_NAME
        ORDER BY
          TCS.OWNER,
          TCS.TABLE_NAME,
          TCS.COLUMN_NAME
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'TABLE MODIFICATIONS (DBA_TAB_MODIFICATIONS):' LINE
      FROM DUAL 
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) || RPAD('TABLE_NAME', 35) || RPAD('PARTITION_NAME', 30) ||
        LPAD('INSERTS', 10) || LPAD('UPDATES', 10) || LPAD('DELETES', 10) ||
        LPAD('TIMESTAMP', 22) || LPAD('TRUNCATED', 10) || LPAD('DROP_SEGMENTS', 14) LINE
      FROM
        DUAL
    )
    UNION ALL ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(DTM.TABLE_OWNER, 10) ||
          RPAD(DTM.TABLE_NAME, 35) ||
          RPAD(NVL(DTM.PARTITION_NAME, ' '), 30) ||
          LPAD(DTM.INSERTS, 10) ||
          LPAD(DTM.UPDATES, 10) ||
          LPAD(DTM.DELETES, 10) ||
          LPAD(TO_CHAR(DTM.TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS'), 22) ||
          LPAD(DTM.TRUNCATED, 10) ||
          LPAD(DTM.DROP_SEGMENTS, 14) LINE
        FROM
          TABLE_INFO TI,
          SYS.DBA_TAB_MODIFICATIONS DTM
        WHERE
          TI.TABLE_OWNER = DTM.TABLE_OWNER AND
          TI.TABLE_NAME = DTM.TABLE_NAME
        ORDER BY
          DTM.TABLE_OWNER,
          DTM.TABLE_NAME
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'FRAGMENTATION INFORMATION (BASED ON CBO STATISTICS, BITMAP ' ||
        'INDEXES ARE NOT CONSIDERED):' LINE
      FROM DUAL 
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'TABLE FRAGMENTATION (DBA_TAB_STATISTICS, DBA_TAB_COLS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('TABLE_NAME', 30) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('QUALITY_%', 10) ||
        LPAD('UNUSED_MB', 11) ||
        LPAD('NUM_ROWS', 11) ||
        LPAD('AVG_ROW_LEN', 12) ||
        LPAD('BLOCKS', 9) ||
        LPAD('NET_MB', 11) ||
        LPAD('GROSS_MB', 11) ||
        RPAD(' RELIABILITY_RESTRICTIONS', 100) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT 
        RPAD(TABLE_NAME, 30) ||
        RPAD(PARTITION_NAME, 30) ||
        TO_CHAR(DECODE(GROSS_MB, 0, 0, NET_MB / GROSS_MB * 100), 999990.99) ||
        TO_CHAR(GROSS_MB - NET_MB, 9999990.99) ||
        TO_CHAR(NUM_ROWS, 9999999990) ||
        TO_CHAR(AVG_ROW_LEN, 99999999990) ||
        TO_CHAR(BLOCKS, 99999990) ||
        TO_CHAR(NET_MB, 9999990.99) ||
        TO_CHAR(GROSS_MB, 9999990.99) ||
        RPAD(' ' ||
          DECODE(USER_STATS,      'YES', 'STATISTICS MODIFIED   ') ||
          DECODE(LONG_RAW,        'YES', 'LONG RAW   ') ||
          DECODE(STATTYPE_LOCKED, 'ALL', 'STATISTICS LOCKED   ') ||
          DECODE(STALE_STATS,     'YES', 'STATISTICS STALE   ') ||
          DECODE(SIGN(GROSS_MB - 5),    -1, 'SMALL TABLE   '),
          100) LINE
      FROM
      ( SELECT
          DTS.OWNER,
          DTS.TABLE_NAME,
          NVL(DTS.PARTITION_NAME, ' ') PARTITION_NAME,
          DTS.NUM_ROWS,
          DTS.AVG_ROW_LEN,
          DTS.BLOCKS,
          (DTS.AVG_ROW_LEN + 1) * DTS.NUM_ROWS / 1000000 NET_MB,
          DTS.BLOCKS * (8000 - 23 * TS.INI_TRANS) * (1 - TS.PCT_FREE / 100) / 1000000 GROSS_MB,
          DECODE(SIGN(SUM(DECODE(DTS.USER_STATS, 'YES', 1, 0))), 1, 'YES', 'NO') USER_STATS,
          DECODE(SIGN(SUM(DECODE(DTC.DATA_TYPE, 'LONG RAW', 1, 0))), 1, 'YES', 'NO') LONG_RAW,
          DTS.STATTYPE_LOCKED,
          DTS.STALE_STATS
        FROM 
          TABLE_INFO TI,
          TABLE_STORAGE TS,
          DBA_TAB_STATISTICS DTS,
          DBA_TAB_COLS DTC
        WHERE
          DTS.OWNER = TI.TABLE_OWNER AND
          DTS.TABLE_NAME = TI.TABLE_NAME AND
          DTS.OWNER = TS.TABLE_OWNER AND
          DTS.TABLE_NAME = TS.TABLE_NAME AND
          NVL(DTS.PARTITION_NAME, ' ') = NVL(TS.PARTITION_NAME, ' ') AND
          DTS.OWNER = DTC.OWNER AND
          DTS.TABLE_NAME = DTC.TABLE_NAME AND
          DTS.NUM_ROWS IS NOT NULL AND
          (TS.IOT_TYPE != 'IOT' OR TS.IOT_TYPE IS NULL)
        GROUP BY
          DTS.OWNER,
          DTS.TABLE_NAME,
          NVL(DTS.PARTITION_NAME, ' '),
          DTS.NUM_ROWS,
          DTS.AVG_ROW_LEN,
          DTS.BLOCKS,
          TS.INI_TRANS,
          TS.PCT_FREE,
          DTS.STATTYPE_LOCKED,
          DTS.STALE_STATS
        ORDER BY
          DTS.OWNER,
          DTS.TABLE_NAME,
          NVL(DTS.PARTITION_NAME, ' ')
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'INDEX FRAGMENTATION (DBA_IND_STATISTICS, DBA_IND_COLUMNS, DBA_TAB_COLUMNS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('INDEX_NAME', 30) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('QUALITY_%', 10) ||
        LPAD('UNUSED_MB', 11) ||
        LPAD('NUM_ROWS', 11) ||
        LPAD('IND_ROW_LEN', 12) ||
        LPAD('LEAVES', 9) ||
        LPAD('NET_MB', 11) ||
        LPAD('GROSS_MB', 11) ||
        RPAD(' RELIABILITY_RESTRICTIONS', 100) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(INDEX_NAME, 30) ||
        RPAD(PARTITION_NAME, 30) ||
        TO_CHAR(DECODE(GROSS_MB, 0, 0, NET_MB / GROSS_MB * 100), 999990.99) ||
        TO_CHAR(GROSS_MB - NET_MB, 9999990.99) ||
        TO_CHAR(NUM_ROWS, 9999999990) ||
        TO_CHAR(ROWLEN, 99999999990) ||
        TO_CHAR(LEAVES, 99999990) ||
        TO_CHAR(NET_MB, 9999990.99) ||
        TO_CHAR(GROSS_MB, 9999990.99) ||
        ' ' ||
          DECODE(USER_STATS,         'YES', 'STATISTICS MODIFIED   ') ||
          DECODE(STATTYPE_LOCKED,    'ALL', 'STATISTICS LOCKED   ') ||
          DECODE(STALE_STATS,        'YES', 'STATISTICS STALE   ') ||
          DECODE(SIGN(GROSS_MB - 5),    -1, 'SMALL INDEX   ') ||
          DECODE(SIGN(COL_LEN_NULL), 1, 'MISSING COLUMN STATISTICS   ') ||
          DECODE(LEAVES, 0, 'WRONG VALUE LEAVES = 0   ') LINE
      FROM
      ( SELECT
          DIS.INDEX_NAME,
          NVL(DIS.PARTITION_NAME, ' ') PARTITION_NAME,
          DIS.NUM_ROWS,
          SUM(NVL(TC.AVG_COL_LEN, 0) + 1) + 7 ROWLEN,
          DIS.LEAF_BLOCKS LEAVES,
          ROUND((SUM(NVL(TC.AVG_COL_LEN, 10000) + 1) + 7) * 
            DIS.NUM_ROWS / 1024 / 1024, 2) NET_MB,
          ROUND(DIS.LEAF_BLOCKS * (8079 - 23 * IST.INI_TRANS) *
            (1 - IST.PCT_FREE / 100) / 1024 / 1024, 2) GROSS_MB,
          DIS.USER_STATS,
          DIS.STATTYPE_LOCKED,
          DIS.STALE_STATS,
          SUM(DECODE(TC.AVG_COL_LEN, NULL, 1, 0)) COL_LEN_NULL
        FROM 
          INDEX_INFO II,
          INDEX_STORAGE IST,
          DBA_IND_STATISTICS DIS,
          DBA_TAB_COLUMNS TC,
          DBA_IND_COLUMNS IC
        WHERE 
          II.INDEX_OWNER = IST.INDEX_OWNER AND
          II.INDEX_NAME = IST.INDEX_NAME AND
          DIS.OWNER = IST.INDEX_OWNER AND
          DIS.INDEX_NAME = IST.INDEX_NAME AND
          NVL(DIS.PARTITION_NAME, ' ') = NVL(IST.PARTITION_NAME, ' ') AND
          IST.INDEX_NAME = IC.INDEX_NAME AND
          IST.INDEX_OWNER = IC.INDEX_OWNER AND
          TC.TABLE_NAME = IC.TABLE_NAME AND
          TC.OWNER = IC.INDEX_OWNER AND
          TC.COLUMN_NAME = IC.COLUMN_NAME AND
          IST.INDEX_TYPE = 'NORMAL'
        GROUP BY 
          DIS.OWNER,
          DIS.NUM_ROWS,
          DIS.LEAF_BLOCKS,
          DIS.INDEX_NAME,
          NVL(DIS.PARTITION_NAME, ' '),
          IST.INI_TRANS,
          IST.PCT_FREE,
          DIS.USER_STATS,
          DIS.STATTYPE_LOCKED,
          DIS.STALE_STATS
        ORDER BY
          DIS.OWNER,
          DIS.INDEX_NAME,
          NVL(DIS.PARTITION_NAME, ' ')
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT 'SEGMENT ADVISOR INFORMATION (DBA_ADVISOR_TASKS, DBA_ADVISOR_FINDINGS, DBA_ADVISOR_OBJECTS):' FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('ANALYSIS_TIME', 20) || RPAD('SEGMENT_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) || RPAD('MESSAGE', 300) LINE
      FROM DUAL
    )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT * FROM
      ( SELECT
          RPAD(TO_CHAR(ANALYSIS_TIME, 'YYYY-MM-DD HH24:MI:SS'), 20) ||
          RPAD(SEGMENT_NAME, 35) ||
          RPAD(NVL(PARTITION_NAME, ' '), 30) ||
          RPAD(MESSAGE, 300)
        FROM
        ( SELECT
            DAT.EXECUTION_END ANALYSIS_TIME,
            DAO.ATTR2 SEGMENT_NAME,
            DAO.ATTR3 PARTITION_NAME,
            DAF.MESSAGE MESSAGE,
            ROW_NUMBER () OVER (PARTITION BY DAO.ATTR2 ORDER BY DAT.EXECUTION_END DESC) ROW_NUM
          FROM
            DBA_ADVISOR_TASKS DAT,
            DBA_ADVISOR_FINDINGS DAF,
            DBA_ADVISOR_OBJECTS DAO
          WHERE
            DAT.OWNER = DAF.OWNER AND
            DAT.TASK_ID = DAF.TASK_ID AND
            DAF.TASK_ID = DAO.TASK_ID AND
            DAF.OBJECT_ID = DAO.OBJECT_ID AND
            DAT.ADVISOR_NAME = 'Segment Advisor' AND
            (DAO.ATTR1, DAO.ATTR2 ) IN
            ( SELECT TABLE_OWNER, TABLE_NAME FROM TABLE_INFO UNION ALL
              SELECT INDEX_OWNER, INDEX_NAME FROM INDEX_INFO )
        )
        WHERE 
          ROW_NUM = 1
        ORDER BY
          ANALYSIS_TIME DESC,
          SEGMENT_NAME
      )
    )
/* REMOVE START */
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'SEGMENT INFORMATION (DBA_SEGMENTS, DBA_LOBS, DBA_TABLESPACES):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) || RPAD('SEGMENT_NAME', 35) || RPAD('PARTITION_NAME', 30) ||
        RPAD('SEGMENT_TYPE', 18) || RPAD('TABLESPACE_NAME', 18) || RPAD('EXTENT_MANAGEMENT', 20) ||
        RPAD('ASSM', 5) || RPAD('BUFFER_POOL', 12) || LPAD('BYTES', 15) || LPAD('EXTENTS', 8) ||
        LPAD('INITIAL', 11) || LPAD('NEXT', 8) || LPAD('MIN_EXT', 8) || LPAD('MAX_EXT', 11) ||
        LPAD('FREELISTS', 10) || LPAD('FL_GROUPS', 10) LINE
      FROM DUAL
    )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LINE
      FROM
      ( SELECT LINE
        FROM
        ( SELECT DISTINCT
            RPAD(S.OWNER, 10) ||
            RPAD(DECODE(SUBSTR(S.SEGMENT_TYPE, 1, 3), 'LOB',
              TI.TABLE_NAME || '.' || DL.COLUMN_NAME, S.SEGMENT_NAME), 35) ||
            RPAD(NVL(S.PARTITION_NAME, ' '), 30) ||
            RPAD(S.SEGMENT_TYPE, 18) ||
            RPAD(NVL(S.TABLESPACE_NAME, '-'), 18) ||
            RPAD(DECODE(TS.EXTENT_MANAGEMENT, 'LOCAL', 'LMTS (' ||
              DECODE(TS.ALLOCATION_TYPE, 'SYSTEM', 'AUTOALLOCATE', TS.ALLOCATION_TYPE) || ')',
              TS.EXTENT_MANAGEMENT), 20) ||
            RPAD(DECODE(TS.SEGMENT_SPACE_MANAGEMENT, 'AUTO', 'YES', 'NO'), 5) ||
            RPAD(S.BUFFER_POOL, 12) ||
            LPAD(NVL(S.BYTES, 0), 15) ||
            LPAD(NVL(S.EXTENTS, 0), 8) ||
            LPAD(NVL(S.INITIAL_EXTENT, 0), 11) ||
            LPAD(NVL(S.NEXT_EXTENT, 0), 8) ||
            LPAD(NVL(S.MIN_EXTENTS, 0), 8) ||
            LPAD(NVL(S.MAX_EXTENTS, 0), 11) ||
            LPAD(NVL(S.FREELISTS, 0), 10) ||
            LPAD(NVL(S.FREELIST_GROUPS, 0), 10) LINE,
            S.OWNER OWNER,
            DECODE(SUBSTR(S.SEGMENT_TYPE, 1, 3), 'LOB', TI.TABLE_NAME,
              S.SEGMENT_NAME) SEGMENT_NAME,
            S.PARTITION_NAME PARTITION_NAME,
            S.SEGMENT_TYPE SEGMENT_TYPE
          FROM
            DBA_SEGMENTS S, TABLE_INFO TI, INDEX_INFO II, DBA_LOBS DL, DBA_TABLESPACES TS
          WHERE
            S.TABLESPACE_NAME = TS.TABLESPACE_NAME AND
            DL.OWNER (+) = TI.TABLE_OWNER AND
            DL.TABLE_NAME (+) = TI.TABLE_NAME AND
            ( 
              ( S.SEGMENT_TYPE = 'TABLE' AND
                S.OWNER = TI.TABLE_OWNER AND
                S.SEGMENT_NAME = TI.TABLE_NAME ) OR
              ( S.SEGMENT_TYPE = 'TABLE PARTITION' AND
                S.OWNER = TI.TABLE_OWNER AND
                S.SEGMENT_NAME = TI.TABLE_NAME ) OR
              ( S.SEGMENT_TYPE = 'INDEX' AND
                S.OWNER = II.INDEX_OWNER AND
                S.SEGMENT_NAME = II.INDEX_NAME ) OR
              ( S.SEGMENT_TYPE = 'INDEX PARTITION' AND
                S.OWNER = II.INDEX_OWNER AND
                S.SEGMENT_NAME = II.INDEX_NAME ) OR
              ( S.SEGMENT_TYPE = 'LOBSEGMENT' AND
                S.OWNER = DL.OWNER AND
                S.SEGMENT_NAME = DL.SEGMENT_NAME ) OR
              ( S.SEGMENT_TYPE = 'LOBINDEX' AND
                S.OWNER = DL.OWNER AND
                S.SEGMENT_NAME = DL.INDEX_NAME )
            )  
          ) 
        ORDER BY
          OWNER,
          SEGMENT_NAME,
          PARTITION_NAME,
          SEGMENT_TYPE DESC
      )
    )
/* REMOVE END */
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'LOB INFORMATION (DBA_LOBS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) ||
        RPAD('TABLE_NAME', 32) ||
        RPAD('COLUMN_NAME', 32) ||
        RPAD('LOB_NAME', 32) ||
        LPAD('PCTVERSION', 11) ||
        LPAD('CACHE', 11) ||
        LPAD('IN_ROW', 7) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(DL.OWNER, 10) ||
        RPAD(DL.TABLE_NAME, 32) ||
        RPAD(DL.COLUMN_NAME, 32) ||
        RPAD(DL.SEGMENT_NAME, 32) ||
        LPAD(NVL(TO_CHAR(DL.PCTVERSION), ' '), 11) ||
        LPAD(DL.CACHE, 11) ||
        LPAD(DL.IN_ROW, 7) LINE
      FROM
        TABLE_INFO TI,
        DBA_LOBS DL
      WHERE
        TI.TABLE_OWNER = DL.OWNER AND
        TI.TABLE_NAME = DL.TABLE_NAME
    )
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'PARAMETER SETTINGS (V$PARAMETER2):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('PARAMETER_NAME', 40) ||
    RPAD('IS_DEFAULT', 11) ||
    RPAD(' VALUE', 189) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT * FROM
  ( SELECT RPAD(NAME, 40) || RPAD(ISDEFAULT, 11) || RPAD(' ' || VALUE, 189) LINE
    FROM V$PARAMETER2
    WHERE
      NAME LIKE '\_%' ESCAPE '\' OR UPPER(NAME) LIKE 'OPTIMIZER%' OR
      UPPER(NAME) IN ('EVENT', 'DB_FILE_MULTIBLOCK_READ_COUNT',
        'PGA_AGGREGATE_TARGET', 'WORKAREA_SIZE_POLICY', 'DB_CACHE_SIZE')
    ORDER BY UPPER(NAME), VALUE
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 'PARAMETER CHANGES (DBA_HIST_PARAMETER):' LINE FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('END_INTERVAL_TIME', 19) || RPAD(' PARAMETER_NAME', 40) ||
    RPAD('VALUE', 60) || RPAD('IS_DEFAULT', 11) ||
    RPAD('VALUE_BEFORE', 60) || RPAD('WAS_DEFAULT', 12) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD(END_INTERVAL_TIME, 19) || RPAD(' ' || PARAMETER_NAME, 40) || RPAD(NVL(VALUE, ' '), 60) ||
    RPAD(IS_DEFAULT, 11) || RPAD(NVL(VALUE_BEFORE, ' '), 60) || RPAD(WAS_DEFAULT, 12) LINE
  FROM
  ( SELECT
      DECODE(R.ID, 1, TO_CHAR(END_INTERVAL_TIME,
        'YYYY-MM-DD HH24:MI:SS'), ' ') END_INTERVAL_TIME,
      DECODE(R.ID, 1, PARAMETER_NAME, ' ') PARAMETER_NAME,
      SUBSTR(VALUE, 1 + 59 * (R.ID - 1), 59) VALUE,
      DECODE(R.ID, 1, IS_DEFAULT, ' ') IS_DEFAULT,
      SUBSTR(VALUE_BEFORE, 1 + 59 * (R.ID - 1), 59) VALUE_BEFORE,
      DECODE(R.ID, 1, WAS_DEFAULT, ' ') WAS_DEFAULT
    FROM
    ( SELECT ROWNUM ID FROM V$SESSTAT WHERE ROWNUM <= 20 ) R,
    ( SELECT 
        HSS.END_INTERVAL_TIME END_INTERVAL_TIME, HP2.PARAMETER_NAME PARAMETER_NAME, HP2.VALUE VALUE,
        NVL(HP2.ISDEFAULT, 'UNKNOWN') IS_DEFAULT, HP1.VALUE VALUE_BEFORE, NVL(HP1.ISDEFAULT, 'UNKNOWN') WAS_DEFAULT
      FROM
        DBA_HIST_PARAMETER HP1, DBA_HIST_PARAMETER HP2, DBA_HIST_SNAPSHOT HSS
      WHERE
        HP2.SNAP_ID = HSS.SNAP_ID AND HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
        HP1.PARAMETER_NAME = HP2.PARAMETER_NAME AND  HP2.VALUE != HP1.VALUE
      UNION 
      ( SELECT HSS.END_INTERVAL_TIME, HP2.PARAMETER_NAME, HP2.VALUE,
          NVL(HP2.ISDEFAULT, 'UNKNOWN') IS_DEFAULT, NULL VALUE_BEFORE, 'TRUE' WAS_DEFAULT
        FROM DBA_HIST_PARAMETER HP2, DBA_HIST_SNAPSHOT HSS
        WHERE
          HP2.SNAP_ID = HSS.SNAP_ID AND
          EXISTS
          ( SELECT * 
            FROM  DBA_HIST_PARAMETER HP1
            WHERE HP1.SNAP_ID = HP2.SNAP_ID - 1 AND HP1.PARAMETER_NAME = 'sessions'
          ) AND
          NOT EXISTS
          ( SELECT * 
            FROM DBA_HIST_PARAMETER HP1 
            WHERE HP1.SNAP_ID = HP2.SNAP_ID - 1 AND HP1.PARAMETER_NAME = HP2.PARAMETER_NAME
      )   )
      UNION 
      ( SELECT HSS.END_INTERVAL_TIME, HP1.PARAMETER_NAME, NULL VALUE,
          'TRUE' IS_DEFAULT, HP1.VALUE VALUE_BEFORE, NVL(HP1.ISDEFAULT, 'UNKNOWN') WAS_DEFAULT
        FROM DBA_HIST_PARAMETER HP1, DBA_HIST_SNAPSHOT HSS
        WHERE
          HP1.SNAP_ID = HSS.SNAP_ID AND
          EXISTS
          ( SELECT *
            FROM DBA_HIST_PARAMETER HP2 
            WHERE HP1.SNAP_ID = HP2.SNAP_ID - 1 AND HP2.PARAMETER_NAME = 'sessions'
          ) AND
          NOT EXISTS
          ( SELECT  *
            FROM  DBA_HIST_PARAMETER HP2
            WHERE HP1.SNAP_ID = HP2.SNAP_ID - 1 AND HP1.PARAMETER_NAME = HP2.PARAMETER_NAME
      )   )
    ) P
    WHERE R.ID <= TRUNC(LENGTH(P.VALUE) - 1) / 59 + 1 OR R.ID <= TRUNC(LENGTH(P.VALUE_BEFORE) - 1) / 59 + 1 OR R.ID <= 1
    ORDER BY P.END_INTERVAL_TIME DESC, P.PARAMETER_NAME, R.ID
) )
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL ( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL ( SELECT 'BIND VARIABLE CONTENTS (V$SQL_BIND_CAPTURE, DBA_HIST_SQLBIND):' FROM DUAL )
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL ( SELECT LPAD('CAPTURE_TIME', 19) || LPAD('NAME', 10) || RPAD(' VALUE', 80) FROM DUAL )
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT * FROM
  ( SELECT
      RPAD(CAPTURE_TIME, 19) || LPAD(NAME, 10) || RPAD(' ' || VALUE_STRING, 80)
    FROM
    ( SELECT * FROM
      ( WITH BIND_CONTENTS AS
        ( SELECT
            LAST_CAPTURED CAPTURE_TIME, POSITION, NAME, VALUE_STRING
          FROM V$SQL_BIND_CAPTURE
          WHERE SQL_ID = '&&sql_id' AND LAST_CAPTURED IS NOT NULL
          UNION
          ( SELECT LAST_CAPTURED CAPTURE_TIME, POSITION, NAME, VALUE_STRING
            FROM DBA_HIST_SQLBIND
            WHERE  SQL_ID = '&&sql_id' AND LAST_CAPTURED IS NOT NULL
        ) ),
        DISTINCT_LITERALS AS
        ( SELECT
            POSITION, NAME, MIN(VALUE_STRING) EXAMPLE_VALUE,
            COUNT(DISTINCT(VALUE_STRING)) NUM_DISTINCT
          FROM BIND_CONTENTS
          GROUP BY POSITION, NAME
        )
        SELECT * FROM
        ( SELECT DECODE(ROWNUM, 1, 'CONSTANT', ' ') CAPTURE_TIME,
            NAME, EXAMPLE_VALUE VALUE_STRING
          FROM DISTINCT_LITERALS
          WHERE NUM_DISTINCT = 1
          ORDER BY POSITION
        )
        UNION ALL ( SELECT NULL, NULL, NULL FROM DUAL )
        UNION ALL
        ( SELECT * FROM
          ( SELECT
              DECODE(CAPTURE_TIME, LAG(CAPTURE_TIME, 1) OVER
              (ORDER BY CAPTURE_TIME DESC, BC.POSITION), 
              ' ', TO_CHAR(CAPTURE_TIME, 'YYYY-MM-DD HH24:MI:SS')) CAPTURE_TIME,
              BC.NAME NAME, VALUE_STRING
            FROM BIND_CONTENTS BC, DISTINCT_LITERALS DL
            WHERE BC.NAME = DL.NAME AND DL.NUM_DISTINCT > 1
            ORDER BY BC.CAPTURE_TIME DESC, BC.POSITION
) ) ) ) ) )
);
