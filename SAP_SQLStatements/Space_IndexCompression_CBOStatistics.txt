SELECT NULL OWNER, NULL INDEX_NAME, NULL SIZE_POS, NULL IO_POS, NULL COL, NULL COMP, NULL NOCOMP_MB, NULL COMP_MB,
  NULL SAVING_MB, NULL COMP_REC FROM DUAL WHERE 1 = 0 
UNION ALL (
SELECT NULL OWNER, NULL INDEX_NAME, NULL SIZE_POS, NULL IO_POS, NULL COL, NULL COMP, NULL NOCOMP_MB, NULL COMP_MB,
  NULL SAVING_MB, NULL COMP_REC FROM DUAL WHERE 1 = 0 
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /* Quick, conservative compression analysis, higher prefix length may sometimes be better,
            all size information is related to the index leaf data part, fix overhead like ROWID is not considered */
    '%' TABLE_OWNER,
    '%' TABLE_NAME,
    '%' INDEX_NAME,
    20 NUM_RECORDS,
    -1 MIN_SAVE_PCT,
    -1 NUM_LARGEST_INDEXES,
    -1 NUM_IO_READ_INDEXES,
    'X' NO_INDEXES_WITH_HIGH_PREFIX,   /* Compressed indexes with prefix >= prefix recommendation are excluded */
    'SPACE' SORT_BY,              /* SEGMENT, SPACE */
    ' ' REBUILD_COMMAND,            /* ' ' -> prefix displayed, 'X'     -> REBUILD command, 'B' -> BRSPACE command */
    'X' ONLINE_SETTING,             /* ' ' -> no specification, 'X'     -> ONLINE                                  */
    'X' NOLOGGING_SETTING,          /* ' ' -> no specification, 'X'     -> NOLOGGING                               */
    '1' PCTFREE_SETTING,            /* ' ' -> no specification, '<pct>' -> PCTFREE  <pct>                          */
    '8' PARALLEL_SETTING,           /* ' ' -> no specification, '<deg>' -> PARALLEL <deg>                          */
    ' ' TABLESPACE_SETTING,         /* ' ' -> no specification, '<tsp>' -> TABLESPACE <tsp>                        */
    '64K' INITIAL_SETTING,          /* ' ' -> no specification, '<siz>' -> STORAGE (INITIAL <siz>)                 */
    'X' FORCE_SETTING,              /* ' ' -> no specification, 'X'     -> "-c force" for BRSPACE                  */
    ' ' OLD_BRSPACE_COMPRESS
  FROM
    DUAL
),
INDEX_SELECTION AS
( SELECT
    INDEX_OWNER,
    INDEX_NAME,
    SUM(SIZE_POS) SIZE_POS,
    SUM(IO_POS) IO_POS
  FROM
  ( SELECT
      INDEX_OWNER,
      INDEX_NAME,
      SIZE_POS,
      0 IO_POS
    FROM
    ( SELECT
        S.OWNER INDEX_OWNER,
        S.SEGMENT_NAME INDEX_NAME,
        ROW_NUMBER () OVER (ORDER BY SUM(S.BYTES) DESC) SIZE_POS,
        BI.NUM_LARGEST_INDEXES,
        BI.NUM_IO_READ_INDEXES
      FROM
        DBA_SEGMENTS S,
        BASIS_INFO BI
      WHERE
        S.SEGMENT_TYPE IN ('INDEX', 'INDEX PARTITION')
      GROUP BY
        S.OWNER,
        S.SEGMENT_NAME,
        BI.NUM_LARGEST_INDEXES,
        BI.NUM_IO_READ_INDEXES
      ORDER BY
        SUM(S.BYTES) DESC
    )
    WHERE
      SIZE_POS <= NUM_LARGEST_INDEXES OR
      ( NUM_LARGEST_INDEXES IN (-1, 0) AND NUM_IO_READ_INDEXES IN (-1, 0) )
    UNION ALL
    ( SELECT
        INDEX_OWNER,
        INDEX_NAME,
        0 SIZE_POS,
        IO_POS
      FROM
      ( SELECT
          DECODE(NVL(O.OWNER, SSO.OWNER), 
            '** UNAVAILABLE **', NVL(O2.OWNER, 'not available'),
            NVL(O.OWNER, SSO.OWNER)) INDEX_OWNER,
          DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME), 
            '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
            NVL(O.OBJECT_NAME, SSO.OBJECT_NAME)) INDEX_NAME,
          ROW_NUMBER () OVER (ORDER BY SUM(S.PHYSICAL_READS_DELTA) DESC) IO_POS,
          BI.NUM_IO_READ_INDEXES,
          BI.NUM_LARGEST_INDEXES
        FROM
          BASIS_INFO BI,
          DBA_HIST_SEG_STAT S,
          DBA_OBJECTS O,
          DBA_HIST_SEG_STAT_OBJ SSO,
          DBA_OBJECTS O2
        WHERE
          S.OBJ# = O.OBJECT_ID (+) AND
          S.DATAOBJ# = O.DATA_OBJECT_ID (+) AND
          S.OBJ# = SSO.OBJ# (+) AND
          S.DATAOBJ# = SSO.DATAOBJ# (+) AND
          S.OBJ# = O2.OBJECT_ID (+) AND
          SSO.OBJECT_TYPE IN ('INDEX', 'INDEX PARTITION')
        GROUP BY
          DECODE(NVL(O.OWNER, SSO.OWNER), 
            '** UNAVAILABLE **', NVL(O2.OWNER, 'not available'),
            NVL(O.OWNER, SSO.OWNER)),
          DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME), 
            '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
            NVL(O.OBJECT_NAME, SSO.OBJECT_NAME)),
          BI.NUM_IO_READ_INDEXES,
          BI.NUM_LARGEST_INDEXES
      )
      WHERE
        IO_POS <= NUM_IO_READ_INDEXES OR
        ( NUM_LARGEST_INDEXES IN (-1, 0) AND NUM_IO_READ_INDEXES IN (-1, 0) )
    )
  )
  GROUP BY
    INDEX_OWNER,
    INDEX_NAME
),
INDEX_INFO AS
( SELECT
    INDEX_OWNER,
    S.INDEX_NAME,
    SIZE_POS,
    IO_POS,
    UNIQUENESS,
    COMPRESSION,
    PREFIX_LENGTH,
    DISTINCT_KEYS,
    NUM_ROWS,
    PARTITIONED
  FROM
  ( SELECT
      S.INDEX_OWNER,
      S.INDEX_NAME,
      S.SIZE_POS,
      S.IO_POS,
      I.UNIQUENESS,
      I.COMPRESSION,
      I.PREFIX_LENGTH,
      I.DISTINCT_KEYS,
      I.NUM_ROWS,
      I.PARTITIONED
    FROM
      BASIS_INFO BI,
      DBA_INDEXES I,
      INDEX_SELECTION S
    WHERE
      I.TABLE_OWNER LIKE BI.TABLE_OWNER AND
      I.TABLE_NAME LIKE BI.TABLE_NAME AND
      I.INDEX_NAME LIKE BI.INDEX_NAME AND
      I.OWNER = S.INDEX_OWNER AND
      I.INDEX_NAME = S.INDEX_NAME AND
      I.INDEX_TYPE = 'NORMAL' AND
      I.DISTINCT_KEYS IS NOT NULL
  ) S
),
INDEX_ROWS AS
( SELECT
    *
  FROM
  ( SELECT
      IC.TABLE_OWNER,
      IC.TABLE_NAME,
      IC.INDEX_OWNER,
      IC.INDEX_NAME,
      IC.COLUMN_NAME,
      II.UNIQUENESS,
      II.COMPRESSION,
      II.PREFIX_LENGTH,
      II.DISTINCT_KEYS,
      II.NUM_ROWS,
      IC.COLUMN_POSITION,
      II.SIZE_POS,
      II.IO_POS,
      II.PARTITIONED,
      MAX(IC.COLUMN_POSITION) OVER (PARTITION BY IC.INDEX_OWNER, IC.INDEX_NAME) NUM_IND_COLUMNS
    FROM
      INDEX_INFO II,
      DBA_IND_COLUMNS IC
    WHERE
      II.INDEX_OWNER = IC.INDEX_OWNER AND
      II.INDEX_NAME = IC.INDEX_NAME
  )
  WHERE
    UNIQUENESS != 'UNIQUE' OR
    COLUMN_POSITION < NUM_IND_COLUMNS
),
INDEX_HELPER AS
( SELECT
    *
  FROM
  ( SELECT
      INDEX_OWNER,
      INDEX_NAME,
      COLUMN_NAME,
      UNIQUENESS,
      COMPRESSION,
      PREFIX_LENGTH,
      DISTINCT_KEYS,
      NUM_ROWS,
      SIZE_POS,
      IO_POS,
      NUM_IND_COLUMNS,
      PARTITIONED,
      DECODE(GLOBAL_STATS, 'YES', 0, 1) * NUM_IND_COLUMNS +L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12+L13+L14+L15+L16 IND_ROW_LEN,
      (DECODE(GLOBAL_STATS, 'YES', 0, 1) * NUM_IND_COLUMNS +L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12+L13+L14+L15+L16) * NUM_ROWS
        DATA_BYTE,
      GLOBAL_STATS,
      DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 1, NUM_IND_COLUMNS) + L1 L1,
      DECODE(SIGN(NUM_IND_COLUMNS - 2), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 2, NUM_IND_COLUMNS) + (L1+L2)) L2,
      DECODE(SIGN(NUM_IND_COLUMNS - 3), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 3, NUM_IND_COLUMNS) + (L1+L2+L3)) L3,
      DECODE(SIGN(NUM_IND_COLUMNS - 4), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 4, NUM_IND_COLUMNS) + (L1+L2+L3+L4)) L4,
      DECODE(SIGN(NUM_IND_COLUMNS - 5), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 5, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5)) L5,
      DECODE(SIGN(NUM_IND_COLUMNS - 6), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 6, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6)) L6,
      DECODE(SIGN(NUM_IND_COLUMNS - 7), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 7, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7)) L7,
      DECODE(SIGN(NUM_IND_COLUMNS - 8), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 8, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8)) L8,
      DECODE(SIGN(NUM_IND_COLUMNS - 9), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST( 9, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9)) L9,
      DECODE(SIGN(NUM_IND_COLUMNS - 10), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(10, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10)) L10,
      DECODE(SIGN(NUM_IND_COLUMNS - 11), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(11, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11)) L11,
      DECODE(SIGN(NUM_IND_COLUMNS - 12), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(12, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12)) L12,
      DECODE(SIGN(NUM_IND_COLUMNS - 13), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(13, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12+L13)) L13,
      DECODE(SIGN(NUM_IND_COLUMNS - 14), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(14, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12+L13+L14)) L14,
      DECODE(SIGN(NUM_IND_COLUMNS - 15), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(15, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12+L13+L14+L15)) L15,
      DECODE(SIGN(NUM_IND_COLUMNS - 16), -1, NULL, DECODE(GLOBAL_STATS, 'YES', 0, 1) *  LEAST(16, NUM_IND_COLUMNS) + (L1+L2+L3+L4+L5+L6+L7+L8+L9+L10+L11+L12+L13+L14+L15+L16)) L16,
      D1 DMAX1,
      DECODE(SIGN(NUM_IND_COLUMNS - 2), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2)) DMAX2,
      DECODE(SIGN(NUM_IND_COLUMNS - 3), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3)) DMAX3,
      DECODE(SIGN(NUM_IND_COLUMNS - 4), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4)) DMAX4,
      DECODE(SIGN(NUM_IND_COLUMNS - 5), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5)) DMAX5,
      DECODE(SIGN(NUM_IND_COLUMNS - 6), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6)) DMAX6,
      DECODE(SIGN(NUM_IND_COLUMNS - 7), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7)) DMAX7,
      DECODE(SIGN(NUM_IND_COLUMNS - 8), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8)) DMAX8,
      DECODE(SIGN(NUM_IND_COLUMNS - 9), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9)) DMAX9,
      DECODE(SIGN(NUM_IND_COLUMNS - 10), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10)) DMAX10,
      DECODE(SIGN(NUM_IND_COLUMNS - 11), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10*D11)) DMAX11,
      DECODE(SIGN(NUM_IND_COLUMNS - 12), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10*D11*D12)) DMAX12,
      DECODE(SIGN(NUM_IND_COLUMNS - 13), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10*D11*D12*D13)) DMAX13,
      DECODE(SIGN(NUM_IND_COLUMNS - 14), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10*D11*D12*D13*D14)) DMAX14,
      DECODE(SIGN(NUM_IND_COLUMNS - 15), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10*D11*D12*D13*D14*D15)) DMAX15,
      DECODE(SIGN(NUM_IND_COLUMNS - 16), -1, NULL, LEAST(DISTINCT_KEYS, D1*D2*D3*D4*D5*D6*D7*D8*D9*D10*D11*D12*D13*D14*D15*D16)) DMAX16
    FROM
    ( SELECT
        INDEX_OWNER,
        INDEX_NAME,
        COLUMN_NAME,
        UNIQUENESS,
        COMPRESSION,
        PREFIX_LENGTH,
        DISTINCT_KEYS,
        NUM_ROWS,
        SIZE_POS,
        IO_POS,
        NUM_IND_COLUMNS,
        GLOBAL_STATS,
        PARTITIONED,
        L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16,
        D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16
      FROM
      ( SELECT 
          IR.INDEX_OWNER,
          IR.INDEX_NAME,
          IR.COLUMN_NAME,
          IR.UNIQUENESS,
          IR.COMPRESSION,
          IR.PREFIX_LENGTH,
          IR.DISTINCT_KEYS,
          IR.NUM_ROWS,
          IR.COLUMN_POSITION,
          IR.SIZE_POS,
          IR.IO_POS,
          IR.NUM_IND_COLUMNS,
          TC.GLOBAL_STATS,
          TC.AVG_COL_LEN L1,
          NVL(LEAD(TC.AVG_COL_LEN, 1) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L2,
          NVL(LEAD(TC.AVG_COL_LEN, 2) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L3,
          NVL(LEAD(TC.AVG_COL_LEN, 3) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L4,
          NVL(LEAD(TC.AVG_COL_LEN, 4) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L5,
          NVL(LEAD(TC.AVG_COL_LEN, 5) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L6,
          NVL(LEAD(TC.AVG_COL_LEN, 6) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L7,
          NVL(LEAD(TC.AVG_COL_LEN, 7) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L8,
          NVL(LEAD(TC.AVG_COL_LEN, 8) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L9,
          NVL(LEAD(TC.AVG_COL_LEN, 9) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L10,
          NVL(LEAD(TC.AVG_COL_LEN, 10) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L11,
          NVL(LEAD(TC.AVG_COL_LEN, 11) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L12,
          NVL(LEAD(TC.AVG_COL_LEN, 12) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L13,
          NVL(LEAD(TC.AVG_COL_LEN, 13) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L14,
          NVL(LEAD(TC.AVG_COL_LEN, 14) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L15,
          NVL(LEAD(TC.AVG_COL_LEN, 15) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 0) L16,
          TC.NUM_DISTINCT D1,
          NVL(LEAD(TC.NUM_DISTINCT, 1) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D2,
          NVL(LEAD(TC.NUM_DISTINCT, 2) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D3,
          NVL(LEAD(TC.NUM_DISTINCT, 3) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D4,
          NVL(LEAD(TC.NUM_DISTINCT, 4) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D5,
          NVL(LEAD(TC.NUM_DISTINCT, 5) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D6,
          NVL(LEAD(TC.NUM_DISTINCT, 6) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D7,
          NVL(LEAD(TC.NUM_DISTINCT, 7) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D8,
          NVL(LEAD(TC.NUM_DISTINCT, 8) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D9,
          NVL(LEAD(TC.NUM_DISTINCT, 9) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D10,
          NVL(LEAD(TC.NUM_DISTINCT, 10) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D11,
          NVL(LEAD(TC.NUM_DISTINCT, 11) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D12,
          NVL(LEAD(TC.NUM_DISTINCT, 12) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D13,
          NVL(LEAD(TC.NUM_DISTINCT, 13) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D14,
          NVL(LEAD(TC.NUM_DISTINCT, 14) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D15,
          NVL(LEAD(TC.NUM_DISTINCT, 15) OVER (PARTITION BY INDEX_OWNER, INDEX_NAME ORDER BY IR.COLUMN_POSITION), 1) D16,
          IR.PARTITIONED
        FROM
          INDEX_ROWS IR,
          DBA_TAB_COLS TC
        WHERE
          TC.OWNER = IR.TABLE_OWNER AND
          TC.TABLE_NAME = IR.TABLE_NAME AND
          TC.COLUMN_NAME = IR.COLUMN_NAME
      )
      WHERE
        COLUMN_POSITION = 1
    )
  )
  WHERE
    DATA_BYTE IS NOT NULL
)
SELECT
  OWNER,
  INDEX_NAME,
  SIZE_POS,
  IO_POS,
  COL,
  COMP,
  NOCOMP_MB,
  COMP_MB,
  SAVING_MB,
  COMP_REC
FROM
( SELECT
    DECODE(OUTPUT_LINE, 1, OWNER, ' ') OWNER,
    DECODE(OUTPUT_LINE, 1, INDEX_NAME, ' ') INDEX_NAME,
    DECODE(OUTPUT_LINE, 1, DECODE(SIZE_POS, 0, ' ', TO_CHAR(SIZE_POS, 9999990)), ' ') SIZE_POS,
    DECODE(OUTPUT_LINE, 1, DECODE(IO_POS, 0, ' ', TO_CHAR(IO_POS, 99990)), ' ') IO_POS,
    DECODE(OUTPUT_LINE, 1, TO_CHAR(NUM_IND_COLUMNS, 90), ' ') COL,
    DECODE(OUTPUT_LINE, 1, TO_CHAR(PREFIX_LENGTH, 990), ' ') COMP,
    DECODE(OUTPUT_LINE, 1, TO_CHAR(NOCOMP_MB, 99999990), ' ') NOCOMP_MB,
    DECODE(OUTPUT_LINE, 1, TO_CHAR(OPT_COMP_MB, 9999990), ' ') COMP_MB,
    DECODE(OUTPUT_LINE, 1, TO_CHAR(SAVING_MB, 99999990), ' ') SAVING_MB,
    DECODE(OUTPUT_LINE, 1, TO_CHAR("SAVING_%", 9990.99), ' ') "SAVING_%",
    DECODE(OUTPUT_LINE, 1, "COMPRESS", 'ALTER INDEX "' || OWNER || 
      '"."' || INDEX_NAME || '" NOPARALLEL LOGGING;') COMP_REC,
    NUM_RECORDS,
    MAX(OUTPUT_LINE) OVER () MAX_OUTPUT_LINE
  FROM
  ( SELECT
      INDEX_OWNER OWNER,
      INDEX_NAME,
      SIZE_POS,
      IO_POS,
      NUM_IND_COLUMNS,
      PREFIX_LENGTH,
      OPT_PREFIX,
      NOCOMP_MB,
      OPT_COMP_MB,
      NOCOMP_MB - OPT_COMP_MB SAVING_MB,
      DECODE(NOCOMP_MB, 0, 0, 100 - OPT_COMP_MB / NOCOMP_MB * 100) "SAVING_%",
      DECODE(SIGN(NOCOMP_MB - OPT_COMP_MB), -1, 
        DECODE(REBUILD_COMMAND, 'X', ' ', '       -'), 
        DECODE(REBUILD_COMMAND, 
          'X', DECODE(PARTITIONED, 'NO', 
                 'ALTER INDEX "' || INDEX_OWNER || '"."' || INDEX_NAME || '" REBUILD' ||
               DECODE(ONLINE_SETTING, ' ', '', ' ONLINE') ||
               ' COMPRESS ' || OPT_PREFIX ||
               DECODE(PCTFREE_SETTING, ' ', '', ' PCTFREE ' || PCTFREE_SETTING) || 
               DECODE(PARALLEL_SETTING, ' ', '', ' PARALLEL ' || PARALLEL_SETTING) ||
               DECODE(TABLESPACE_SETTING, ' ', '', ' TABLESPACE ' || TABLESPACE_SETTING) ||
               DECODE(INITIAL_SETTING, ' ', '', ' STORAGE (INITIAL ' || INITIAL_SETTING || ')') ||
               DECODE(NOLOGGING_SETTING, ' ', '', ' NOLOGGING') || ';', 
               'COMPRESS ' || OPT_PREFIX || ' (partitioned index, no global rebuild possible)'),
          'B', 'brspace' ||
               DECODE(FORCE_SETTING, ' ', '', ' -c force') ||
               ' -f idrebuild -o ' || INDEX_OWNER || ' -i ' || INDEX_NAME || 
               DECODE(ONLINE_SETTING, ' ', ' -m offline', '') ||
               DECODE(OLD_BRSPACE_COMPRESS, 'X', ' -CBB ' , ' -c cind -ic ') || OPT_PREFIX || 
               DECODE(PCTFREE_SETTING, ' ', '', ' -SIF ' || PCTFREE_SETTING) || 
               DECODE(PARALLEL_SETTING, ' ', '', ' -e ' || PARALLEL_SETTING) ||
               DECODE(TABLESPACE_SETTING, ' ', '', ' -n ' || TABLESPACE_SETTING) ||
               DECODE(INITIAL_SETTING, '64K', ' -l 2', '') ||
               DECODE(NOLOGGING_SETTING, ' ', '', ' -NBR'),
          TO_CHAR(OPT_PREFIX, 9999990))) "COMPRESS",
      NUM_RECORDS,
      MIN_SAVE_PCT,
      REBUILD_COMMAND,
      PARALLEL_SETTING,
      NOLOGGING_SETTING,
      SORT_BY,
      OUTPUT_LINE,
      NO_INDEXES_WITH_HIGH_PREFIX,
      PARTITIONED
    FROM
    ( SELECT
        INDEX_OWNER,
        INDEX_NAME,
        SIZE_POS,
        IO_POS,
        NUM_IND_COLUMNS,
        PREFIX_LENGTH,
        NOCOMP_MB,
        LEAST(MAX_MB_1, NVL(MAX_MB_2, 999999999), NVL(MAX_MB_3, 999999999), 
          NVL(MAX_MB_4, 999999999), NVL(MAX_MB_5, 999999999), 
          NVL(MAX_MB_6, 999999999), NVL(MAX_MB_7, 999999999), 
          NVL(MAX_MB_8, 999999999), 
          NVL(MAX_MB_9, 999999999), NVL(MAX_MB_10, 999999999), 
          NVL(MAX_MB_11, 999999999), NVL(MAX_MB_12, 999999999), 
          NVL(MAX_MB_13, 999999999), NVL(MAX_MB_14, 999999999), 
          NVL(MAX_MB_15, 999999999), 
          NVL(MAX_MB_16, 999999999)) OPT_COMP_MB,
        DECODE(LEAST(MAX_MB_1, NVL(MAX_MB_2, 999999999), 
          NVL(MAX_MB_3, 999999999), 
          NVL(MAX_MB_4, 999999999), NVL(MAX_MB_5, 999999999), 
          NVL(MAX_MB_6, 999999999), NVL(MAX_MB_7, 999999999), 
          NVL(MAX_MB_8, 999999999), 
          NVL(MAX_MB_9, 999999999), NVL(MAX_MB_10, 999999999), 
          NVL(MAX_MB_11, 999999999), NVL(MAX_MB_12, 999999999), 
          NVL(MAX_MB_13, 999999999), NVL(MAX_MB_14, 999999999), 
          NVL(MAX_MB_15, 999999999), NVL(MAX_MB_16, 999999999)),
          MAX_MB_1, 1, MAX_MB_2, 2, MAX_MB_3, 3, MAX_MB_4, 4, 
          MAX_MB_5, 5, MAX_MB_6, 6, MAX_MB_7, 7,
          MAX_MB_8, 8, MAX_MB_9, 9, MAX_MB_10, 10, 
          MAX_MB_11, 11, MAX_MB_12, 12, MAX_MB_13, 13,
          MAX_MB_14, 14, MAX_MB_15, 15, MAX_MB_16, 16) OPT_PREFIX,
        NUM_RECORDS,
        MIN_SAVE_PCT,
        SORT_BY,
        REBUILD_COMMAND,
        ONLINE_SETTING,
        NOLOGGING_SETTING,
        PCTFREE_SETTING,
        PARALLEL_SETTING,
        TABLESPACE_SETTING,
        INITIAL_SETTING,
        FORCE_SETTING,
        NO_INDEXES_WITH_HIGH_PREFIX,
        OLD_BRSPACE_COMPRESS,
        PARTITIONED
      FROM
      ( SELECT
          INDEX_OWNER,
          IH.INDEX_NAME,
          SIZE_POS,
          IO_POS,
          NUM_IND_COLUMNS,
          PREFIX_LENGTH,
          DATA_BYTE / 1024 / 1024 NOCOMP_MB,
          ((L1 + 2) * DMAX1 + (IND_ROW_LEN - L1) * NUM_ROWS) / 1024 / 1024 MAX_MB_1,
          ((L2 + 2) * DMAX2 + (IND_ROW_LEN - L2) * NUM_ROWS) / 1024 / 1024 MAX_MB_2,
          ((L3 + 2) * DMAX3 + (IND_ROW_LEN - L3) * NUM_ROWS) / 1024 / 1024 MAX_MB_3,
          ((L4 + 2) * DMAX4 + (IND_ROW_LEN - L4) * NUM_ROWS) / 1024 / 1024 MAX_MB_4,
          ((L5 + 2) * DMAX5 + (IND_ROW_LEN - L5) * NUM_ROWS) / 1024 / 1024 MAX_MB_5,
          ((L6 + 2) * DMAX6 + (IND_ROW_LEN - L6) * NUM_ROWS) / 1024 / 1024 MAX_MB_6,
          ((L7 + 2) * DMAX7 + (IND_ROW_LEN - L7) * NUM_ROWS) / 1024 / 1024 MAX_MB_7,
          ((L8 + 2) * DMAX8 + (IND_ROW_LEN - L8) * NUM_ROWS) / 1024 / 1024 MAX_MB_8,
          ((L9 + 2) * DMAX9 + (IND_ROW_LEN - L9) * NUM_ROWS) / 1024 / 1024 MAX_MB_9,
          ((L10 + 2) * DMAX10 + (IND_ROW_LEN - L10) * NUM_ROWS) / 1024 / 1024 MAX_MB_10,
          ((L11 + 2) * DMAX11 + (IND_ROW_LEN - L11) * NUM_ROWS) / 1024 / 1024 MAX_MB_11,
          ((L12 + 2) * DMAX12 + (IND_ROW_LEN - L12) * NUM_ROWS) / 1024 / 1024 MAX_MB_12,
          ((L13 + 2) * DMAX13 + (IND_ROW_LEN - L13) * NUM_ROWS) / 1024 / 1024 MAX_MB_13,
          ((L14 + 2) * DMAX14 + (IND_ROW_LEN - L14) * NUM_ROWS) / 1024 / 1024 MAX_MB_14,
          ((L15 + 2) * DMAX15 + (IND_ROW_LEN - L15) * NUM_ROWS) / 1024 / 1024 MAX_MB_15,
          ((L16 + 2) * DMAX16 + (IND_ROW_LEN - L16) * NUM_ROWS) / 1024 / 1024 MAX_MB_16,
          BI.NUM_RECORDS,
          BI.MIN_SAVE_PCT,
          BI.SORT_BY,
          BI.REBUILD_COMMAND,
          BI.ONLINE_SETTING,
          BI.NOLOGGING_SETTING,
          BI.PCTFREE_SETTING,
          BI.PARALLEL_SETTING,
          BI.TABLESPACE_SETTING,
          BI.INITIAL_SETTING,
          BI.FORCE_SETTING,
          BI.NO_INDEXES_WITH_HIGH_PREFIX,
          BI.OLD_BRSPACE_COMPRESS,
          IH.PARTITIONED
        FROM
          INDEX_HELPER IH,
          BASIS_INFO BI
      )
    ),
    ( SELECT 1 OUTPUT_LINE FROM DUAL UNION ALL SELECT 2 OUTPUT_LINE FROM DUAL ) 
  ) S
  WHERE
    ( OUTPUT_LINE = 1 OR
      OUTPUT_LINE = 2 AND REBUILD_COMMAND = 'X' AND PARTITIONED = 'NO' AND
      ( PARALLEL_SETTING NOT IN (' ', '1') OR NOLOGGING_SETTING = 'X' ) 
    ) AND
    ( MIN_SAVE_PCT = -1 OR "SAVING_%" >= MIN_SAVE_PCT ) AND
    ( NO_INDEXES_WITH_HIGH_PREFIX = ' ' OR NVL(PREFIX_LENGTH, 0) < OPT_PREFIX )
  ORDER BY
    DECODE(SORT_BY, 'SPACE', S.SAVING_MB * 100, 1) DESC,
    S.OWNER,
    S.INDEX_NAME,
    DECODE(SORT_BY, 'SPACE', OUTPUT_LINE, 1)
  )
WHERE
  ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS * MAX_OUTPUT_LINE )
));