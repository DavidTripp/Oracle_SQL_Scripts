SELECT   
  /*+ OPT_PARAM('_COMPLEX_VIEW_MERGING', 'FALSE') 
      OPT_PARAM('_CONNECT_BY_USE_UNION_ALL', 'FALSE')
      OPT_PARAM('_OPTIMIZER_CARTESIAN_ENABLED', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_COST_BASED_TRANSFORMATION', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_DISTINCT_AGG_TRANSFORM', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_GROUP_BY_PLACEMENT', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_JOIN_SEL_SANITY_CHECK', 'FALSE') 
      OPT_PARAM('_OPTIMIZER_MJC_ENABLED', FALSE) 
      OPT_PARAM('_OPTIMIZER_NEW_JOIN_CARD_COMPUTATION', 'FALSE') 
      OPT_PARAM('_PUSH_JOIN_UNION_VIEW', 'FALSE') 
      OPT_PARAM('_PUSH_JOIN_UNION_VIEW2', 'FALSE') 
      OPT_PARAM('_PUSH_JOIN_PREDICATE', 'FALSE')
      OPT_PARAM('QUERY_REWRITE_ENABLED', 'FALSE')
  */
/*
  SQL_ID DATA COLLECTOR for Oracle >= 11.2.0.1
  Description:  Collection of comprehensive information for a SQL statement with a given SQL_ID
  Version:      2.00 (January 2nd, 2014)
  Author:       Martin Frauendorfer (SAP Active Global Support)
  Feedback:     martin.frauendorfer@sap.com
  Performance:  Runtime up to 10 minutes is acceptable, in case of longer runtime check the following:
                - Proper Oracle parameters (SAP Note 1431798)
                - Current Oracle patches 
                - Existence of DDIC and fixed objects statistics (SAP Note 838725)
                - DBA_SEGMENTS optimizations (SAP Note 871455)
                - Exclude output components based on the AREA_ACTIVATION section below
  Restrictions: - Oracle Diagnostics Pack must be licensed
                - In RAC environments only the current instance is taken into account.
  Changes:      Compared to the Oracle 10g variant the following changes are introduced:
                - Various parameters set to FALSE via hint in order to avoid problems
                - PLAN_ID aggregation of ASH samples
                - CLIENT_ID aggregation of ASH samples
                - Removal of STALE information for fragmentation in order to avoid ORA-20001
                - Usage of SQL_OPNAME in ASH rather than joining with AUDIT_ACTIONS
                - SQL statement text based on VARCHAR2 columns instead of LOB columns in order to
                  avoid terminations
                - V$SQLSTATS partially replaced with V$SQLSTATS_PLAN_HASH
                - V$SQLTEXT.PIECE fragments are concatenated using LISTAGG
                - TOP_LEVEL_SQL_ID from ASH
                - Table compression information
                - ASH: SQL activity (SQL_EXEC, SOFT_PARSE, HARD_PARSE, BIND, CONN_MGMT, PLSQL_EXEC, PLSQL_RPC, PLSQL_COMP, JAVA_EXEC, CUR_CLOSE, SEQ_LOAD)
                - ASH: PGA and TEMP information
                - SQL monitoring (GV$SQL_MONITOR, GV$SQL_PLAN_MONITOR)
                - SECUREFILE LOBs including COMPRESSION and DEDUPLICATION
                - SQL profiles, patches and plan baselines
  Usage:
    DBACOCKPIT (SQL Command Editor):
      Replace bxg5bquztu9jn at all locations with the SQL_ID you want to analyze
      Execute
      Choose monospaced output (e.g. "List" -> "Print Preview" or "List Output") for better readability
    SQLPLUS:
      Make sure that client terminal has configured width of >= 250 characters
      sqlplus / as sysdba
      COLUMN PART1 FORMAT A80
      COLUMN PART2 FORMAT A80
      COLUMN PART3 FORMAT A80
      SET LINESIZE 250
      SET PAGESIZE 0
      SET VERIFY OFF
      SPOOL sql.out
      @SQL_SQL_ID_DataCollector_11g+.txt
      <sql_id>
      SPOOL OFF
      EXIT
      Display generated text file sql.out
*/
  SUBSTR(LINE, 1, 80) PART1,
  SUBSTR(LINE, 81, 80) PART2,
  SUBSTR(LINE, 161, 80) PART3
FROM (
( SELECT
NULL LINE FROM DUAL WHERE 1 = 0 )
UNION ALL
( SELECT NULL LINE FROM DUAL WHERE 1 = 0 )
UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    SQL_ID,
    SEGMENT_INFO,
    COMPLEX_INDEX_STATS,
    ASH_INFO,
    FRAGMENTATION_INFO,
    VIEW_INFO,
    INDEX_COLUMNS,
    COMPLEX_SQL_TEXT,
    AWR_BEGIN_DATE, 
    AWR_END_DATE,
    INCLUDE_PREDICATES
  FROM
  ( SELECT
      -1 DBID,
      'bxg5bquztu9jn' SQL_ID,
      'X' SEGMENT_INFO,
      ' ' COMPLEX_INDEX_STATS,
      'X' ASH_INFO,
      'X' FRAGMENTATION_INFO,
      'X' VIEW_INFO,
      'X' INDEX_COLUMNS,
      'X' COMPLEX_SQL_TEXT,
      'X' INCLUDE_PREDICATES,
      SYSDATE - 43 AWR_BEGIN_DATE,
      SYSDATE AWR_END_DATE
    FROM
      DUAL 
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */
    MIN(SS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(SS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(SS.SNAP_ID) END_SNAP_ID,
    MAX(SS.END_INTERVAL_TIME) END_TIME,
    SUM(TO_CHAR(SS.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(SS.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(SS.END_INTERVAL_TIME, 'J') - 
               TO_CHAR(SS.BEGIN_INTERVAL_TIME, 'J')))
      SECONDS
  FROM 
    DBA_HIST_SNAPSHOT SS,
    BASIS_INFO BI
  WHERE
    SS.DBID = BI.DBID AND
    SS.BEGIN_INTERVAL_TIME >= BI.AWR_BEGIN_DATE AND
    SS.END_INTERVAL_TIME <= BI.AWR_END_DATE
),
OBJECTS AS
( SELECT /*+ MATERIALIZE */
    OWNER,
    OBJECT_NAME,
    SUBOBJECT_NAME,
    OBJECT_TYPE,
    OBJECT_ID,
    DATA_OBJECT_ID,
    CREATED,
    LAST_DDL_TIME
  FROM
    DBA_OBJECTS
),
SQL_TEXT AS 
( SELECT /*+ MATERIALIZE */
    SQL_TEXT,
    LENGTH(SQL_TEXT) LENGTH,
    LENGTH(REGEXP_REPLACE(SQL_TEXT, '[^ ]', NULL)) NUM_BLANKS,
    LENGTH(REGEXP_REPLACE(SQL_TEXT, '[^,]', NULL)) NUM_COMMA
  FROM
  ( SELECT
      REPLACE(REPLACE(REPLACE(SQL_TEXT, CHR(10), NULL), CHR(9), NULL), CHR(0), NULL) SQL_TEXT 
    FROM
    ( SELECT DISTINCT
        LISTAGG(SQL_TEXT) WITHIN GROUP (ORDER BY PIECE) OVER () SQL_TEXT
      FROM
      ( SELECT
          ST.SQL_TEXT,
          ST.PIECE
        FROM
          BASIS_INFO BI,
          V$SQLTEXT ST
        WHERE
          ST.SQL_ID = 'bxg5bquztu9jn'
        UNION ALL 
        ( SELECT 
            TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 3264)) SQL_TEXT,
            1 PIECE
          FROM
            BASIS_INFO BI,
            DBA_HIST_SQLTEXT HST
          WHERE
            HST.DBID = BI.DBID AND
            HST.SQL_ID = 'bxg5bquztu9jn' AND
            NOT EXISTS 
            ( SELECT 
                1 
              FROM 
                BASIS_INFO BI,
                V$SQLSTATS SS
              WHERE 
                SS.SQL_ID = 'bxg5bquztu9jn' 
            )
        )
      )
      WHERE
        PIECE <= 50
    )
    WHERE
      SQL_TEXT IS NOT NULL
  )
),
START_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    DECODE(ROWNUM, 
      1, 1, 
      NUM_BLANKS + 2, LENGTH + 1, 
      INSTR(STL.SQL_TEXT, ' ', 1, ROWNUM - 1) + 1) POS
  FROM
    BASIS_INFO BI,
    SQL_TEXT STL,
    ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 
      ( SELECT NUM_BLANKS + 2 FROM SQL_TEXT)
    )
  WHERE
    BI.COMPLEX_SQL_TEXT = 'X'
  UNION
  ( SELECT /*+ MATERIALIZE */
      DECODE(ROWNUM, 
        1, 1, 
        NUM_COMMA + 2, LENGTH + 1, 
        INSTR(STL.SQL_TEXT, ',', 1, ROWNUM - 1) + 1) POS
    FROM
      BASIS_INFO BI,
      SQL_TEXT STL,
      ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 
        ( SELECT NUM_COMMA + 2 FROM SQL_TEXT)
      )
    WHERE
      BI.COMPLEX_SQL_TEXT = 'X' 
  )
),
START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    POS1,
    NVL(POS2, POS_OVERFLOW) POS2
  FROM
  ( SELECT
      SP1.POS POS1,
      MAX(SP2.POS) POS2,
      MIN(SP3.POS) POS_OVERFLOW
    FROM
      START_POSITIONS SP1,
      START_POSITIONS SP2,
      START_POSITIONS SP3
    WHERE
      SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + 80 AND
      SP3.POS > SP1.POS
    GROUP BY
      SP1.POS
  )
),
START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    POS1,
    POS2
  FROM
    START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR 
    POS2 = POS1
  UNION ALL
  ( SELECT
      (R.ROWNUMBER - 1) * 80 + 1 POS1,
      R.ROWNUMBER * 80 + 1 POS2
    FROM
      BASIS_INFO BI,
      SQL_TEXT STL,
      ( SELECT ROWNUM ROWNUMBER FROM V$SESSTAT WHERE ROWNUM <= 1000 ) R
    WHERE
      BI.COMPLEX_SQL_TEXT = ' ' AND
      R.ROWNUMBER * 80 <= LENGTH(STL.SQL_TEXT) + 80
  )
),
ASH_DISTRIBUTION AS
( SELECT /*+ MATERIALIZE */
    SAMPLE_TIME,
    TO_CHAR(SAMPLE_TIME, 'YYYY-MM-DD HH24') HOUR,
    PLAN_HASH_VALUE,
    NVL(PLAN_ID, 0) PLAN_ID,
    EVENT,
    WAIT_CLASS,
    OBJECT_NAME,
    SUM(BLOCKS_ACCESSED) BLOCKS_ACCESSED,
    SQL_OPNAME,
    MODULE,
    MOD_ACTION,
    USER_NAME,
    CLIENT_ID,
    ACTIVITY,
    TOP_LEVEL_SQL_ID,
    MAX(PGA_MB) MAX_PGA_MB,
    MAX(TEMP_MB) MAX_TEMP_MB,
    COUNT(*) OCCURRENCES
  FROM
  ( SELECT DISTINCT
      DECODE(ASH.SQL_OPCODE, 
        3, ASH.SQL_PLAN_HASH_VALUE, 
        6, ASH.SQL_PLAN_HASH_VALUE, 
        7, ASH.SQL_PLAN_HASH_VALUE, 0) PLAN_HASH_VALUE,
      ASH.SQL_PLAN_LINE_ID PLAN_ID,
      ASH.SESSION_ID SID,
      ASH.SAMPLE_TIME SAMPLE_TIME,
      DECODE(SESSION_STATE,
        'WAITING', EVENT || DECODE(SUBSTR(EVENT, 1, 5),
        'enq: ', ' (' || TO_CHAR(BITAND(P1, 65535)) || ' / ' ||
        TO_CHAR(DECODE(BITAND(P1, 65535),
          1, 'Null',
          2, 'Sub-Share',
          3, 'Sub-Exclusive',
          4, 'Share',
          5, 'Share/Sub-Exclusive',
          6, 'Exclusive', 'Other')) || ')' ), 'CPU') EVENT,
      ASH.WAIT_CLASS,
      NVL(DECODE(ASH.WAIT_CLASS,
        'Application', NVL(O.OBJECT_NAME, DECODE(ASH.CURRENT_OBJ#, -1, 
        'Header / Rollback / ANALYZE', 0, 'Undo Data', 'not available')),
        'Cluster', NVL(O.OBJECT_NAME, DECODE(ASH.CURRENT_OBJ#, -1, 
        'Header / Rollback / ANALYZE', 0, 'Undo Data', 'not available')),
        'User I/O', DECODE(EVENT, 'direct path read temp', 'not available',
        'direct path write temp', 'not available', 
        'Data file init write', 'not available',
        NVL(O.OBJECT_NAME, DECODE(ASH.CURRENT_OBJ#, -1, 
        'Header / Rollback / ANALYZE', 0, 'Undo Data', NULL))),
        'not available'), 
        DECODE(SSO.OBJECT_NAME, NULL, 'not available',
          SSO.OBJECT_NAME || ' (previous)')) OBJECT_NAME,
      DECODE(ASH.WAIT_CLASS, 'User I/O', P3, 0) BLOCKS_ACCESSED,
      SQL_OPNAME,
      MODULE,
      ACTION MOD_ACTION,
      NVL(DU.USERNAME, 'not available') USER_NAME,
      NVL(ASH.CLIENT_ID, 'not available') CLIENT_ID,
      DECODE(ASH.IN_CONNECTION_MGMT,     'Y', 'CONN_MGMT ') ||
        DECODE(ASH.IN_PARSE,             'Y', 'SOFT_PARSE ') ||
        DECODE(ASH.IN_HARD_PARSE,        'Y', 'HARD_PARSE ') ||
        DECODE(ASH.IN_SQL_EXECUTION,     'Y', 'SQL_EXEC ') ||
        DECODE(ASH.IN_PLSQL_EXECUTION,   'Y', 'PLSQL_EXEC ') ||
        DECODE(ASH.IN_PLSQL_RPC,         'Y', 'PLSQL_RPC ') ||
        DECODE(ASH.IN_PLSQL_COMPILATION, 'Y', 'PLSQL_COMP ') ||
        DECODE(ASH.IN_JAVA_EXECUTION,    'Y', 'JAVA_EXEC ') ||
        DECODE(ASH.IN_BIND,              'Y', 'BIND ') ||
        DECODE(ASH.IN_CURSOR_CLOSE,      'Y', 'CUR_CLOSE ') ||
        DECODE(ASH.IN_SEQUENCE_LOAD,     'Y', 'SEQ_LOAD ') ACTIVITY,
      ASH.TOP_LEVEL_SQL_ID,
      ASH.PGA_ALLOCATED / 1024 / 1024 PGA_MB,
      ASH.TEMP_SPACE_ALLOCATED / 1024 / 1024 TEMP_MB
    FROM
      DBA_HIST_ACTIVE_SESS_HISTORY ASH,
      OBJECTS O,
      DBA_HIST_SEG_STAT_OBJ SSO,
      V$INSTANCE I, 
      DBA_USERS DU,
      BASIS_INFO BI,
      SNAPSHOTS SS
    WHERE
      I.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER AND
      ASH.CURRENT_OBJ# = O.OBJECT_ID (+) AND
      ASH.CURRENT_OBJ# = SSO.OBJ# (+) AND
      ASH.USER_ID = DU.USER_ID (+) AND
      ASH.SQL_ID = 'bxg5bquztu9jn' AND
      BI.ASH_INFO = 'X' AND
      ASH.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID
  )
  GROUP BY
    SAMPLE_TIME,
    TO_CHAR(SAMPLE_TIME, 'YYYY-MM-DD HH24'),
    PLAN_HASH_VALUE,
    PLAN_ID,
    EVENT,
    WAIT_CLASS,
    OBJECT_NAME,
    SQL_OPNAME,
    MODULE,
    MOD_ACTION,
    USER_NAME,
    CLIENT_ID,
    ACTIVITY,
    TOP_LEVEL_SQL_ID
),
BIND_CONTENTS AS
( SELECT /*+ MATERIALIZE */
    CAPTURE_TIME,
    POSITION,
    NAME,
    VALUE_STRING
  FROM
  ( SELECT
      MIN(SNAP_ID) OVER (PARTITION BY LAST_CAPTURED) MIN_SNAP_ID,
      SNAP_ID,
      LAST_CAPTURED CAPTURE_TIME, 
      POSITION, 
      NAME, 
      VALUE_STRING
    FROM 
      BASIS_INFO BI,
      DBA_HIST_SQLBIND HSB,
      SNAPSHOTS SS
    WHERE  
      HSB.SQL_ID = 'bxg5bquztu9jn' AND 
      HSB.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      LAST_CAPTURED IS NOT NULL
  )
  WHERE
    SNAP_ID = MIN_SNAP_ID
),
DISTINCT_LITERALS AS
( SELECT /*+ MATERIALIZE */
    POSITION, 
    NAME, 
    MIN(VALUE_STRING) EXAMPLE_VALUE,
    COUNT(DISTINCT(VALUE_STRING)) NUM_DISTINCT
  FROM 
    BIND_CONTENTS
  GROUP BY POSITION, NAME
),
SQL_PLANS AS
( SELECT /*+ MATERIALIZE */
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    SQL_ID,
    DEPTH,
    OPTIMIZER,
    OPERATION || DECODE(OPTIONS, NULL, NULL, ' ' || OPTIONS || 
      DECODE(OBJECT_NAME, NULL, NULL, ' (' || OBJECT_NAME || ')')) ACTION_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', 
      DECODE(SOURCE, 'HISTORY', 
        DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS), 
        NULL),
      DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS)) SEARCH_COLUMNS_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(ACCESS_PREDICATES, NULL, NULL, 
      SUBSTR(ACCESS_PREDICATES, 1, 3000)), NULL) ACCESS_PREDICATE_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(FILTER_PREDICATES, NULL, NULL, 
      SUBSTR(FILTER_PREDICATES, 1, 3000)), NULL) FILTER_PREDICATE_INFO,
    DECODE(MEMORY_USED, NULL, NULL, 'PGA space: ' || ROUND(MEMORY_USED / 1024) || ' KB' || 
      DECODE(TEMP_SPACE, NULL, NULL, ', Temp space: ' || ROUND(TEMP_SPACE / 1024) || ' KB')) SPACE_INFO,
    DECODE(PARTITION_START, NULL, NULL, 'Partitions: ' || PARTITION_START || ' - ' || PARTITION_STOP ||
      ', Partition ID: ' || PARTITION_ID) PARTITION_INFO,
    DECODE(PX_DEGREE, NULL, NULL, 1, NULL, 'PX degree: ' || PX_DEGREE) PX_INFO,
    DECODE(COST, NULL, NULL, 'Total costs: ' || TO_CHAR(COST) ) || 
      DECODE(IO_COST, NULL, NULL, ', I/O costs: ' || TO_CHAR(IO_COST) ) || 
      DECODE(COST, NULL, NULL, DECODE(IO_COST, NULL, NULL, ', CPU costs: ' || TO_CHAR(COST - IO_COST) )) || 
      DECODE(CARDINALITY, NULL, NULL, DECODE(IO_COST || COST, NULL, NULL, ', ') || 
      'E-Rows: ' || TO_CHAR(CARDINALITY) ) COST_INFO,
    DECODE(LAST_STARTS, NULL , NULL, 'Starts: ' || LAST_STARTS || ', A-Rows: ' || LAST_OUTPUT_ROWS || ', Gets: ' || LAST_BUFFER_GETS ||
      ', Reads: ' || LAST_DISK_READS || ', Time: ' || LAST_ELAPSED_TIME || ' us') PLAN_STATISTICS_INFO
  FROM 
  ( ( SELECT
        SP.PLAN_HASH_VALUE,
        TO_CHAR(SP.CHILD_NUMBER) CHILD_NUMBER,
        SP.ID,
        SP.SEARCH_COLUMNS,
        SP."DEPTH",
        SP.OPERATION,
        SP.OPTIONS,
        SP.OBJECT_NAME,
        SP.ACCESS_PREDICATES,
        SP.FILTER_PREDICATES,
        SP.TEMP_SPACE,
        SPA.LAST_MEMORY_USED MEMORY_USED,
        SPA.LAST_DEGREE PX_DEGREE,
        SP.PARTITION_START,
        SP.PARTITION_STOP,
        SP.PARTITION_ID,
        SP.COST,
        SP.IO_COST,
        SP.CARDINALITY,
        SPA.LAST_STARTS,
        SPA.LAST_OUTPUT_ROWS,
        SPA.LAST_CR_BUFFER_GETS + SPA.LAST_CU_BUFFER_GETS LAST_BUFFER_GETS,
        SPA.LAST_DISK_READS,
        SPA.LAST_ELAPSED_TIME,
        SP.OPTIMIZER,
        SP.SQL_ID,
        BI.INCLUDE_PREDICATES,
        'CURRENT' SOURCE
      FROM
        V$SQL_PLAN SP, 
        V$SQL_PLAN_STATISTICS_ALL SPA,
        BASIS_INFO BI
      WHERE
        SP.SQL_ID = SPA.SQL_ID (+) AND
        SP.CHILD_NUMBER = SPA.CHILD_NUMBER (+) AND
        SP.ID = SPA.ID (+) AND
        SP.SQL_ID = 'bxg5bquztu9jn'
    ) 
    UNION 
    ( SELECT
        PLAN_HASH_VALUE,
        'n/a' CHILD_NUMBER,
        ID,
        SEARCH_COLUMNS,
        DEPTH,
        OPERATION,
        OPTIONS,
        OBJECT_NAME,
        ACCESS_PREDICATES,
        FILTER_PREDICATES,
        TEMP_SPACE,
        NULL MEMORY_USED,
        NULL PX_DEGREE,
        PARTITION_START,
        PARTITION_STOP,
        PARTITION_ID,
        COST,
        IO_COST,
        CARDINALITY,
        NULL LAST_STARTS,
        NULL LAST_OUTPUT_ROWS,
        NULL LAST_BUFFER_GETS,
        NULL LAST_DISK_READS,
        NULL LAST_ELAPSED_TIME,
        OPTIMIZER,
        HSP.SQL_ID,
        BI.INCLUDE_PREDICATES,
        'HISTORY' SOURCE
      FROM
        DBA_HIST_SQL_PLAN HSP,
        BASIS_INFO BI
      WHERE
        HSP.DBID = BI.DBID AND
        HSP.SQL_ID = 'bxg5bquztu9jn' AND
        NOT EXISTS 
        ( SELECT 
            1 
          FROM 
            V$SQL_PLAN SP
          WHERE 
            SP.SQL_ID = HSP.SQL_ID AND 
            SP.PLAN_HASH_VALUE = HSP.PLAN_HASH_VALUE
        )
    )
  )
),
PREDICATE_INFOS AS
( SELECT /*+ MATERIALIZE */
    'ACCESS' PREDICATE_TYPE,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    DEPTH, 
    ' Access predicates: ' || ACCESS_PREDICATE_INFO || ' ' PREDICATE_INFO
  FROM
    SQL_PLANS
  WHERE
    ACCESS_PREDICATE_INFO IS NOT NULL
  UNION ALL
  ( SELECT
      'FILTER' PREDICATE_TYPE,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      DEPTH,
      ' Filter predicates: ' || FILTER_PREDICATE_INFO || ' ' PREDICATE_INFO
    FROM
      SQL_PLANS
    WHERE
      FILTER_PREDICATE_INFO IS NOT NULL
  )
  UNION ALL
  ( SELECT
      'DUMMY' PREDICATE_TYPE,
      123 PLAN_HASH_VALUE,
      '345' CHILD_NUMBER,
      567 ID,
      789 DEPTH,
      ' XXX ' PREDICATE_INFO
    FROM
      DUAL
  )
),
PRED_START_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    *
  FROM
  ( SELECT 
      PREDICATE_TYPE,
      PREDICATE_INFO,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID, 
      INSTR(PREDICATE_INFO, ' ', 1, ROWN) POS
    FROM
      PREDICATE_INFOS PI,
      ( SELECT ROWNUM ROWN FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 1000 ) RN
  )
  WHERE
    POS != 0
),
PRED_START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    POS1,
    PREDICATE_TYPE || PLAN_HASH_VALUE || CHILD_NUMBER || ID || POS1 CONN_ID1,
    POS2,
    PREDICATE_TYPE || PLAN_HASH_VALUE || CHILD_NUMBER || ID || POS2 CONN_ID2
  FROM
  ( SELECT
      PREDICATE_TYPE,
      PREDICATE_INFO,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      POS1,
      NVL(POS2, POS_OVERFLOW) POS2
    FROM
    ( SELECT
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.PLAN_HASH_VALUE,
        SP1.CHILD_NUMBER,
        SP1.ID,
        SP1.POS POS1,
        MAX(SP2.POS) POS2,
        MIN(SP3.POS) POS_OVERFLOW
      FROM
        BASIS_INFO BI,
        PRED_START_POSITIONS SP1,
        PRED_START_POSITIONS SP2,
        PRED_START_POSITIONS SP3
      WHERE
        SP2.PREDICATE_TYPE (+) = SP1.PREDICATE_TYPE AND
        SP2.PLAN_HASH_VALUE (+) = SP1.PLAN_HASH_VALUE AND
        SP2.CHILD_NUMBER (+) = SP1.CHILD_NUMBER AND
        SP2.ID (+) = SP1.ID AND
        SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + 80 AND
        SP3.PREDICATE_TYPE = SP1.PREDICATE_TYPE AND
        SP3.PLAN_HASH_VALUE = SP1.PLAN_HASH_VALUE AND
        SP3.CHILD_NUMBER = SP1.CHILD_NUMBER AND
        SP3.ID = SP1.ID AND
        SP3.POS > SP1.POS
      GROUP BY
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.PLAN_HASH_VALUE,
        SP1.CHILD_NUMBER,
        SP1.ID,
        SP1.POS
    )
  )  
),
PRED_START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    POS1,
    POS2,
    ROW_NUMBER () OVER (ORDER BY POS1) LINE
  FROM
    PRED_START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR 
    CONN_ID2 = CONN_ID1
),
LINES AS
( SELECT 1 NUM, 'ACTION' CONTENT FROM DUAL
  UNION ALL
  SELECT 2 NUM, 'COST' CONTENT FROM DUAL 
  UNION ALL
  SELECT 3 NUM, 'SEARCH COLUMNS' CONTENT FROM DUAL
  UNION ALL
  SELECT 4 NUM, 'ACCESS PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 5 NUM, 'FILTER PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 6 NUM, 'SPACE' CONTENT FROM DUAL
  UNION ALL
  SELECT 7 NUM, 'PARTITION' CONTENT FROM DUAL
  UNION ALL
  SELECT 8 NUM, 'PX' CONTENT FROM DUAL
  UNION ALL
  SELECT 9 NUM, 'PLAN STATISTICS' CONTENT FROM DUAL
  UNION ALL
  SELECT 10 NUM, 'EMPTY' CONTENT FROM DUAL
)
SELECT
  'DETAIL INFORMATION FOR SQL_ID: ' || SQL_ID LINE
FROM
  BASIS_INFO
UNION ALL
( SELECT
    RPAD('EVALUATION TIME:', 31) || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM DUAL
)
UNION ALL
( SELECT
    RPAD('ANALYSIS INTERVAL:', 31) || 
      TO_CHAR(BEGIN_TIME, 'YYYY-MM-DD HH24:MI:SS') || ' - ' || 
      TO_CHAR(END_TIME, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM 
    SNAPSHOTS
)
UNION ALL
( SELECT
    RPAD(DECODE(LINE, 1, 'LAST STARTUP TIMES:', ' '), 31) ||
    TO_CHAR(STARTUP_TIME, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM
  ( SELECT
      ROW_NUMBER () OVER (ORDER BY STARTUP_TIME DESC) LINE,
      STARTUP_TIME
    FROM
     DBA_HIST_DATABASE_INSTANCE
    ORDER BY
      STARTUP_TIME DESC
  )
  WHERE
    ROWNUM <= 5
)
UNION ALL
( SELECT
    RPAD('DATABASE NAME:', 31) || NAME
  FROM
    V$DATABASE
)
UNION ALL
( SELECT
    RPAD('INSTANCE NAME:', 31) || INSTANCE_NAME
  FROM
    V$INSTANCE
)
UNION ALL
( SELECT
    RPAD('VERSION:', 31) || VERSION
  FROM
    V$INSTANCE
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL STATEMENT (V$SQLSTATS, DBA_HIST_SQLTEXT, V$SQL):'
  FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LINE FROM
  ( SELECT
      SUBSTR(STL.SQL_TEXT, SEP.POS1, SEP.POS2 - SEP.POS1) LINE
    FROM
      START_END_LINE_POSITIONS SEP, 
      SQL_TEXT STL
    ORDER BY 
      SEP.POS1
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL CACHE (V$SQL, V$SQLSTATS_PLAN_HASH, DBA_HIST_SQLSTAT, V$SQL_MONITOR):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('BEGIN_TIME', 19) ||
    LPAD('PLAN_HASH', 11) ||
    LPAD('EXECUTIONS', 11) ||
    LPAD('ELA_TIME_MS', 12) ||
    LPAD('ELA_TIME_MS/EXE', 16) ||
    LPAD('CPU_TIME_MS', 12) ||
    LPAD('RECORDS', 12) ||
    LPAD('REC/EXEC', 12) ||
    LPAD('DISK_READS', 11) ||
    LPAD('DISK_READS/EXE', 15) ||
    LPAD('BUFFER_GETS', 12) ||
    LPAD('BUFFER_GETS/EXE', 16) ||
    LPAD('BUFFER_GETS/REC', 16) ||
    LPAD('PARSE_MS', 12) ||
    LPAD('PARSES', 7) ||
    RPAD(' MODULE', 41) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('V$SQL (Child:' || TO_CHAR(S.CHILD_NUMBER, 90) || ')', 19) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ROUND(ELAPSED_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS, 
      2)), 999999999990.99) ||
    LPAD(ROUND(CPU_TIME / 1000), 12) ||
    LPAD(ROWS_PROCESSED, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)), 
      99999990.99) ||
    LPAD(DISK_READS, 11) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),  
      99999999990.99) ||
    LPAD(BUFFER_GETS, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)), 
      999999999990.99) ||
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED, 
      2)), 999999999990.99) ||
    LPAD('not avail.', 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
    BASIS_INFO BI,
    V$SQL S
  WHERE
    S.SQL_ID = 'bxg5bquztu9jn'
)
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 19) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ROUND(ELAPSED_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS, 
      2)), 999999999990.99) ||
    LPAD(ROUND(CPU_TIME / 1000), 12) ||
    LPAD(ROWS_PROCESSED, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)), 
      99999990.99) ||
    LPAD(DISK_READS, 11) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),  
      99999999990.99) ||
    LPAD(BUFFER_GETS, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)), 
      999999999990.99) ||
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED, 
      2)), 999999999990.99) ||
    LPAD(ROUND(AVG_HARD_PARSE_TIME / 1000, 2), 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' not available in V$SQLSTATS', 41) LINE
  FROM
    BASIS_INFO BI,
    V$SQLSTATS_PLAN_HASH SS
  WHERE
    SS.SQL_ID = 'bxg5bquztu9jn'
)
UNION ALL
( SELECT
    RPAD(BEGIN_TIME, 19) || 
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) || 
    LPAD(ELAPSED_TIME_MS, 12) || 
    LPAD(ELAPSED_TIME_MS_PER_EXEC, 16) || 
    LPAD(CPU_TIME_MS, 12) ||
    LPAD(RECORDS, 12) ||
    LPAD(RECORDS_PER_EXEC, 12) || 
    LPAD(DISK_READS, 11) || 
    LPAD(DISK_READS_PER_EXEC, 15) ||
    LPAD(BUFFER_GETS, 12) || 
    LPAD(BUFFER_GETS_PER_EXEC, 16) || 
    LPAD(BUFFER_GETS_PER_RECORD, 16) ||
    LPAD(AVG_PARSE, 12) || 
    LPAD(PARSE_CALLS, 7) || 
    RPAD(' ' || MODULE, 41) LINE
  FROM
  ( SELECT
      'TOTAL (HISTORY)' BEGIN_TIME,
      SUM(HSQ.EXECUTIONS_DELTA) EXECUTIONS,
      SUM(HSQ.ROWS_PROCESSED_DELTA) RECORDS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ROWS_PROCESSED_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 99999990.99) RECORDS_PER_EXEC,
      SUM(HSQ.DISK_READS_DELTA) DISK_READS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.DISK_READS_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 99999999990.99) DISK_READS_PER_EXEC,
      SUM(HSQ.BUFFER_GETS_DELTA) BUFFER_GETS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA)), 999999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(SUM(HSQ.ROWS_PROCESSED_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) / 
        SUM(HSQ.ROWS_PROCESSED_DELTA)), 999999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ELAPSED_TIME_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.CPU_TIME_DELTA) / 
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,  
      HSQ.PLAN_HASH_VALUE,
      SUM(HSQ.PARSE_CALLS_DELTA) PARSE_CALLS, 
      ' ' MODULE
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ, 
      V$INSTANCE I,
      SNAPSHOTS SS
    WHERE
      HSQ.DBID = BI.DBID AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND 
      I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND 
      HSQ.SQL_ID = 'bxg5bquztu9jn'
    GROUP BY
      HSQ.PLAN_HASH_VALUE
    ORDER BY
      HSQ.PLAN_HASH_VALUE
  )
)
UNION ALL
( SELECT
    LPAD(BEGIN_TIME, 19) || 
    LPAD(PLAN_HASH_VALUE, 11) || 
    LPAD(EXECUTIONS, 11) || 
    LPAD(ELAPSED_TIME_MS, 12) || 
    LPAD(ELAPSED_TIME_MS_PER_EXEC, 16) ||
    LPAD(CPU_TIME_MS, 12) || 
    LPAD(RECORDS, 12) ||
    LPAD(RECORDS_PER_EXEC, 12) || 
    LPAD(DISK_READS, 11) || 
    LPAD(DISK_READS_PER_EXEC, 15) || 
    LPAD(BUFFER_GETS, 12) || 
    LPAD(BUFFER_GETS_PER_EXEC, 16) || 
    LPAD(BUFFER_GETS_PER_RECORD, 16) ||
    LPAD(AVG_PARSE, 12) ||
    LPAD(PARSE_CALLS, 7) || 
    RPAD(' ' || MODULE, 41) LINE
  FROM
  ( SELECT
      TO_CHAR(HSS.BEGIN_INTERVAL_TIME, 'YYYY-MM-DD HH24:MI:SS') BEGIN_TIME,
      NVL(HSQ.EXECUTIONS_DELTA, 0) EXECUTIONS,
      NVL(HSQ.ROWS_PROCESSED_DELTA, 0) RECORDS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.ROWS_PROCESSED_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA), 99999990.99) RECORDS_PER_EXEC,
      NVL(HSQ.DISK_READS_DELTA, 0) DISK_READS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.DISK_READS_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA), 99999999990.99) DISK_READS_PER_EXEC,
      NVL(HSQ.BUFFER_GETS_DELTA, 0) BUFFER_GETS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.BUFFER_GETS_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA), 999999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(NVL(HSQ.ROWS_PROCESSED_DELTA, 0), 0, 0, NVL(HSQ.BUFFER_GETS_DELTA, 0) /
        HSQ.ROWS_PROCESSED_DELTA), 999999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(NVL(HSQ.ELAPSED_TIME_DELTA, 0) / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.ELAPSED_TIME_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(NVL(HSQ.CPU_TIME_DELTA, 0) / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.CPU_TIME_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,
      NVL(HSQ.PARSE_CALLS_DELTA, 0) PARSE_CALLS,
      NVL(HSQ.PLAN_HASH_VALUE, 0) PLAN_HASH_VALUE,
      HSQ.MODULE MODULE
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ,
      DBA_HIST_SNAPSHOT HSS,
      SNAPSHOTS SS,
      V$INSTANCE I
    WHERE
      HSQ.DBID = BI.DBID AND
      HSS.DBID = HSQ.DBID AND
      I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND 
      HSQ.SNAP_ID = HSS.SNAP_ID AND
      HSQ.SQL_ID = 'bxg5bquztu9jn'
    ORDER BY
      HSQ.SNAP_ID DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('SOURCE', 18) || 
    LPAD('PLAN_HASH', 11) || 
    LPAD('CPU_%', 6) || 
    LPAD('USER_IO_%', 10) || 
    LPAD('APPLICATION_%', 14) ||
    LPAD('CONCURRENCY_%', 14) || 
    LPAD('OTHER_%', 8) || 
    LPAD('CLUSTER_%', 10) || 
    LPAD('PLSQL_%', 8) ||
    LPAD('JAVA_%', 7) || 
    LPAD('FETCHES_PER_EXEC', 17) || 
    LPAD('END_OF_FETCH_%', 15) ||
    LPAD('BUFFER_QUALITY_%', 17) || 
    LPAD('DISK_READ_TIME_MS', 18) ||
    LPAD('SHARABLE_MEM_KB', 16) LINE
  FROM DUAL
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 18) || 
    LPAD(PLAN_HASH_VALUE, 11) || 
    LPAD("CPU_%", 6) || 
    LPAD("USER_IO_%", 10) || 
    LPAD("APPLICATION_%", 14) ||
    LPAD("CONCURRENCY_%", 14) || 
    LPAD("OTHER_%", 8) || 
    LPAD("CLUSTER_%", 10) || 
    LPAD("PLSQL_%", 8) ||
    LPAD("JAVA_%", 7) || 
    LPAD("FETCHES_PER_EXEC", 17) || 
    LPAD("END_OF_FETCH_%", 15) ||
    LPAD("BUFFER_QUALITY_%", 17) || 
    LPAD("DISK_READ_TIME_MS", 18) ||
    LPAD(TO_CHAR(SHARABLE_MEM / 1024, 999999990.99), 16) LINE
  FROM
  ( SELECT
      ROUND(CPU_TIME / ELAPSED_TIME * 100) "CPU_%",
      ROUND(USER_IO_WAIT_TIME / ELAPSED_TIME * 100) "USER_IO_%",
      ROUND(APPLICATION_WAIT_TIME / ELAPSED_TIME * 100) "APPLICATION_%",
      ROUND(CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100) "CONCURRENCY_%",
      ROUND((ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME -
        APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME -
        CLUSTER_WAIT_TIME - PLSQL_EXEC_TIME -
        JAVA_EXEC_TIME) / ELAPSED_TIME * 100) "OTHER_%",
      ROUND(CLUSTER_WAIT_TIME / ELAPSED_TIME * 100) "CLUSTER_%",
      ROUND(PLSQL_EXEC_TIME / ELAPSED_TIME * 100) "PLSQL_%",
      ROUND(JAVA_EXEC_TIME / ELAPSED_TIME * 100) "JAVA_%",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS), 9999999999990.99) "FETCHES_PER_EXEC",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, END_OF_FETCH_COUNT / EXECUTIONS * 100), 9999999990.99) "END_OF_FETCH_%",
      TO_CHAR(DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100), 
        999999999990.99) "BUFFER_QUALITY_%",
      TO_CHAR(DECODE(DISK_READS, 0, 0, USER_IO_WAIT_TIME / DISK_READS / 1000),
        9999999999990.99) "DISK_READ_TIME_MS",
      SHARABLE_MEM,
      PLAN_HASH_VALUE
    FROM
      BASIS_INFO BI,
      V$SQLSTATS_PLAN_HASH SS
    WHERE 
      SS.SQL_ID = 'bxg5bquztu9jn' AND 
      ELAPSED_TIME > 0
  )
)
UNION ALL
( SELECT
    RPAD('DBA_HIST_SQLSTAT', 18) || 
    LPAD(PLAN_HASH_VALUE, 11) || 
    LPAD("CPU_%", 6) || 
    LPAD("USER_IO_%", 10) || 
    LPAD("APPLICATION_%", 14) ||
    LPAD("CONCURRENCY_%", 14) || 
    LPAD("OTHER_%", 8) || 
    LPAD("CLUSTER_%", 10) || 
    LPAD("PLSQL_%", 8) ||
    LPAD("JAVA_%", 7) || 
    LPAD("FETCHES_PER_EXEC", 17) || 
    LPAD("END_OF_FETCH_%", 15) ||
    LPAD("BUFFER_QUALITY_%", 17) || 
    LPAD("DISK_READ_TIME_MS", 18) ||
    LPAD(TO_CHAR(SHARABLE_MEM / 1024, 999999990.99), 16) LINE
  FROM
  ( SELECT
      ROUND(CPU_TIME_MS / ELAPSED_TIME_MS * 100) "CPU_%",
      ROUND(USER_IO_TIME_MS / ELAPSED_TIME_MS * 100) "USER_IO_%",
      ROUND(APPLICATION_TIME_MS / ELAPSED_TIME_MS * 100) "APPLICATION_%",
      ROUND(CONCURRENCY_TIME_MS / ELAPSED_TIME_MS * 100) "CONCURRENCY_%",
      ROUND((ELAPSED_TIME_MS - CPU_TIME_MS - USER_IO_TIME_MS -
        APPLICATION_TIME_MS - CONCURRENCY_TIME_MS -
        CLUSTER_TIME_MS - PLSQL_TIME_MS - 
        JAVA_TIME_MS) / ELAPSED_TIME_MS * 100) "OTHER_%",
      ROUND(CLUSTER_TIME_MS / ELAPSED_TIME_MS * 100) "CLUSTER_%",
      ROUND(PLSQL_TIME_MS / ELAPSED_TIME_MS * 100) "PLSQL_%",
      ROUND(JAVA_TIME_MS / ELAPSED_TIME_MS * 100) "JAVA_%",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS), 9999999999990.99) "FETCHES_PER_EXEC",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, END_OF_FETCH_COUNT / EXECUTIONS * 100), 9999999990.99) "END_OF_FETCH_%",
      TO_CHAR(DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100), 
        999999999990.99) "BUFFER_QUALITY_%",
      TO_CHAR(DECODE(DISK_READS, 0, 0, USER_IO_TIME_MS / DISK_READS), 
        9999999999990.99) "DISK_READ_TIME_MS",
      SHARABLE_MEM,
      PLAN_HASH_VALUE
    FROM
    ( SELECT
        ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
        ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
        ROUND(SUM(HSQ.IOWAIT_DELTA) / 1000) USER_IO_TIME_MS,
        ROUND(SUM(HSQ.APWAIT_DELTA) / 1000) APPLICATION_TIME_MS,
        ROUND(SUM(HSQ.CCWAIT_DELTA) / 1000) CONCURRENCY_TIME_MS,
        ROUND(SUM(HSQ.CLWAIT_DELTA) / 1000) CLUSTER_TIME_MS,
        ROUND(SUM(HSQ.PLSEXEC_TIME_DELTA) / 1000) PLSQL_TIME_MS,
        ROUND(SUM(JAVEXEC_TIME_DELTA) / 1000) JAVA_TIME_MS,
        SUM(BUFFER_GETS_DELTA) BUFFER_GETS,
        SUM(DISK_READS_DELTA) DISK_READS,
        SUM(FETCHES_DELTA) FETCHES,
        SUM(END_OF_FETCH_COUNT_DELTA) END_OF_FETCH_COUNT,
        SUM(EXECUTIONS_DELTA) EXECUTIONS,
        MAX(SHARABLE_MEM) SHARABLE_MEM,
        HSQ.PLAN_HASH_VALUE
      FROM
        BASIS_INFO BI,
        DBA_HIST_SQLSTAT HSQ,
        SNAPSHOTS SS,
        V$INSTANCE I
      WHERE
        HSQ.DBID = BI.DBID AND
        I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
        HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
        HSQ.SQL_ID = 'bxg5bquztu9jn'
      GROUP BY
        HSQ.PLAN_HASH_VALUE
      ORDER BY
        HSQ.PLAN_HASH_VALUE
    )
    WHERE
      ELAPSED_TIME_MS > 0
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'EXECUTION PLAN (V$SQL_PLAN, DBA_HIST_SQL_PLAN):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 
    DISTINCT LINE 
  FROM
  ( SELECT
      'SQL PROFILE ' || CHR(39) || SQL_PROFILE || CHR(39) || ' USED' LINE
    FROM
      V$SQL
    WHERE
      SQL_ID = 'bxg5bquztu9jn' AND
      SQL_PROFILE IS NOT NULL
    UNION
    ( SELECT
        'SQL PROFILE ' || CHR(39) || SQL_PROFILE || CHR(39) || ' USED' LINE
      FROM
        DBA_HIST_SQLSTAT
      WHERE
        SQL_ID = 'bxg5bquztu9jn' AND
        SQL_PROFILE IS NOT NULL
    )
    UNION
    ( SELECT
        'SQL PLAN BASELINE ' || CHR(39) || SQL_PLAN_BASELINE || CHR(39) || ' USED' LINE
      FROM
        V$SQL
      WHERE
        SQL_ID = 'bxg5bquztu9jn' AND
        SQL_PLAN_BASELINE IS NOT NULL
    )
    UNION
    ( SELECT
        'SQL PATCH ' || CHR(39) || SQL_PATCH || CHR(39) || ' USED' LINE
      FROM
        V$SQL
      WHERE
        SQL_ID = 'bxg5bquztu9jn' AND
        SQL_PATCH IS NOT NULL
    )
  )  
)  
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD(ID, 5) ||
    RPAD(' ' || SQL_PLAN_STEP, 230) LINE
  FROM
  ( SELECT
      LPAD(DECODE(L.NUM, 1, TO_CHAR(SP.ID), ' '), 4) ID,
      LPAD(' ', SP.DEPTH * 2) ||
        DECODE(L.CONTENT, 
          'ACTION',           ACTION_INFO || DECODE(SP.ID, 0, 
                              ' (Plan Hash: ' || SP.PLAN_HASH_VALUE || 
                              ', Child: ' || SP.CHILD_NUMBER || 
                              DECODE(OPTIMIZER, NULL, NULL, ', Optimizer: "' || 
                              OPTIMIZER || '"') || ')'),
          'COST',             '  ' || COST_INFO,
          'SEARCH COLUMNS',   '  ' || SEARCH_COLUMNS_INFO,
          'ACCESS PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') || 
                              SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
          'FILTER PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') || 
                              SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
          'SPACE',            '  ' || SPACE_INFO,
          'PARTITION',        '  ' || PARTITION_INFO,
          'PX',               '  ' || PX_INFO,
          'PLAN STATISTICS',  '  ' || PLAN_STATISTICS_INFO,
          'EMPTY',            ' ') SQL_PLAN_STEP
    FROM
      LINES L,
      SQL_PLANS SP,
      PRED_START_END_LINE_POSITIONS PL
    WHERE
      ( L.CONTENT = 'ACTION' AND PL.LINE = 1 OR
        L.CONTENT = 'COST' AND SP.COST_INFO IS NOT NULL AND PL.LINE = 1  OR
        L.CONTENT = 'SEARCH COLUMNS' AND SP.SEARCH_COLUMNS_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'ACCESS PREDICATE' AND SP.ACCESS_PREDICATE_INFO IS NOT NULL AND 
          PL.PREDICATE_TYPE = 'ACCESS' AND PL.PLAN_HASH_VALUE = SP.PLAN_HASH_VALUE AND
          PL.CHILD_NUMBER = SP.CHILD_NUMBER AND PL.ID = SP.ID OR
        L.CONTENT = 'FILTER PREDICATE' AND SP.FILTER_PREDICATE_INFO IS NOT NULL AND 
          PL.PREDICATE_TYPE = 'FILTER' AND PL.PLAN_HASH_VALUE = SP.PLAN_HASH_VALUE AND
          PL.CHILD_NUMBER = SP.CHILD_NUMBER AND PL.ID = SP.ID OR
        L.CONTENT = 'SPACE'            AND SP.SPACE_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PARTITION'        AND SP.PARTITION_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PX'               AND SP.PX_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PLAN STATISTICS'  AND SP.PLAN_STATISTICS_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'EMPTY' AND PL.LINE = 1
      )
    ORDER BY
      SP.PLAN_HASH_VALUE,
      SP.CHILD_NUMBER,
      SP.ID,
      L.NUM,
      PL.POS1
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL WORKAREAS (V$SQL_WORKAREA):' LINE
  FROM 
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('OPERATION_ID ', 13) ||
    RPAD('OPERATION_TYPE', 40) ||
    LPAD('LAST_MEMORY_USED', 17) ||
    LPAD('LAST_TEMPSEG_SIZE', 18) ||
    LPAD('MAX_TEMPSEG_SIZE', 17) ||
    LPAD('OPTIMAL_EXECUTIONS', 19) ||
    LPAD('ONEPASS_EXECUTIONS', 19) ||
    LPAD('MULTIPASSES_EXECUTIONS', 23) LINE
  FROM  
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(OPERATION_ID || ' ', 13) ||
      RPAD(OPERATION_TYPE, 40) ||
      LPAD(LAST_MEMORY_USED, 17) ||
      LPAD(NVL(TO_CHAR(LAST_TEMPSEG_SIZE), ' '), 18) ||
      LPAD(NVL(TO_CHAR(MAX_TEMPSEG_SIZE), ' '), 17) ||
      LPAD(OPTIMAL_EXECUTIONS, 19) ||
      LPAD(ONEPASS_EXECUTIONS, 19) ||
      LPAD(MULTIPASSES_EXECUTIONS, 23) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_WORKAREA SWA
    WHERE
      SWA.SQL_ID = 'bxg5bquztu9jn' 
    ORDER BY
      OPERATION_ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'ACTIVE SQL WORKAREAS (V$SQL_WORKAREA_ACTIVE):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('OPERATION_ID ', 13) ||
    RPAD('OPERATION_TYPE', 40) ||
    LPAD('MAX_MEMORY_USED', 17) ||
    LPAD('TEMPSEG_SIZE', 18) ||
    LPAD('NUMBER_PASSES', 14) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(OPERATION_ID || ' ', 13) ||
      RPAD(OPERATION_TYPE, 40) ||
      LPAD(MAX_MEM_USED, 17) ||
      LPAD(NVL(TO_CHAR(TEMPSEG_SIZE), ' '), 18) ||
      LPAD(NUMBER_PASSES, 14) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_WORKAREA_ACTIVE SWA
    WHERE
      SWA.SQL_ID = 'bxg5bquztu9jn' 
    ORDER BY
      OPERATION_ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'TEMPORARY SEGMENTS (V$TEMPSEG_USAGE):' LINE
  FROM 
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('TABLESPACE_NAME', 32) ||
    RPAD('CONTENTS', 10) ||
    RPAD('SEGTYPE', 10) ||
    LPAD('SIZE_MB', 10) LINE
  FROM  
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(TSU.TABLESPACE, 32) ||
      RPAD(TSU.CONTENTS, 10) ||
      RPAD(TSU.SEGTYPE, 10) ||
      TO_CHAR(SUM(TSU.BLOCKS * TS.BLOCK_SIZE) / 1024 / 1024, 999990.99) LINE
    FROM
      BASIS_INFO BI,
      V$TEMPSEG_USAGE TSU,
      DBA_TABLESPACES TS
    WHERE
      TSU.SQL_ID = 'bxg5bquztu9jn' AND
      TSU.TABLESPACE = TS.TABLESPACE_NAME
    GROUP BY
      TSU.TABLESPACE,
      TSU.CONTENTS,
      TSU.SEGTYPE
    ORDER BY
      SUM(TSU.BLOCKS * TS.BLOCK_SIZE) DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'ACTIVE SESSION HISTORY INFORMATION (DBA_HIST_ACTIVE_SESS_HISTORY):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD('USER_NAME', 30) ||
      RPAD('SQL_TYPE', 30) ||
      RPAD('MODULE', 50) ||
      RPAD('MOD_ACTION', 30) ||
      RPAD('TOP_LEVEL_SQL_ID', 17) LINE
    FROM DUAL
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(ASH.USER_NAME, 30) ||
        RPAD(ASH.SQL_OPNAME, 30) ||
        RPAD(ASH.MODULE, 50) ||
        RPAD(NVL(ASH.MOD_ACTION, ' '), 30) ||
        RPAD(NVL(ASH.TOP_LEVEL_SQL_ID, ' '), 17) LINE
      FROM 
        ASH_DISTRIBUTION ASH
      WHERE 
        ROWNUM = 1
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LPAD('AVG_CONCURRENT_EXECUTIONS', 26) ||
        LPAD('MAX_CONCURRENT_EXECUTIONS', 26) ||
        LPAD('MAX_PGA_MB', 26) ||
        LPAD('MAX_TEMP_MB', 26) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LPAD(TO_CHAR(AVG(SUM(OCCURRENCES)), 999999990.99), 26) ||
        LPAD(TO_CHAR(MAX(SUM(OCCURRENCES)), 999999990), 26) ||
        LPAD(TO_CHAR(MAX(MAX(NVL(MAX_PGA_MB, 0))), 999999990.99), 26) ||
        LPAD(TO_CHAR(MAX(MAX(NVL(MAX_TEMP_MB, 0))), 999999990.99), 26) LINE
      FROM
        ASH_DISTRIBUTION
      GROUP BY
        SAMPLE_TIME
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        LPAD('PLAN_ID', 8) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          LPAD(PLAN_ID, 8) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          PLAN_ID
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('CLIENT_ID', 26) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(CLIENT_ID, 26) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          CLIENT_ID
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
      WHERE
        ROWNUM <= 20
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('SEGMENT_NAME', 35) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(OBJECT_NAME, 35) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          OBJECT_NAME
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('EVENT', 50) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(EVENT, 50) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          EVENT
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('ACTIVITY', 30) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(NVL(ACTIVITY, ' '), 30) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          ACTIVITY
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL  
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('SEGMENT_NAME', 35) ||
        RPAD('EVENT', 50) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) ||
        LPAD('BLOCKS_PER_WAIT', 16) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(OBJECT_NAME, 35) ||
          RPAD(EVENT, 50) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) ||
          DECODE(WAIT_CLASS, 'User I/O', DECODE(EVENT, 'Data file init write', ' ',
            TO_CHAR(SUM(BLOCKS_ACCESSED) / SUM(OCCURRENCES), 999999999990.99)), ' ') LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          EVENT,
          WAIT_CLASS,
          OBJECT_NAME
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'TOP HOURS (DBA_HIST_ACTIVE_SESS_HISTORY):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('PLAN_HASH', 11) ||
    RPAD('HOUR', 20) ||
    LPAD('PLAN_PCT', 9) ||
    LPAD('TOTAL_PCT', 10) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(PLAN_HASH_VALUE, 11) ||
      RPAD(HOUR || ':00:00', 20) ||
      TO_CHAR(PLAN_PCT, 99990.99) ||
      TO_CHAR(TOTAL_PCT, 999990.99) LINE
    FROM
    ( SELECT
        PLAN_HASH_VALUE,
        HOUR,
        RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100 PLAN_PCT,
        RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100 TOTAL_PCT
      FROM
        ASH_DISTRIBUTION
      GROUP BY
        PLAN_HASH_VALUE,
        HOUR
    )
    WHERE
      TOTAL_PCT >= 2
    ORDER BY 
      PLAN_HASH_VALUE,
      PLAN_PCT DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'PATCHES (DBA_REGISTRY_HISTORY):' 
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('ACTION_DATE', 21) ||
    RPAD('ACTION', 100)
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(TO_CHAR(ACTION_TIME, 'YYYY-MM-DD HH24:MI:SS'), 21) ||
      ACTION || DECODE(VERSION, NULL, NULL, ' ' || VERSION ) || 
        DECODE(COMMENTS, NULL, NULL, ' (' || COMMENTS || ')') LINE
    FROM
      DBA_REGISTRY_HISTORY
    ORDER BY
      ACTION_TIME DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'PARAMETER SETTINGS (V$PARAMETER2):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('PARAMETER_NAME', 40) ||
    RPAD('IS_DEFAULT', 11) ||
    RPAD(' VALUE', 189) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT * FROM
  ( SELECT RPAD(NAME, 40) || RPAD(ISDEFAULT, 11) || RPAD(' ' || VALUE, 189) LINE
    FROM V$PARAMETER2
    WHERE
      NAME LIKE '\_%' ESCAPE '\' OR UPPER(NAME) LIKE 'OPTIMIZER%' OR
      UPPER(NAME) IN ('EVENT', 'DB_FILE_MULTIBLOCK_READ_COUNT',
        'PGA_AGGREGATE_TARGET', 'WORKAREA_SIZE_POLICY', 'DB_CACHE_SIZE',
        'SGA_TARGET', 'MEMORY_TARGET', 'MEMORY_MAX_TARGET', 'STAR_TRANSFORMATION_ENABLED')
    ORDER BY 
      UPPER(NAME), 
      VALUE
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 'PARAMETER CHANGES (DBA_HIST_PARAMETER):' LINE FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('BEGIN_TIME', 19) || 
    RPAD(' PARAMETER_NAME', 41) ||
    RPAD('VALUE', 60) || 
    RPAD('IS_DEFAULT', 11) ||
    RPAD('VALUE_BEFORE', 60) || 
    RPAD('WAS_DEFAULT', 12) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD(BEGIN_TIME, 19) || 
    RPAD(' ' || PARAMETER_NAME, 41) || 
    RPAD(NVL(VALUE, ' '), 60) ||
    RPAD(IS_DEFAULT, 11) || 
    RPAD(NVL(VALUE_BEFORE, ' '), 60) || 
    RPAD(WAS_DEFAULT, 12) LINE
  FROM
  ( SELECT
      DECODE(R.ID, 1, TO_CHAR(BEGIN_INTERVAL_TIME,
        'YYYY-MM-DD HH24:MI:SS'), ' ') BEGIN_TIME,
      DECODE(R.ID, 1, PARAMETER_NAME, ' ') PARAMETER_NAME,
      SUBSTR(VALUE, 1 + 59 * (R.ID - 1), 59) VALUE,
      DECODE(R.ID, 1, IS_DEFAULT, ' ') IS_DEFAULT,
      SUBSTR(VALUE_BEFORE, 1 + 59 * (R.ID - 1), 59) VALUE_BEFORE,
      DECODE(R.ID, 1, WAS_DEFAULT, ' ') WAS_DEFAULT
    FROM
    ( SELECT ROWNUM ID FROM V$SESSTAT WHERE ROWNUM <= 20 ) R,
    ( SELECT 
        HSS.BEGIN_INTERVAL_TIME, 
        HP2.PARAMETER_NAME PARAMETER_NAME, 
        HP2.VALUE VALUE,
        NVL(HP2.ISDEFAULT, 'UNKNOWN') IS_DEFAULT, 
        HP1.VALUE VALUE_BEFORE, 
        NVL(HP1.ISDEFAULT, 'UNKNOWN') WAS_DEFAULT
      FROM
        V$INSTANCE I,
        DBA_HIST_PARAMETER HP1, 
        DBA_HIST_PARAMETER HP2, 
        DBA_HIST_SNAPSHOT HSS
      WHERE
        I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
        I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
        I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
        HP2.SNAP_ID = HSS.SNAP_ID AND 
        HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
        HP1.PARAMETER_NAME = HP2.PARAMETER_NAME AND 
        ( HP2.VALUE != HP1.VALUE OR HP2.ISDEFAULT != HP1.ISDEFAULT )
      UNION 
      ( SELECT 
          HSS.BEGIN_INTERVAL_TIME, 
          HP2.PARAMETER_NAME, HP2.VALUE,
          NVL(HP2.ISDEFAULT, 'UNKNOWN') IS_DEFAULT, 
          NULL VALUE_BEFORE, 
          'TRUE' WAS_DEFAULT
        FROM 
          V$INSTANCE I,
          DBA_HIST_PARAMETER HP2, 
          DBA_HIST_SNAPSHOT HSS
        WHERE
          I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
          I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HP2.SNAP_ID = HSS.SNAP_ID AND
          EXISTS
          ( SELECT 
              * 
            FROM 
              DBA_HIST_PARAMETER HP1
            WHERE 
              I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND 
              HP1.PARAMETER_NAME = 'sessions'
          ) AND
          NOT EXISTS
          ( SELECT 
              * 
            FROM 
              DBA_HIST_PARAMETER HP1 
            WHERE 
              I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND 
              HP1.PARAMETER_NAME = HP2.PARAMETER_NAME
          )
      )
      UNION 
      ( SELECT 
          HSS.BEGIN_INTERVAL_TIME, 
          HP1.PARAMETER_NAME, 
          NULL VALUE,
          'TRUE' IS_DEFAULT, 
          HP1.VALUE VALUE_BEFORE, 
          NVL(HP1.ISDEFAULT, 'UNKNOWN') WAS_DEFAULT
        FROM 
          V$INSTANCE I,
          DBA_HIST_PARAMETER HP1, 
          DBA_HIST_SNAPSHOT HSS
        WHERE
          I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
          I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HP1.SNAP_ID = HSS.SNAP_ID AND
          EXISTS
          ( SELECT 
              *
            FROM 
              DBA_HIST_PARAMETER HP2 
            WHERE 
              I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND 
              HP2.PARAMETER_NAME = 'sessions'
          ) AND
          NOT EXISTS
          ( SELECT
              *
            FROM 
              DBA_HIST_PARAMETER HP2
            WHERE 
              I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND 
              HP1.PARAMETER_NAME = HP2.PARAMETER_NAME
          )
      )
    ) P
    WHERE 
      R.ID <= TRUNC(LENGTH(P.VALUE) - 1) / 59 + 1 OR 
      R.ID <= TRUNC(LENGTH(P.VALUE_BEFORE) - 1) / 59 + 1 OR 
      R.ID <= 1
    ORDER BY 
      P.BEGIN_INTERVAL_TIME DESC, 
      P.PARAMETER_NAME, 
      R.ID
  )
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL 
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL 
( SELECT ' ' FROM DUAL )
UNION ALL 
( SELECT 
    'BIND VALUES (V$SQL_BIND_CAPTURE, DBA_HIST_SQLBIND):' 
  FROM
    DUAL 
)
UNION ALL 
( SELECT ' ' FROM DUAL )
UNION ALL 
( SELECT
    'SAMPLES: ' || COUNT(DISTINCT(CAPTURE_TIME)) LINE
  FROM
    BIND_CONTENTS
)
UNION ALL 
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 
    LPAD('CAPTURE_TIME', 19) || 
    LPAD('NAME', 10) || 
    RPAD(' VALUE', 80) 
  FROM 
    DUAL 
)
UNION ALL 
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 
    * 
  FROM
  ( SELECT
      RPAD(CAPTURE_TIME, 19) || 
      LPAD(NAME, 10) || 
      RPAD(' ' || VALUE_STRING, 80)
    FROM
    ( SELECT 
        DECODE(ROWNUM, 1, 'CONSTANT', ' ') CAPTURE_TIME,
        NAME,
        VALUE_STRING
      FROM
      ( SELECT 
          NAME, 
          CHR(39) || EXAMPLE_VALUE || CHR(39) VALUE_STRING
        FROM 
          DISTINCT_LITERALS
        WHERE 
          NUM_DISTINCT = 1
        ORDER BY 
          POSITION
      )
      UNION ALL ( SELECT NULL, NULL, NULL FROM DUAL )
      UNION ALL
      ( SELECT 
          * 
        FROM
        ( SELECT
            DECODE(CAPTURE_TIME, LAG(CAPTURE_TIME, 1) OVER
              (ORDER BY CAPTURE_TIME DESC, BC.POSITION), 
              ' ', TO_CHAR(CAPTURE_TIME, 'YYYY-MM-DD HH24:MI:SS')) CAPTURE_TIME,
            BC.NAME NAME, 
            CHR(39) || VALUE_STRING || CHR(39) VALUE_STRING
          FROM 
            BIND_CONTENTS BC, 
            DISTINCT_LITERALS DL
          WHERE 
            BC.NAME = DL.NAME AND 
            DL.NUM_DISTINCT > 1
          ORDER BY 
            BC.CAPTURE_TIME DESC, 
            BC.POSITION
        )
      )
    )
  )
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 'SQL MONITORING (V$SQL_MONITOR, V$SQL_PLAN_MONITOR):' FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('SID', 6) ||
    RPAD(' SQL_EXEC_ID', 13) ||
    RPAD('STATUS', 16) ||
    RPAD('SQL_EXEC_START', 19) ||
    LPAD('ELAPSED_S', 10) ||
    LPAD('CPU_S', 8) ||
    LPAD('BUFFER_GETS', 12) ||
    LPAD('DISK_READS', 11) ||
    LPAD('PX_REQ', 7) ||
    LPAD('PX_ALLOC', 9) ||
    RPAD(' ERR_MSG', 20) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 
    LINE
  FROM
  ( SELECT
      LPAD(SM.SID, 6) ||
      RPAD(' ' || SM.SQL_EXEC_ID, 13) ||
      RPAD(SM.STATUS, 16) ||
      RPAD(TO_CHAR(SM.SQL_EXEC_START, 'dd.mm.yyyy hh24:mi:ss'), 19) ||
      LPAD(ROUND(SM.ELAPSED_TIME / 1000000), 10) ||
      LPAD(ROUND(SM.CPU_TIME / 1000000), 8) ||
      LPAD(SM.BUFFER_GETS, 12) ||
      LPAD(SM.DISK_READS, 11) ||
      LPAD(NVL(TO_CHAR(SM.PX_SERVERS_REQUESTED), ' '), 7) ||
      LPAD(NVL(TO_CHAR(SM.PX_SERVERS_ALLOCATED), ' '), 9) ||
      RPAD(' ' || SUBSTR(SM.ERROR_MESSAGE, 1, INSTR(SM.ERROR_MESSAGE, ':') - 1), 20) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_MONITOR SM
    WHERE
      SM.SQL_ID = 'bxg5bquztu9jn'
    ORDER BY
      SM.SQL_EXEC_START DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('SID', 6) ||
    RPAD(' SQL_EXEC_ID', 13) ||
    RPAD('PLAN_ID', 8) ||
    LPAD('STARTS', 10) ||
    LPAD('OUTPUT_ROWS', 12) ||
    LPAD('IO_READ_MB', 11) ||
    LPAD('WA_TEMP_MB', 11) ||
    ' ACTION_INFO' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE 
  FROM
  ( SELECT
      LPAD(DECODE(SPM.PLAN_LINE_ID, 0, TO_CHAR(SPM.SID), ' '), 6) ||
      RPAD(' ' || DECODE(SPM.PLAN_LINE_ID, 0, TO_CHAR(SPM.SQL_EXEC_ID), ' '), 13) ||
      RPAD(TO_CHAR(SPM.PLAN_LINE_ID), 8) || 
      LPAD(TO_CHAR(SPM.STARTS), 10) ||
      LPAD(TO_CHAR(SPM.OUTPUT_ROWS), 12) || 
      LPAD(TO_CHAR(SPM.PHYSICAL_READ_BYTES / 1024 / 1024, 999999990), 11) ||
      LPAD(NVL(TO_CHAR(SPM.WORKAREA_MAX_TEMPSEG / 1024 / 1024, 99999990), ' '), 11) ||
      LPAD(' ', SPM.PLAN_DEPTH + 1, ' ') || 
        SPM.PLAN_OPERATION || 
        DECODE(SPM.PLAN_OPTIONS, NULL, NULL, ' ' || SPM.PLAN_OPTIONS || 
        DECODE(SPM.PLAN_OBJECT_NAME, NULL, NULL, ' (' || SPM.PLAN_OBJECT_NAME || ')')) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_PLAN_MONITOR SPM
    WHERE
      SPM.SQL_ID = 'bxg5bquztu9jn' 
    ORDER BY
      SPM.SQL_EXEC_START DESC,
      SPM.SID,
      SPM.SQL_ID,
      SPM.SQL_EXEC_ID,
      SPM.PLAN_LINE_ID
  )
)
/* Disabling because of parse loop 
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('SID', 6) ||
    RPAD(' SQL_EXEC_ID', 13) ||    
    RPAD('SQL_EXEC_START', 20) ||
    RPAD('NAME', 10) ||
    'VALUE_STRING' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(DECODE(BV.POS, 1, TO_CHAR(SMX.SID), ' '), 6) ||
      RPAD(' ' || DECODE(BV.POS, 1, TO_CHAR(SMX.SQL_EXEC_ID), ' '), 13) ||
      RPAD(DECODE(BV.POS, 1, TO_CHAR(SMX.SQL_EXEC_START, 'dd.mm.yyyy hh24:mi:ss'), ' '), 20) ||
      RPAD(BV.NAME, 10) ||
      CHR(39) || BV.VALUE || CHR(39) LINE
    FROM
      V$SQL_MONITOR SMX,
      XMLTABLE
      ( '/binds/bind'
        PASSING XMLTYPE(SMX.BINDS_XML)
        COLUMNS NAME VARCHAR2(30) PATH '@name',
                VALUE VARCHAR2(4000) PATH '.',
                TYPE VARCHAR2(15) PATH '@dtystr',
                POS NUMBER PATH '@pos'
      ) BV
    WHERE
      SMX.BINDS_XML IS NOT NULL AND
      SMX.SQL_ID = 'bxg5bquztu9jn'
    ORDER BY
      SMX.SQL_EXEC_START DESC,
      SMX.SID,
      SMX.SQL_EXEC_ID,
      BV.POS
  )
)
*/
)
));
