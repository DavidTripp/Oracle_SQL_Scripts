SELECT  /* 11g: BLOCKING_INST_ID */ /*+ OPT_PARAM('_PUSH_JOIN_PREDICATE', 'FALSE') */
  NULL SQL_ID, NULL ACTION, NULL NUM_WAITERS, NULL "WAITERS_%", NULL AVG_WAITERS, NULL SAMPLE_TIMES
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT 
  NULL SQL_ID, NULL ACTION, NULL NUM_WAITERS, NULL "WAITERS_%", NULL AVG_WAITERS, NULL SAMPLE_TIMES
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    SQL_ID,
    EVENT,
    NUM_RECORDS,
    HOLDER_AGGREGATION,
    DATA_SOURCE
  FROM
  ( SELECT
      -1 DBID,
      -2 INSTANCE_NUMBER,          /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 00:01:30', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 00:01:40', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,   /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      '%' SQL_ID,
      'latch: row cache objects' EVENT,
      20 NUM_RECORDS,
      '' HOLDER_AGGREGATION,      /* 'EVENT': Aggregation by event, 'SQL_ID': Aggregation by SQL_ID, NULL: Aggregation by event and SQL_ID */ 
      'CURRENT' DATA_SOURCE          /* AWR, CURRENT */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE ) 
),
SNAPSHOTS AS
( SELECT 
    HSS.DBID,
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    HSS.DBID = BI.DBID AND
    HSS.END_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.BEGIN_INTERVAL_TIME <= BI.END_TIME AND
    ( BI.BEGIN_SNAP_ID = -1 OR
      HSS.SNAP_ID >= BI.BEGIN_SNAP_ID ) AND 
    ( BI.END_SNAP_ID = -1 OR
      HSS.SNAP_ID <= BI.END_SNAP_ID ) AND
    ( BI.INSTANCE_NUMBER = -2 OR
      HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER )
  GROUP BY
    HSS.DBID,
    HSS.INSTANCE_NUMBER
)
SELECT 
  'BEGIN TIME:' SQL_ID,
  TO_CHAR(MAX(GREATEST(BI.BEGIN_TIME, SS.BEGIN_TIME)), 'dd.mm.yyyy hh24:mi:ss') ACTION,
  NULL NUM_WAITERS,
  NULL "WAITERS_%",
  NULL AVG_WAITERS,
  NULL SAMPLE_TIMES
FROM
  BASIS_INFO BI,
  SNAPSHOTS SS
UNION ALL
( SELECT 
    'END TIME:' SQL_ID,
    TO_CHAR(MIN(LEAST(BI.END_TIME, SS.END_TIME)), 'dd.mm.yyyy hh24:mi:ss') ACTION,
    NULL NUM_WAITERS,
    NULL "WAITERS_%",
    NULL AVG_WAITERS,
    NULL SAMPLE_TIMES
  FROM
    BASIS_INFO BI,
    SNAPSHOTS SS
)
UNION ALL
( SELECT
    'SQL_ID:' SQL_ID,
    DECODE(SQL_ID, '%', 'any', SQL_ID) ACTION,
    NULL NUM_WAITERS,
    NULL "WAITERS_%",
    NULL AVG_WAITERS,
    NULL SAMPLE_TIMES
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    'EVENT:' SQL_ID,
    DECODE(EVENT, '%', 'any', EVENT) ACTION,
    NULL NUM_WAITERS,
    NULL "WAITERS_%",
    NULL AVG_WAITERS,
    NULL SAMPLE_TIMES
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    NULL SQL_ID,
    NULL ACTION,
    NULL NUM_WAITERS,
    NULL "WAITERS_%",
    NULL AVG_WAITERS,
    NULL SAMPLE_TIMES
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    SQL_ID,
    ACTION,
    TO_CHAR(TOTAL_WAITERS, 9999999990) NUM_WAITERS,
    TO_CHAR(RATIO_TO_REPORT(TOTAL_WAITERS) OVER () * 100, 99990.99) "WAITERS_%",
    TO_CHAR(AVG_WAITERS, 9999990.99) AVG_WAITERS,
    TO_CHAR(OCCURRENCES, 99999999990) SAMPLE_TIMES
  FROM
  ( SELECT
      COUNT(*) OCCURRENCES,
      ACTION,
      SQL_ID,
      SUM(NUM_WAITERS) TOTAL_WAITERS,
      ROUND(SUM(NUM_WAITERS) / COUNT(*), 2) AVG_WAITERS,
      NUM_RECORDS
    FROM
    ( SELECT /*+ CARDINALITY(ASW.ASH 10000) */ 
        TO_CHAR(ASW.SAMPLE_TIME, 'YYYY-MM-DD HH24:MI:SS') SAMPLE_TIME,
        COUNT(*) "NUM_WAITERS",
        DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE',
          DECODE(BI.HOLDER_AGGREGATION, 'SQL_ID', 'any',
            DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE', 
            'WAITING', ASH.EVENT, 'CPU'))) ACTION,
        DECODE(BI.HOLDER_AGGREGATION, 'EVENT', 'any', ASH.SQL_ID) SQL_ID,
        BI.HOLDER_AGGREGATION,
        BI.NUM_RECORDS
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_ACTIVE_SESS_HISTORY ASH, 
        DBA_HIST_ACTIVE_SESS_HISTORY ASW
      WHERE
        BI.DBID = ASW.DBID AND 
        ASW.DBID = ASH.DBID (+) AND
        SS.INSTANCE_NUMBER = ASW.INSTANCE_NUMBER AND
        ASW.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
        ASW.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
        ASH.SAMPLE_TIME (+) = ASW.SAMPLE_TIME AND
        ASH.SESSION_ID (+) =  ASW.BLOCKING_SESSION AND
        ASH.INSTANCE_NUMBER (+) = ASW.BLOCKING_INST_ID AND
        ASW.EVENT LIKE BI.EVENT AND
        ASW.SESSION_STATE = 'WAITING' AND
        NVL(ASW.SQL_ID, ' ') LIKE BI.SQL_ID AND
        BI.DATA_SOURCE = 'AWR'
      GROUP BY
        ASW.SAMPLE_TIME,
        DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE',
          DECODE(BI.HOLDER_AGGREGATION, 'SQL_ID', 'any',
            DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE', 
            'WAITING', ASH.EVENT, 'CPU'))),
        ASH.SQL_ID,
        BI.HOLDER_AGGREGATION,
        BI.NUM_RECORDS
      UNION ALL
      ( SELECT /*+ CARDINALITY(ASW.ASH 10000) */ 
          TO_CHAR(ASW.SAMPLE_TIME, 'YYYY-MM-DD HH24:MI:SS') SAMPLE_TIME,
          COUNT(*) "NUM_WAITERS",
          DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE',
            DECODE(BI.HOLDER_AGGREGATION, 'SQL_ID', 'any',
              DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE', 
              'WAITING', ASH.EVENT, 'CPU'))) ACTION,
          DECODE(BI.HOLDER_AGGREGATION, 'EVENT', 'any', ASH.SQL_ID) SQL_ID,
          BI.HOLDER_AGGREGATION,
          BI.NUM_RECORDS
        FROM
          BASIS_INFO BI,
          SNAPSHOTS SS,
          GV$ACTIVE_SESSION_HISTORY ASH, 
          GV$ACTIVE_SESSION_HISTORY ASW
        WHERE
          SS.INSTANCE_NUMBER = ASW.INST_ID AND
          ASW.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
          ASH.SAMPLE_TIME (+) = ASW.SAMPLE_TIME AND
          ASH.SESSION_ID (+) =  ASW.BLOCKING_SESSION AND
          ASH.INST_ID (+) = ASW.BLOCKING_INST_ID AND
          ASW.EVENT LIKE BI.EVENT AND
          ASW.SESSION_STATE = 'WAITING' AND
          NVL(ASW.SQL_ID, ' ') LIKE BI.SQL_ID AND
          BI.DATA_SOURCE = 'CURRENT'
        GROUP BY
          ASW.SAMPLE_TIME,
          DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE',
            DECODE(BI.HOLDER_AGGREGATION, 'SQL_ID', 'any',
              DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE', 
              'WAITING', ASH.EVENT, 'CPU'))),
          ASH.SQL_ID,
          BI.HOLDER_AGGREGATION,
          BI.NUM_RECORDS
      )
    )
    GROUP BY
      ACTION,
      SQL_ID,
      NUM_RECORDS
    ORDER BY
      SUM(NUM_WAITERS) DESC
  )
  WHERE 
    ROWNUM <= NUM_RECORDS
)
));
