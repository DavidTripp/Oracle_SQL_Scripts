SELECT NULL TYPE, NULL SQL_ID, NULL SID, NULL ID, NULL OPERATION_TYPE, NULL PGA_MB, NULL MAX_PGA_MB,
  NULL TEMP_MB, NULL MAX_TEMP_MB, NULL NUM_PASSES, NULL OPTIMAL, NULL ONEPASS, NULL MULTIPASS FROM DUAL
  WHERE 1 = 0
UNION ALL (
SELECT NULL TYPE, NULL SQL_ID, NULL SID, NULL ID, NULL OPERATION_TYPE, NULL PGA_MB, NULL MAX_PGA_MB,
  NULL TEMP_MB, NULL MAX_TEMP_MB, NULL NUM_PASSES, NULL OPTIMAL, NULL ONEPASS, NULL MULTIPASS FROM DUAL
  WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    SQL_ID,
    SID,
    WA_TYPE,
    TEMP_MB_LIMIT,
    PGA_MB_LIMIT,
    NUM_RECORDS,
    ORDER_BY,
    ONLY_MULTIPASSES
  FROM
  ( SELECT
      '%' SQL_ID,
      -1 SID,
      -1 INSTANCE_NUMBER,
      'ALL' WA_TYPE,       /* ALL, INACTIVE, ACTIVE */
      -1 TEMP_MB_LIMIT,
      -1 PGA_MB_LIMIT,
      30 NUM_RECORDS,
      'TEMP_MB' ORDER_BY,        /* TEMP_MB, PGA_MB */
      ' ' ONLY_MULTIPASSES
    FROM
      DUAL
   )
)
SELECT
  TYPE,
  SQL_ID,
  SID,
  ID,
  OPERATION_TYPE,
  PGA_MB,
  MAX_PGA_MB,
  TEMP_MB,
  MAX_TEMP_MB,
  NUM_PASSES,
  OPTIMAL,
  ONEPASS,
  MULTIPASS
FROM
( SELECT
    TYPE,
    SQL_ID,
    DECODE(SID, -1, '  n/a', TO_CHAR(SID, 9990)) SID,
    TO_CHAR(ID, 990) ID,
    OPERATION_TYPE,
    TO_CHAR(PGA_MB, 99990.99) PGA_MB,
    DECODE(MAX_PGA_MB, -1, '       n/a', TO_CHAR(MAX_PGA_MB, 999990.99)) MAX_PGA_MB,
    TO_CHAR(TEMP_MB, 999990.99) TEMP_MB,
    DECODE(MAX_TEMP_MB, -1, '        n/a', TO_CHAR(MAX_TEMP_MB, 9999990.99)) MAX_TEMP_MB,
    DECODE(NUM_PASSES, -1, '       n/a', TO_CHAR(NUM_PASSES, 999999990)) NUM_PASSES,
    DECODE(OPTIMAL, -1, '      n/a', TO_CHAR(OPTIMAL, 99999990)) OPTIMAL,
    DECODE(ONEPASS, -1, '    n/a', TO_CHAR(ONEPASS, 999990)) ONEPASS,
    DECODE(MULTIPASS, -1, '      n/a', TO_CHAR(MULTIPASS, 99999990)) MULTIPASS,
    NUM_RECORDS
  FROM
  ( SELECT
      'INACTIVE' TYPE,
      SW.SQL_ID,
      -1 SID,
      OPERATION_ID ID,
      OPERATION_TYPE,
      LAST_MEMORY_USED / 1024 / 1024 PGA_MB,
      -1 MAX_PGA_MB,
      NVL(LAST_TEMPSEG_SIZE, 0) / 1024 / 1024 TEMP_MB,
      NVL(MAX_TEMPSEG_SIZE, 0) / 1024 / 1024 MAX_TEMP_MB,
      -1 NUM_PASSES,
      OPTIMAL_EXECUTIONS OPTIMAL,
      ONEPASS_EXECUTIONS ONEPASS,
      MULTIPASSES_EXECUTIONS MULTIPASS,
      BI.ORDER_BY,
      BI.NUM_RECORDS
    FROM
      BASIS_INFO BI,
      GV$SQL_WORKAREA SW
    WHERE
      BI.INSTANCE_NUMBER = SW.INST_ID AND
      SW.SQL_ID LIKE BI.SQL_ID AND
      BI.SID = -1 AND
      BI.WA_TYPE IN ('ALL', 'INACTIVE') AND
      ( BI.TEMP_MB_LIMIT = -1 OR 
        SW.LAST_TEMPSEG_SIZE / 1024 / 1024 >= BI.TEMP_MB_LIMIT OR
        SW.MAX_TEMPSEG_SIZE / 1024 / 1024 >= BI.TEMP_MB_LIMIT
      ) AND
      ( BI.PGA_MB_LIMIT = -1 OR
        SW.LAST_MEMORY_USED / 1024 / 1024 >= BI.PGA_MB_LIMIT
      ) AND
      ( BI.ONLY_MULTIPASSES = ' ' OR MULTIPASSES_EXECUTIONS > 0 )
    UNION ALL
    ( SELECT
        'ACTIVE' TYPE,
        SW.SQL_ID,
        SW.SID,
        OPERATION_ID ID,
        OPERATION_TYPE,
        ACTUAL_MEM_USED / 1024 / 1024 PGA_MB,
        MAX_MEM_USED / 1024 / 1024 MAX_PGA_MB,
        NVL(TEMPSEG_SIZE, 0) / 1024 / 1024 TEMP_MB,
        -1 MAX_TEMP_MB,
        NUMBER_PASSES NUM_PASSES,
        -1 OPTIMAL,
        -1 ONEPASS,
        -1 MULTIPASS,
        BI.ORDER_BY,
        BI.NUM_RECORDS
      FROM
        BASIS_INFO BI,
        GV$SQL_WORKAREA_ACTIVE SW
      WHERE
        BI.INSTANCE_NUMBER = SW.INST_ID AND
        SW.SQL_ID LIKE BI.SQL_ID AND
        ( BI.SID = -1 OR SW.SID = BI.SID ) AND
        BI.WA_TYPE IN ('ALL', 'ACTIVE') AND
        ( BI.TEMP_MB_LIMIT = -1 OR 
          SW.TEMPSEG_SIZE / 1024 / 1024 >= BI.TEMP_MB_LIMIT 
        ) AND
        ( BI.PGA_MB_LIMIT = -1 OR
          SW.ACTUAL_MEM_USED / 1024 / 1024 >= BI.PGA_MB_LIMIT OR
          SW.MAX_MEM_USED / 1024 / 1024 >= BI.PGA_MB_LIMIT 
        ) AND
        BI.ONLY_MULTIPASSES = ' '
    )
  ) S
  ORDER BY
    DECODE(ORDER_BY, 
      'PGA_MB', GREATEST(S.PGA_MB, S.MAX_PGA_MB), 
      'TEMP_MB', GREATEST(S.TEMP_MB, S.MAX_TEMP_MB)) DESC
)
WHERE
  ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS )
));
