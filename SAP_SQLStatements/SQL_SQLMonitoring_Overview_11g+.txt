SELECT NULL INST, NULL SID, NULL SQL_ID, NULL SQL_EXEC_ID, NULL STATUS, NULL SQL_EXEC_START,
  NULL ELAPSED_S, NULL CPU_S, NULL BUFFER_GETS, 
  NULL DISK_READS, NULL PX_REQ, NULL PX_ALLOC, NULL ERR_MSG
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL INST, NULL SID, NULL SQL_ID, NULL SQL_EXEC_ID, NULL STATUS, NULL SQL_EXEC_START,
  NULL ELAPSED_S, NULL CPU_S, NULL BUFFER_GETS, 
  NULL DISK_READS, NULL PX_REQ, NULL PX_ALLOC, NULL ERR_MSG
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    SESSION_ID,
    SQL_ID,
    ONLY_DOWNGRADES,
    STATUS,
    MIN_ELAPSED_TIME_S,
    MIN_CPU_TIME_S,
    SORT_BY
  FROM
  ( SELECT
      -1 INSTANCE_NUMBER,
      -1 SESSION_ID,
      '%' SQL_ID,
      -1 MIN_ELAPSED_TIME_S,
      -1 MIN_CPU_TIME_S,
      ' ' ONLY_DOWNGRADES,    /* allocated PX degree < requested PX degree, not necessarily a real downgrade
                                 (e.g. if number of partitions is smaller than requested PX degree) */
      '%' STATUS,    /* EXECUTING, DONE (ERROR), DONE (FIRST N ROWS), DONE (ALL ROWS) or DONE */
      'START_TIME' SORT_BY      /* START_TIME, ELAPSED, CPU, BUFFER_GETS, DISK_READS */
    FROM
      DUAL
  )
)
SELECT
  TO_CHAR(SM.INST_ID, 990) INST,
  TO_CHAR(SM.SID, 999990) SID,
  SM.SQL_ID,
  TO_CHAR(SM.SQL_EXEC_ID, 9999999990) SQL_EXEC_ID,
  SM.STATUS,
  TO_CHAR(SM.SQL_EXEC_START, 'dd.mm.yyyy hh24:mi:ss') SQL_EXEC_START,
  TO_CHAR(SM.ELAPSED_TIME / 1000000, 99999990) ELAPSED_S,
  TO_CHAR(SM.CPU_TIME / 1000000, 99999990) CPU_S,
  TO_CHAR(SM.BUFFER_GETS, 99999999990) BUFFER_GETS,
  TO_CHAR(SM.DISK_READS, 999999990) DISK_READS,
  TO_CHAR(SM.PX_SERVERS_REQUESTED, 99990) PX_REQ,
  TO_CHAR(SM.PX_SERVERS_ALLOCATED, 9999990) PX_ALLOC,
  SUBSTR(SM.ERROR_MESSAGE, 1, INSTR(SM.ERROR_MESSAGE, ':') - 1) ERR_MSG
FROM
  BASIS_INFO BI,
  GV$SQL_MONITOR SM
WHERE
  ( BI.INSTANCE_NUMBER = -1 OR BI.INSTANCE_NUMBER = SM.INST_ID ) AND
  ( BI.SESSION_ID = -1 OR SM.SID = BI.SESSION_ID ) AND
  SM.SQL_ID LIKE BI.SQL_ID AND
  SM.STATUS LIKE BI.STATUS AND
  ( BI.MIN_ELAPSED_TIME_S = -1 OR SM.ELAPSED_TIME / 1000000 >= BI.MIN_ELAPSED_TIME_S ) AND
  ( BI.MIN_CPU_TIME_S = -1 OR SM.CPU_TIME / 1000000 >= BI.MIN_CPU_TIME_S ) AND
  ( BI.ONLY_DOWNGRADES = ' ' OR SM.PX_SERVERS_REQUESTED > SM.PX_SERVERS_ALLOCATED )
ORDER BY
  DECODE(BI.SORT_BY, 'START_TIME', SM.SQL_EXEC_START) DESC,
  DECODE(BI.SORT_BY, 'ELAPSED', SM.ELAPSED_TIME, 'CPU', SM.CPU_TIME, 
    'BUFFER_GETS', SM.BUFFER_GETS, 'DISK_READS', SM.DISK_READS) DESC
));
