SELECT NULL BEGIN_TIME, NULL OCC_TOTAL, NULL ACT_SESS, NULL FIGURE_1, 
  NULL OCC_1, NULL PCT_1, NULL SESS_1, NULL FIGURE_2,
  NULL OCC_2, NULL PCT_2, NULL SESS_2, NULL FIGURE_3, NULL OCC_3, 
  NULL PCT_3, NULL SESS_3, NULL FIGURE_4, NULL OCC4,
  NULL PCT_4, NULL SESS_4, NULL FIGURE_5, NULL OCC_5, NULL PCT_5, 
  NULL SESS_5 FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL OCC_TOTAL, NULL ACT_SESS, NULL FIGURE_1, 
  NULL OCC_1, NULL PCT_1, NULL SESS_1, NULL FIGURE_2,
  NULL OCC_2, NULL PCT_2, NULL SESS_2, NULL FIGURE_3, NULL OCC_3, 
  NULL PCT_3, NULL SESS_3, NULL FIGURE_4, NULL OCC4,
  NULL PCT_4, NULL SESS_4, NULL FIGURE_5, NULL OCC_5, NULL PCT_5, 
  NULL SESS_5 FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */  
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,    
    END_SNAP_ID,
    SQL_ID,
    SQL_TYPE,
    EVENT,
    OBJECT_NAME,
    SESSION_ID,
    XID,
    PROGRAM,
    TIME_SLICE_S,
    ONLY_PARALLEL,
    DECODE(DATA_SOURCE, 'CURRENT', 1, ASH_SAMPLE_INTERVAL_S) ASH_SAMPLE_INTERVAL_S,
    AGGREGATE_BY,
    DATA_SOURCE
  FROM
  ( SELECT
      -1 DBID,
      -2 INSTANCE_NUMBER,              /* -1 for current instance, -2 for all instances */
      TO_DATE('01.01.1000 10:00:00', 
        'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 11:00:00', 
        'dd.mm.yyyy hh24:mi:ss') END_DATE,
      -1 BEGIN_SNAP_ID,            /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      '%' SQL_ID,
      '%' SQL_TYPE,
      '%' EVENT,
      '/BIC/FZFDSPR11' OBJECT_NAME,
      -1 SESSION_ID,
      '%' XID,
      '%' PROGRAM,
      3600  TIME_SLICE_S,
      ' ' ONLY_PARALLEL,
      10  ASH_SAMPLE_INTERVAL_S,   /* Change required if ASH history is sampled not every 10 seconds */  
      'SQL_TYPE' AGGREGATE_BY,     /* SQL_ID, EVENT, SID, OBJECT, SQL_TYPE, WAIT_CLASS, PROGRAM, MODULE, USER, CLIENT_ID, XID, PLAN_HASH or INSTANCE */
      'AWR' DATA_SOURCE         /* AWR, CURRENT */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT 
    HSS.DBID,
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    TO_DATE(TO_CHAR(MIN(HSS.BEGIN_INTERVAL_TIME), 
      'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    TO_DATE(TO_CHAR(MAX(HSS.END_INTERVAL_TIME), 
      'dd.mm.yyyy hh24:mi:ss'), 'dd.mm.yyyy hh24:mi:ss') END_DATE
  FROM 
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    HSS.DBID = BI.DBID AND
    ( BI.INSTANCE_NUMBER = -2 OR 
      HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER ) AND
    HSS.END_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.BEGIN_INTERVAL_TIME <= BI.END_TIME
  GROUP BY
    HSS.DBID,
    HSS.INSTANCE_NUMBER
),
ASH_DISTRIBUTION AS
( SELECT 
    TRUNC((SAMPLE_DATE - BEGIN_DATE) * 86400 / TIME_SLICE_S) TIME_SLICE, 
    INSTANCE_NUMBER,
    SID,
    SQL_ID,
    SQL_TYPE,
    PLAN_HASH,
    PROGRAM,
    MODULE,
    EVENT,
    XID,
    OBJECT_NAME,
    WAIT_CLASS,
    CLIENT_ID,
    USER_NAME,
    COUNT(*) OCCURRENCES
  FROM
  ( SELECT DISTINCT
      INSTANCE_NUMBER,
      SID,
      SQL_ID,
      TO_CHAR(RAWTOHEX(XID)) XID,
      NVL(SQL_TYPE, 'n/a') SQL_TYPE,
      NVL(CLIENT_ID, 'n/a') CLIENT_ID,
      PLAN_HASH,
      PROGRAM,
      MODULE,
      SAMPLE_TIME,
      DECODE(SESSION_STATE,
        'WAITING', EVENT || DECODE(SUBSTR(EVENT, 1, 5),
        'enq: ', ' (' || TO_CHAR(BITAND(P1, 65535)) || ' / ' ||
        TO_CHAR(DECODE(BITAND(P1, 65535), 
          1, 'Null', 
          2, 'Sub-Share',
          3, 'Sub-Exclusive', 
          4, 'Share', 
          5, 'Share/Sub-Exclusive',
          6, 'Exclusive', 'Other')) || ')' ), 'CPU') EVENT,
      WAIT_CLASS,
      CASE 
        WHEN EVENT = 'direct path read temp' OR
             EVENT = 'direct path write temp' OR
             EVENT = 'Data file init write'
          THEN
            'n/a'
        WHEN WAIT_CLASS = 'Application' OR
             WAIT_CLASS = 'Cluster' OR
             WAIT_CLASS = 'User I/O'
          THEN 
            NVL(OBJECT_NAME, DECODE(CURRENT_OBJ#, 
              -1, 'Header / Rollback / ANALYZE', 
               0, 'Undo Data', 
              SEGSTAT_OBJECT_NAME || ' (previous)'))
        ELSE
          'n/a' 
        END OBJECT_NAME,
      DECODE(WAIT_CLASS, 'User I/O', P3, 0) BLOCKS_ACCESSED,
      BI_SQL_TYPE,
      TO_DATE(TO_CHAR(SAMPLE_TIME, 'dd.mm.yyyy hh24:mi:ss'), 
        'dd.mm.yyyy hh24:mi:ss') SAMPLE_DATE,
      USER_NAME,
      BEGIN_DATE,
      TIME_SLICE_S,
      BI_OBJECT_NAME
    FROM
    ( SELECT
        ASH.INSTANCE_NUMBER,
        ASH.SESSION_ID SID,
        ASH.SQL_ID,
        TO_CHAR(RAWTOHEX(ASH.XID)) XID,
        ASH.SQL_PLAN_HASH_VALUE PLAN_HASH,
        ASH.PROGRAM,
        ASH.MODULE,
        ASH.SAMPLE_TIME,
        ASH.SESSION_STATE,
        ASH.EVENT,
        ASH.P1,
        ASH.P3,
        ASH.WAIT_CLASS,
        ASH.CURRENT_OBJ#,
        ASH.CLIENT_ID,
        A.NAME SQL_TYPE,
        O.OBJECT_NAME,
        SSO.OBJECT_NAME SEGSTAT_OBJECT_NAME,
        BI.SQL_TYPE BI_SQL_TYPE,
        BI.BEGIN_DATE,
        BI.TIME_SLICE_S,
        BI.OBJECT_NAME BI_OBJECT_NAME,
        U.USERNAME USER_NAME
      FROM
        BASIS_INFO BI,
        SNAPSHOTS SS,
        DBA_HIST_ACTIVE_SESS_HISTORY ASH,
        AUDIT_ACTIONS A,
        DBA_OBJECTS O,
        DBA_HIST_SEG_STAT_OBJ SSO,
        DBA_USERS U
      WHERE
        SS.DBID = ASH.DBID AND
        ASH.DBID = SSO.DBID (+) AND
        ASH.USER_ID = U.USER_ID (+) AND
        SS.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER AND
        ( BI.BEGIN_SNAP_ID = -1 OR ASH.SNAP_ID >= BI.BEGIN_SNAP_ID ) AND 
        ( BI.END_SNAP_ID = -1 OR ASH.SNAP_ID <= BI.END_SNAP_ID ) AND
        ASH.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
        ASH.CURRENT_OBJ# = O.OBJECT_ID (+) AND
        ASH.CURRENT_OBJ# = SSO.OBJ# (+) AND
        ASH.SQL_OPCODE = A.ACTION (+) AND
        ( BI.SQL_ID = '%' OR ASH.SQL_ID LIKE BI.SQL_ID ) AND
        ( BI.SQL_TYPE = '%' OR A.NAME = BI.SQL_TYPE ) AND
        ( BI.PROGRAM = '%' OR ASH.PROGRAM LIKE BI.PROGRAM ) AND
        ( BI.SESSION_ID = -1 OR ASH.SESSION_ID = BI.SESSION_ID ) AND
        ( BI.XID = '%' OR TO_CHAR(RAWTOHEX(ASH.XID)) LIKE BI.XID ) AND
        DECODE(ASH.SESSION_STATE, 'WAITING', ASH.EVENT, 'CPU') LIKE BI.EVENT AND
        ( BI.ONLY_PARALLEL = ' ' OR ASH.QC_SESSION_ID IS NOT NULL ) AND
        BI.DATA_SOURCE = 'AWR'
      UNION
      ( SELECT
          ASH.INST_ID INSTANCE_NUMBER,
          ASH.SESSION_ID SID,
          ASH.SQL_ID,
          TO_CHAR(RAWTOHEX(ASH.XID)) XID,
          ASH.SQL_PLAN_HASH_VALUE PLAN_HASH,
          ASH.PROGRAM,
          ASH.MODULE,
          ASH.SAMPLE_TIME,
          ASH.SESSION_STATE,
          ASH.EVENT,
          ASH.P1,
          ASH.P3,
          ASH.WAIT_CLASS,
          ASH.CURRENT_OBJ#,
          ASH.CLIENT_ID,
          A.NAME SQL_TYPE,
          O.OBJECT_NAME,
          SSO.OBJECT_NAME SEGSTAT_OBJECT_NAME,
          BI.SQL_TYPE BI_SQL_TYPE,
          BI.BEGIN_DATE,
          BI.TIME_SLICE_S,
          BI.OBJECT_NAME BI_OBJECT_NAME,
          U.USERNAME USER_NAME
        FROM
          BASIS_INFO BI,
          GV$ACTIVE_SESSION_HISTORY ASH,
          AUDIT_ACTIONS A,
          DBA_OBJECTS O,
          DBA_HIST_SEG_STAT_OBJ SSO,
          DBA_USERS U
        WHERE
          ( BI.INSTANCE_NUMBER = -2 OR BI.INSTANCE_NUMBER = ASH.INST_ID ) AND
          ASH.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
          ASH.USER_ID = U.USER_ID (+) AND
          ASH.CURRENT_OBJ# = O.OBJECT_ID (+) AND
          ASH.CURRENT_OBJ# = SSO.OBJ# (+) AND
          ASH.SQL_OPCODE = A.ACTION (+) AND
          ( BI.SQL_ID = '%' OR ASH.SQL_ID LIKE BI.SQL_ID ) AND
          ( BI.SQL_TYPE = '%' OR A.NAME = BI.SQL_TYPE ) AND
          ( BI.PROGRAM = '%' OR ASH.PROGRAM LIKE BI.PROGRAM ) AND
          ( BI.SESSION_ID = -1 OR ASH.SESSION_ID = BI.SESSION_ID ) AND
          ( BI.XID = '%' OR TO_CHAR(RAWTOHEX(ASH.XID)) LIKE BI.XID ) AND
          DECODE(ASH.SESSION_STATE, 'WAITING', ASH.EVENT, 'CPU') LIKE BI.EVENT AND
          ( BI.ONLY_PARALLEL = ' ' OR ASH.QC_SESSION_ID IS NOT NULL ) AND
          BI.DATA_SOURCE = 'CURRENT'
      )
    )
  )
  WHERE
    NVL(OBJECT_NAME, ' ') LIKE BI_OBJECT_NAME
  GROUP BY
    SID,
    XID,
    SQL_ID,
    PLAN_HASH,
    EVENT,
    OBJECT_NAME,
    INSTANCE_NUMBER,
    SQL_TYPE,
    WAIT_CLASS,
    PROGRAM,
    MODULE,
    CLIENT_ID,
    USER_NAME,
    TRUNC((SAMPLE_DATE - BEGIN_DATE) * 86400 / TIME_SLICE_S)
)
SELECT
  'SQL_ID:' BEGIN_TIME,
  SQL_ID OCC_TOTAL,
  NULL ACT_SESS,
  NULL FIGURE_1,
  NULL OCC_1,
  NULL PCT_1,
  NULL SESS_1,
  NULL FIGURE_2,
  NULL OCC_2,
  NULL PCT_2,
  NULL SESS_2,
  NULL FIGURE_3,
  NULL OCC_3,
  NULL PCT_3,
  NULL SESS_3,
  NULL FIGURE_4,
  NULL OCC_4,
  NULL PCT_4,
  NULL SESS_4,
  NULL FIGURE_5,
  NULL OCC_5,
  NULL PCT_5,
  NULL SESS_5
FROM
  BASIS_INFO
WHERE
  SQL_ID != '%'
UNION ALL
( SELECT
    'Aggregated by:' BEGIN_TIME,
    AGGREGATE_BY OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    'Event:' BEGIN_TIME,
    EVENT OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
  WHERE
    EVENT != '%'
)
UNION ALL
( SELECT
    'Object:' BEGIN_TIME,
    OBJECT_NAME OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
  WHERE
    OBJECT_NAME != '%'
)
UNION ALL
( SELECT
    'Session:' BEGIN_TIME,
    TO_CHAR(SESSION_ID) OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
  WHERE 
    SESSION_ID != -1
)
UNION ALL
( SELECT
    'Instance:' BEGIN_TIME,
    TO_CHAR(DECODE(INSTANCE_NUMBER, -2, 'ALL', INSTANCE_NUMBER)) OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
  WHERE
    INSTANCE_NUMBER != -1
)
UNION ALL
( SELECT
    'Program:' BEGIN_TIME,
    PROGRAM OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
  WHERE
    PROGRAM != '%'
)
UNION ALL
( SELECT
    'Time slice:' BEGIN_TIME,
    TO_CHAR(TIME_SLICE_S) || ' s' OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    BASIS_INFO
)
UNION ALL
( SELECT
    NULL BEGIN_TIME,
    NULL OCC_TOTAL,
    NULL ACT_SESS,
    NULL FIGURE_1,
    NULL OCC_1,
    NULL PCT_1,
    NULL SESS_1,
    NULL FIGURE_2,
    NULL OCC_2,
    NULL PCT_2,
    NULL SESS_2,
    NULL FIGURE_3,
    NULL OCC_3,
    NULL PCT_3,
    NULL SESS_3,
    NULL FIGURE_4,
    NULL OCC_4,
    NULL PCT_4,
    NULL SESS_4,
    NULL FIGURE_5,
    NULL OCC_5,
    NULL PCT_5,
    NULL SESS_5
  FROM
    DUAL
)
UNION ALL
( SELECT
    *
  FROM
  ( SELECT
      BEGIN_TIME,
      LPAD(TO_CHAR(OCC_TOTAL, 999999999990), GREATEST(13, LENGTH(EVENT))) OCC_TOTAL,
      TO_CHAR(OCC_TOTAL * ASH_SAMPLE_INTERVAL_S / 
        TIME_SLICE_S, 9990.99) ACT_SESS,
      DECODE(AGGREGATE_BY, 'SID', TO_CHAR(FIGURE_1), 
        'INSTANCE', TO_CHAR(FIGURE_1), FIGURE_1) FIGURE_1,
      TO_CHAR(OCC_1, 99990) OCC_1,
      TO_CHAR(PCT_1, 9990) PCT_1,
      TO_CHAR(OCC_1 * ASH_SAMPLE_INTERVAL_S / 
        TIME_SLICE_S, 990.99) SESS_1,
      DECODE(AGGREGATE_BY, 'SID', TO_CHAR(FIGURE_2), 
        'INSTANCE', TO_CHAR(FIGURE_2), FIGURE_2) FIGURE_2,
      TO_CHAR(OCC_2, 99990) OCC_2,
      TO_CHAR(PCT_2, 9990) PCT_2,
      TO_CHAR(OCC_2 * ASH_SAMPLE_INTERVAL_S / 
        TIME_SLICE_S, 990.99) SESS_2,
      DECODE(AGGREGATE_BY, 'SID', TO_CHAR(FIGURE_3), 
        'INSTANCE', TO_CHAR(FIGURE_3), FIGURE_3) FIGURE_3,
      TO_CHAR(OCC_3, 99990) OCC_3,
      TO_CHAR(PCT_3, 9990) PCT_3,
      TO_CHAR(OCC_3 * ASH_SAMPLE_INTERVAL_S / 
        TIME_SLICE_S, 990.99) SESS_3,
      DECODE(AGGREGATE_BY, 'SID', TO_CHAR(FIGURE_4), 
        'INSTANCE', TO_CHAR(FIGURE_4), FIGURE_4) FIGURE_4,
      TO_CHAR(OCC_4, 99990) OCC_4,
      TO_CHAR(PCT_4, 9990) PCT_4,
      TO_CHAR(OCC_4 * ASH_SAMPLE_INTERVAL_S / 
        TIME_SLICE_S, 990.99) SESS_4,
      DECODE(AGGREGATE_BY, 'SID', TO_CHAR(FIGURE_5), 
        'INSTANCE', TO_CHAR(FIGURE_5), FIGURE_5) FIGURE_5,
      TO_CHAR(OCC_5, 99990) OCC_5,
      TO_CHAR(PCT_5, 9990) PCT_5,
      TO_CHAR(OCC_5 * ASH_SAMPLE_INTERVAL_S / 
        TIME_SLICE_S, 990.99) SESS_5
    FROM
    ( SELECT
        AGGREGATE_BY,
        ASH_SAMPLE_INTERVAL_S,
        TIME_SLICE_S,
        TIME_SLICE,
        BEGIN_TIME,
        SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE) OCC_TOTAL,
        FIGURE FIGURE_1,
        OCCURRENCES OCC_1,
        ROUND(OCCURRENCES / SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE) * 100) PCT_1,
        LEAD(FIGURE, 1) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) FIGURE_2,
        LEAD(OCCURRENCES, 1) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) OCC_2,
        DECODE(SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE), 0, 0,
          ROUND(LEAD(OCCURRENCES, 1) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) / 
          SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE) * 100)) PCT_2,
        LEAD(FIGURE, 2) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) FIGURE_3,
        LEAD(OCCURRENCES, 2) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) OCC_3,
        DECODE(SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE), 0, 0,
          ROUND(LEAD(OCCURRENCES, 2) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) / 
          SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE) * 100)) PCT_3,
        LEAD(FIGURE, 3) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) FIGURE_4,
        LEAD(OCCURRENCES, 3) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) OCC_4,
        DECODE(SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE), 0, 0,
          ROUND(LEAD(OCCURRENCES, 3) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) / 
          SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE) * 100)) PCT_4,
        LEAD(FIGURE, 4) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) FIGURE_5,
        LEAD(OCCURRENCES, 4) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) OCC_5,
        DECODE(SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE), 0, 0,
          ROUND(LEAD(OCCURRENCES, 4) OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) / 
          SUM(OCCURRENCES) OVER (PARTITION BY TIME_SLICE) * 100)) PCT_5,
        ROW_NUMBER () OVER (PARTITION BY TIME_SLICE ORDER BY OCCURRENCES DESC) NUM,
        EVENT
      FROM
      ( SELECT
          BI.AGGREGATE_BY,
          BI.ASH_SAMPLE_INTERVAL_S,
          BI.TIME_SLICE_S,
          ASH.TIME_SLICE,
          TO_CHAR(BI.BEGIN_DATE + ASH.TIME_SLICE * BI.TIME_SLICE_S / 86400, 
            'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
          DECODE(BI.AGGREGATE_BY, 
            'SQL_ID', ASH.SQL_ID,
            'EVENT', ASH.EVENT,
            'SID', TO_CHAR(ASH.SID),
            'XID', TO_CHAR(RAWTOHEX(ASH.XID)),
            'OBJECT', ASH.OBJECT_NAME,
            'SQL_TYPE', ASH.SQL_TYPE,
            'WAIT_CLASS', ASH.WAIT_CLASS,
            'PROGRAM', ASH.PROGRAM,
            'MODULE', ASH.MODULE,
            'CLIENT_ID', ASH.CLIENT_ID,
            'USER', ASH.USER_NAME,
            'PLAN_HASH', TO_CHAR(ASH.PLAN_HASH),
            'INSTANCE', TO_CHAR(ASH.INSTANCE_NUMBER)) FIGURE,
          SUM(OCCURRENCES) OCCURRENCES,
          BI.EVENT
        FROM
          BASIS_INFO BI,
          ASH_DISTRIBUTION ASH
        GROUP BY
          BI.AGGREGATE_BY,
          BI.ASH_SAMPLE_INTERVAL_S,
          BI.BEGIN_DATE,
          BI.TIME_SLICE_S,
          ASH.TIME_SLICE,
          DECODE(BI.AGGREGATE_BY, 
            'SQL_ID', ASH.SQL_ID,
            'EVENT', ASH.EVENT,
            'SID', TO_CHAR(ASH.SID),
            'XID', TO_CHAR(RAWTOHEX(ASH.XID)),
            'OBJECT', ASH.OBJECT_NAME,
            'SQL_TYPE', ASH.SQL_TYPE,
            'WAIT_CLASS', ASH.WAIT_CLASS,
            'PROGRAM', ASH.PROGRAM,
            'MODULE', ASH.MODULE,
            'CLIENT_ID', ASH.CLIENT_ID,
            'USER', ASH.USER_NAME,
            'PLAN_HASH', TO_CHAR(ASH.PLAN_HASH),
            'INSTANCE', TO_CHAR(ASH.INSTANCE_NUMBER)),
          BI.EVENT
      )
    )
    WHERE 
      NUM = 1
    ORDER BY
      TIME_SLICE DESC
  )   
)
));
