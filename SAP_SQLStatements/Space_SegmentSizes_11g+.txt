SELECT 
  NULL POS, NULL SEGMENT_NAME, NULL SEGMENT_TYPE, NULL TABLESPACE_NAME, 
  NULL PARTITIONS, NULL SIZE_MB, NULL EXTENTS, NULL COMPRESSION FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL POS, NULL SEGMENT_NAME, NULL SEGMENT_TYPE, NULL TABLESPACE_NAME, 
  NULL PARTITIONS, NULL SIZE_MB, NULL EXTENTS, NULL COMPRESSION FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /* 11g: Table compression, SecureFile compression */ 
    '%' OWNER,
    '%' TABLE_NAME,
    '%' TABLESPACE_NAME,
    'INDEX%' SEGMENT_TYPE,  /* TABLE, INDEX, TABLE PARTITION, INDEX PARTITION, LOB%, LOBSEGMENT, LOBINDEX, TEMPORARY, CLUSTER */
    'PARTITION' AGGREGATE_BY,    /* PARTITION, GLOBAL */
    'SIZE' ORDER_BY,       /* SIZE, SEGMENT */
    100 NUM_RECORDS
  FROM 
    DUAL
),
SEGMENT_NAMES AS
( SELECT /*+ MATERIALIZE */
    DT.OWNER OWNER,
    DT.TABLE_NAME SEGMENT_NAME,
    NULL PARTITION_NAME,
    DT.COMPRESS_FOR COMPRESSION,
    NULL ADDITIONAL_INFO
  FROM
    BASIS_INFO BI,
    DBA_TABLES DT
  WHERE
    DT.OWNER LIKE BI.OWNER AND
    DT.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME AND
    DT.TABLE_NAME LIKE BI.TABLE_NAME
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      DT.OWNER OWNER,
      DTP.TABLE_NAME SEGMENT_NAME,
      DTP.PARTITION_NAME,
      DTP.COMPRESS_FOR COMPRESSION,
      NULL ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_TABLES DT,
      DBA_TAB_PARTITIONS DTP
    WHERE
      DT.OWNER LIKE BI.OWNER AND
      DTP.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME AND
      DT.TABLE_NAME LIKE BI.TABLE_NAME AND
      DTP.TABLE_OWNER = DT.OWNER AND
      DTP.TABLE_NAME = DT.TABLE_NAME
  )
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      DI.OWNER OWNER,
      DI.INDEX_NAME SEGMENT_NAME,
      NULL PARTITION_NAME,
      DECODE(DI.COMPRESSION, 'ENABLED', 'Yes (' || DI.PREFIX_LENGTH || ')') COMPRESSION,
      NULL ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_INDEXES DI
    WHERE
      DI.TABLE_OWNER LIKE BI.OWNER AND
      DI.TABLE_NAME LIKE BI.TABLE_NAME AND
      DI.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME AND
      DI.INDEX_TYPE != 'LOB'
  )
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      DI.OWNER OWNER,
      DIP.INDEX_NAME SEGMENT_NAME,
      DIP.PARTITION_NAME,
      DECODE(DIP.COMPRESSION, 'ENABLED', 'Yes (' || DI.PREFIX_LENGTH || ')') COMPRESSION,
      NULL ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_INDEXES DI,
      DBA_IND_PARTITIONS DIP
    WHERE
      DI.TABLE_OWNER LIKE BI.OWNER AND
      DI.TABLE_NAME LIKE BI.TABLE_NAME AND
      DIP.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME AND
      DIP.INDEX_OWNER = DI.OWNER AND
      DIP.INDEX_NAME = DI.INDEX_NAME AND
      DI.INDEX_TYPE != 'LOB'
  )
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      L.OWNER,
      L.SEGMENT_NAME,
      NULL PARTITION_NAME,
      DECODE(L.COMPRESSION, 'NO', NULL, 'NONE', NULL, L.COMPRESSION) COMPRESSION,
      L.TABLE_NAME || '.' || L.COLUMN_NAME ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_LOBS L
    WHERE
      L.OWNER LIKE BI.OWNER AND
      L.TABLE_NAME LIKE BI.TABLE_NAME AND
      L.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME
  )
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      L.OWNER,
      L.INDEX_NAME SEGMENT_NAME,
      NULL PARTITION_NAME,
      NULL COMPRESSION,
      L.TABLE_NAME || '.' || L.COLUMN_NAME ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_LOBS L
    WHERE
      L.OWNER LIKE BI.OWNER AND
      L.TABLE_NAME LIKE BI.TABLE_NAME AND
      L.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME
  )
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      S.OWNER,
      S.SEGMENT_NAME,
      S.PARTITION_NAME,
      NULL COMPRESSION,
      NULL ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_SEGMENTS S
    WHERE
      S.OWNER LIKE BI.OWNER AND
      S.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME AND
      BI.SEGMENT_TYPE = 'TEMPORARY' AND
      S.SEGMENT_TYPE = 'TEMPORARY'
  )
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      C.OWNER,
      C.CLUSTER_NAME SEGMENT_NAME,
      NULL PARTITION_NAME,
      NULL COMPRESSION,
      NULL ADDITIONAL_INFO
    FROM
      BASIS_INFO BI,
      DBA_CLUSTERS C
    WHERE
      C.OWNER LIKE BI.OWNER AND
      C.CLUSTER_NAME LIKE BI.TABLE_NAME AND
      C.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME AND
      'CLUSTER' LIKE BI.SEGMENT_TYPE 
  )
)
SELECT
  TO_CHAR(ROWNUM, 990) POS,
  SEGMENT_NAME,
  SEGMENT_TYPE,
  TABLESPACE_NAME,
  PARTITIONS,
  SIZE_MB,
  EXTENTS,
  COMPRESSION
FROM
( SELECT
    SEGMENT_NAME,
    SEGMENT_TYPE,
    TABLESPACE_NAME,
    TO_CHAR(PARTITIONS, 999999990) PARTITIONS,
    TO_CHAR(BYTES / 1024 / 1024, 9999990.99) SIZE_MB,
    TO_CHAR(EXTENTS, 999990) EXTENTS,
    COMPRESSION,
    NUM_RECORDS
 FROM
  (  SELECT
      DECODE(SUBSTR(DS.SEGMENT_TYPE, 1, 3), 
        'LOB', SN.ADDITIONAL_INFO || ' (' || DS.SEGMENT_NAME || ')',
        DS.SEGMENT_NAME) || 
        DECODE(BI.AGGREGATE_BY, 'PARTITION', 
          DECODE(SN.PARTITION_NAME, NULL, NULL, '.' || SN.PARTITION_NAME)) SEGMENT_NAME,
      DS.SEGMENT_TYPE SEGMENT_TYPE,
      DS.TABLESPACE_NAME TABLESPACE_NAME,
      SUM(DECODE(DS.PARTITION_NAME, NULL, 0, 1)) PARTITIONS,
      SUM(DS.BYTES) BYTES,
      SUM(DS.EXTENTS) EXTENTS,
      SN.COMPRESSION,
      BI.ORDER_BY,
      BI.NUM_RECORDS
    FROM
      BASIS_INFO BI,
      DBA_SEGMENTS DS,
      SEGMENT_NAMES SN
    WHERE
      DS.OWNER = SN.OWNER AND
      DS.SEGMENT_NAME = SN.SEGMENT_NAME AND
      (SN.PARTITION_NAME IS NULL OR DS.PARTITION_NAME = SN.PARTITION_NAME ) AND
      DS.SEGMENT_TYPE LIKE BI.SEGMENT_TYPE
    GROUP BY
      DS.SEGMENT_TYPE,
      SN.COMPRESSION,
      SN.ADDITIONAL_INFO,
      DECODE(BI.AGGREGATE_BY, 'PARTITION', 
          DECODE(SN.PARTITION_NAME, NULL, NULL, '.' || SN.PARTITION_NAME)),
      DS.SEGMENT_NAME,
      DS.TABLESPACE_NAME,
      BI.ORDER_BY,
      BI.NUM_RECORDS
  )
  ORDER BY
    DECODE(ORDER_BY, 'SIZE', NVL(BYTES, 0)) DESC,
    DECODE(ORDER_BY, 'SEGMENT', SEGMENT_NAME)
)
WHERE
  ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS )
));