SELECT NULL LINE FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL LINE FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT 
  /*+ OPT_PARAM('_PUSH_JOIN_UNION_VIEW', 'FALSE') OPT_PARAM('_COMPLEX_VIEW_MERGING', 'FALSE')
      OPT_PARAM('_OPTIMIZER_NEW_JOIN_CARD_COMPUTATION', 'FALSE') */  
  * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    'SAP%' TABLE_OWNER,
    '%' TABLE_NAME,
    '%' TABLESPACE_NAME,
    'INDEX' SEGMENT_TYPE,             /* TABLE, INDEX */
    -1 MIN_SIZE_MB,
    -1 NUM_RECORDS,
    50 QUALITY_THRESHOLD,
    100 UNUSED_MB_THRESHOLD,
    -1 QUALITY_THRESHOLD_2,
    -1 UNUSED_MB_THRESHOLD_2,
    -1 NUM_LARGEST_SEGMENTS,
    -1 NUM_IO_READ_SEGMENTS,
    'UNUSED' SORT_BY,            /* QUALITY, UNUSED or SEGMENT */
    'X' INCLUDE_TAB_MODIFICATIONS,
    'X' INCLUDE_PARTITIONS,
    'X' EXCLUDE_LONG_TABLES,
    'X' EXCLUDE_LOB_TABLES,
    'X' EXCLUDE_MODIFIED_STATS,
    'X' EXCLUDE_LOCKED_STATS,
    'X' EXCLUDE_BITMAP_INDEXES,
    ' ' RESTRICTION_INFO,
    'X' ONLY_SEGMENT_NAMES,
    'X' INCLUDE_OWNER
  FROM
    DUAL
),
SEGMENT_SELECTION AS
( SELECT /*+ MATERIALIZE */
    OWNER,
    SEGMENT_NAME,
    SUM(SIZE_POS) SIZE_POS,
    SUM(IO_POS) IO_POS
  FROM
  ( SELECT
      OWNER,
      SEGMENT_NAME,
      SIZE_POS,
      0 IO_POS
    FROM
    ( SELECT
        S.OWNER,
        S.SEGMENT_NAME,
        ROW_NUMBER () OVER (ORDER BY SUM(S.BYTES) DESC) SIZE_POS,
        BI.NUM_LARGEST_SEGMENTS,
        BI.NUM_IO_READ_SEGMENTS
      FROM
        DBA_SEGMENTS S,
        BASIS_INFO BI
      WHERE
        S.SEGMENT_TYPE IN ('INDEX', 'INDEX PARTITION', 
          'TABLE', 'TABLE PARTITION')
      GROUP BY
        S.OWNER,
        S.SEGMENT_NAME,
        BI.NUM_LARGEST_SEGMENTS,
        BI.NUM_IO_READ_SEGMENTS
      ORDER BY
        SUM(S.BYTES) DESC
    )
    WHERE
      NUM_LARGEST_SEGMENTS = -1 OR 
      NUM_IO_READ_SEGMENTS = -1 OR 
      SIZE_POS <= NUM_LARGEST_SEGMENTS
    UNION ALL
    ( SELECT
        OWNER,
        SEGMENT_NAME,
        0 SIZE_POS,
        IO_POS
      FROM
      ( SELECT
          DECODE(NVL(O.OWNER, SSO.OWNER), 
            '** UNAVAILABLE **', NVL(O2.OWNER, 'not available'),
            NVL(O.OWNER, SSO.OWNER)) OWNER,
          DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME), 
            '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
            NVL(O.OBJECT_NAME, SSO.OBJECT_NAME)) SEGMENT_NAME,
          ROW_NUMBER () OVER (ORDER BY SUM(S.PHYSICAL_READS_DELTA) DESC) IO_POS,
          BI.NUM_LARGEST_SEGMENTS,
          BI.NUM_IO_READ_SEGMENTS
        FROM
          BASIS_INFO BI,
          DBA_HIST_SEG_STAT S,
          DBA_OBJECTS O,
          DBA_HIST_SEG_STAT_OBJ SSO,
          DBA_OBJECTS O2
        WHERE
          S.OBJ# = O.OBJECT_ID (+) AND
          S.DATAOBJ# = O.DATA_OBJECT_ID (+) AND
          S.OBJ# = SSO.OBJ# (+) AND
          S.DATAOBJ# = SSO.DATAOBJ# (+) AND
          S.OBJ# = O2.OBJECT_ID (+) AND
          SSO.OBJECT_TYPE IN ('INDEX', 'INDEX PARTITION',
            'TABLE', 'TABLE PARTITION')
        GROUP BY
          DECODE(NVL(O.OWNER, SSO.OWNER), 
            '** UNAVAILABLE **', NVL(O2.OWNER, 'not available'),
            NVL(O.OWNER, SSO.OWNER)),
          DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME), 
            '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
            NVL(O.OBJECT_NAME, SSO.OBJECT_NAME)),
          BI.NUM_LARGEST_SEGMENTS,
          BI.NUM_IO_READ_SEGMENTS
      )
      WHERE
        NUM_IO_READ_SEGMENTS = -1 OR IO_POS <= NUM_IO_READ_SEGMENTS
    )
  )
  GROUP BY
    OWNER,
    SEGMENT_NAME
),
TABLE_INFO AS
( SELECT /*+ MATERIALIZE */
    T.OWNER TABLE_OWNER,
    T.TABLE_NAME,
    S.SIZE_POS,
    S.IO_POS
  FROM
    BASIS_INFO TI,
    SEGMENT_SELECTION S,
    DBA_TABLES T
  WHERE
    T.OWNER LIKE TI.TABLE_OWNER AND
    T.TABLE_NAME LIKE TI.TABLE_NAME AND
    T.OWNER = S.OWNER AND
    T.TABLE_NAME = S.SEGMENT_NAME AND
    ( T.TABLESPACE_NAME IS NULL OR
      T.TABLESPACE_NAME LIKE TI.TABLESPACE_NAME )
  UNION 
  ( SELECT /*+ MATERIALIZE */
      T.OWNER TABLE_OWNER,
      T.TABLE_NAME TABLE_NAME,
      S.SIZE_POS,
      S.IO_POS
    FROM
      BASIS_INFO TI,
      SEGMENT_SELECTION S,
      DBA_PART_TABLES T
    WHERE
      T.OWNER LIKE TI.TABLE_OWNER AND
      T.TABLE_NAME LIKE TI.TABLE_NAME AND
      T.OWNER = S.OWNER AND
      T.TABLE_NAME = S.SEGMENT_NAME AND
      T.DEF_TABLESPACE_NAME LIKE TI.TABLESPACE_NAME
  )
),
TABLE_STORAGE AS
( SELECT /*+ MATERIALIZE */
    DT.OWNER TABLE_OWNER, 
    DT.TABLE_NAME, 
    DT.TABLESPACE_NAME,
    NULL PARTITION_NAME, 
    TI.SIZE_POS,
    TI.IO_POS,
    DT.IOT_TYPE,
    NVL(DT.PCT_FREE, 10) PCT_FREE, 
    NVL(DT.INI_TRANS, 1) INI_TRANS,
    DECODE(DT.CLUSTER_NAME, NULL, 'NO', 'YES') CLUSTER_TABLE,
    0 PARTITION_POSITION
  FROM 
    DBA_TABLES DT, 
    TABLE_INFO TI
  WHERE 
    DT.OWNER = TI.TABLE_OWNER AND 
    DT.TABLE_NAME = TI.TABLE_NAME
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      DTP.TABLE_OWNER, 
      DTP.TABLE_NAME, 
      DTP.TABLESPACE_NAME,
      DTP.PARTITION_NAME, 
      TI.SIZE_POS,
      TI.IO_POS,
      NULL,
      DTP.PCT_FREE, 
      DTP.INI_TRANS,
      DECODE(DT.CLUSTER_NAME, NULL, 'NO', 'YES') CLUSTER_TABLE,
      DTP.PARTITION_POSITION
    FROM
      DBA_TABLES DT,
      DBA_TAB_PARTITIONS DTP, 
      TABLE_INFO TI
    WHERE 
      DT.OWNER = TI.TABLE_OWNER AND  
      DT.TABLE_NAME = TI.TABLE_NAME AND
      DTP.TABLE_OWNER = TI.TABLE_OWNER AND  
      DTP.TABLE_NAME = TI.TABLE_NAME
  )
),
TABLE_MODIFICATIONS AS
( SELECT /*+ MATERIALIZE */
    TI.TABLE_OWNER,
    TI.TABLE_NAME,
    TI.PARTITION_NAME,
    NVL(TM.INSERTS, 0) INSERTS,
    NVL(TM.UPDATES, 0) UPDATES,
    NVL(TM.DELETES, 0) DELETES
  FROM
    TABLE_STORAGE TI,
    ALL_TAB_MODIFICATIONS TM
  WHERE
    TI.TABLE_OWNER = TM.TABLE_OWNER (+) AND
    TI.TABLE_NAME = TM.TABLE_NAME (+) AND
    NVL(TI.PARTITION_NAME, ' ') = NVL(TM.PARTITION_NAME (+), ' ')
),
TABLE_COLUMNS AS
( SELECT /*+ MATERIALIZE */
    TI.TABLE_OWNER,
    TI.TABLE_NAME,
    NVL(DTC.LONG_RAW, 'NO') LONG_RAW,
    NVL(DTC.LOB, 'NO') LOB
  FROM
  ( SELECT
      OWNER, 
      TABLE_NAME, 
      DECODE(SUM(DECODE(SUBSTR(DATA_TYPE, 1, 4), 'LONG', 1, 0)), 0, 'NO', 'YES') LONG_RAW,
      DECODE(SUM(DECODE(SUBSTR(DATA_TYPE, 1, 4), 'LONG', 0, 1)), 0, 'NO', 'YES') LOB
    FROM
      DBA_TAB_COLS
    WHERE
      DATA_TYPE IN ( 'LONG', 'LONG RAW', 'CLOB', 'BLOB', 'NCLOB' )
    GROUP BY
      OWNER,
      TABLE_NAME
  ) DTC,
    TABLE_INFO TI
  WHERE
    TI.TABLE_OWNER = DTC.OWNER (+) AND
    TI.TABLE_NAME = DTC.TABLE_NAME (+)    
),
INDEX_INFO AS
( SELECT /*+ MATERIALIZE */ DISTINCT 
    T.TABLE_OWNER TABLE_OWNER,
    T.TABLE_NAME TABLE_NAME,
    I.OWNER INDEX_OWNER, 
    I.INDEX_NAME, 
    I.INDEX_TYPE,
    I.UNIQUENESS,
    S.SIZE_POS,
    S.IO_POS,
    DECODE(I.COMPRESSION, 'ENABLED', 'YES', 'NO') COMPRESSION,
    NVL(I.PREFIX_LENGTH, 0) PREFIX_LENGTH,
    DECODE(T.IOT_TYPE, NULL, 'NO', 'YES') INDEX_OF_IOT
  FROM 
    DBA_INDEXES I, 
    TABLE_STORAGE T,
    SEGMENT_SELECTION S,
    BASIS_INFO BI
  WHERE 
    BI.SEGMENT_TYPE IN ('INDEX') AND
    I.TABLE_OWNER = T.TABLE_OWNER AND
    I.TABLE_NAME = T.TABLE_NAME AND 
    I.OWNER = S.OWNER AND
    I.INDEX_NAME = S.SEGMENT_NAME AND
    I.INDEX_TYPE != 'LOB'
),
INDEX_STORAGE AS
( SELECT /*+ MATERIALIZE */
    TI.INDEX_OWNER, 
    TI.INDEX_NAME, 
    NULL PARTITION_NAME,
    DT.INDEX_TYPE, 
    NVL(DT.PCT_FREE, 10) PCT_FREE,
    NVL(DT.INI_TRANS, 2) INI_TRANS,
    0 PARTITION_POSITION,
    TI.COMPRESSION,
    TI.PREFIX_LENGTH,
    TI.INDEX_OF_IOT,
    TI.SIZE_POS,
    TI.IO_POS
  FROM 
    DBA_INDEXES DT, 
    INDEX_INFO TI, 
    BASIS_INFO BI
  WHERE 
    BI.SEGMENT_TYPE IN ('INDEX') AND
    TI.INDEX_OWNER = DT.OWNER AND 
    TI.INDEX_NAME = DT.INDEX_NAME
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      TI.INDEX_OWNER, 
      TI.INDEX_NAME, 
      DTP.PARTITION_NAME,
      TI.INDEX_TYPE, 
      DTP.PCT_FREE, 
      DTP.INI_TRANS,
      DTP.PARTITION_POSITION,
      TI.COMPRESSION,
      TI.PREFIX_LENGTH,
      TI.INDEX_OF_IOT,
      TI.SIZE_POS,
      TI.IO_POS
    FROM 
      DBA_IND_PARTITIONS DTP, 
      INDEX_INFO TI,
      BASIS_INFO BI
    WHERE 
      BI.SEGMENT_TYPE IN ('INDEX') AND
      TI.INDEX_OWNER = DTP.INDEX_OWNER AND 
      TI.INDEX_NAME = DTP.INDEX_NAME
  )
),
INDEX_ROWS_HELPER AS
( SELECT /*+ MATERIALIZE */ 
    IC.TABLE_NAME TABLE_NAME,
    IC.INDEX_NAME INDEX_NAME,
    IC.INDEX_OWNER INDEX_OWNER,
    IC.COLUMN_NAME COLUMN_NAME,
    II.UNIQUENESS,
    II.COMPRESSION,
    II.PREFIX_LENGTH,
    IC.COLUMN_POSITION
  FROM
    INDEX_INFO II,
    DBA_IND_COLUMNS IC
  WHERE
    II.INDEX_OWNER = IC.INDEX_OWNER AND
    II.INDEX_NAME = IC.INDEX_NAME
),
INDEX_ROWS AS
( SELECT /*+ MATERIALIZE */ 
    IR.INDEX_NAME INDEX_NAME,
    IR.INDEX_OWNER INDEX_OWNER,
    SUM(NVL(TC.AVG_COL_LEN, 0) +               /* Length of all indexed columns */
      DECODE(TC.GLOBAL_STATS, 'YES', 0, 1)) +  /* Additional length byte in case of ANALYZE */
      6 +                                      /* ROWID bytes */
      DECODE(IR.UNIQUENESS, 'UNIQUE', 0, 1) +  /* Additional ROWID length byte for NONUNIQUE indexes */
      1 +                                      /* Lock byte */
      1 +                                      /* Flag byte */
      2                                        /* Row directory entry */
      IND_ROW_LEN,
    SUM(DECODE(SIGN(IR.COLUMN_POSITION - IR.PREFIX_LENGTH), 1, 0, 
      NVL(TC.AVG_COL_LEN, 0) + DECODE(TC.GLOBAL_STATS, 
      'YES', 0, 1))) COMP_ROW_LEN,
    SUM(DECODE(TC.AVG_COL_LEN, NULL, 1, 0)) COL_LEN_NULL,
    SUM(DECODE(IR.COLUMN_POSITION, 1, 
      NVL(TC.NUM_DISTINCT, 0))) FIRST_NUM_DIST
  FROM
    INDEX_ROWS_HELPER IR,
    DBA_TAB_COLS TC
  WHERE
    TC.TABLE_NAME = IR.TABLE_NAME AND
    TC.OWNER = IR.INDEX_OWNER AND
    TC.COLUMN_NAME = IR.COLUMN_NAME
  GROUP BY
    IR.INDEX_OWNER,
    IR.INDEX_NAME,
    IR.UNIQUENESS
),
INDEX_STATISTICS AS
( SELECT /*+ MATERIALIZE */
    DIS.OWNER,
    DIS.INDEX_NAME,
    DIS.PARTITION_NAME,
    DIS.TABLE_OWNER,
    DIS.TABLE_NAME,
    DIS.LEAF_BLOCKS,
    DIS.NUM_ROWS,
    DIS.DISTINCT_KEYS,
    DIS.USER_STATS,
    DIS.STATTYPE_LOCKED,
    DIS.STALE_STATS,
    DIS.LAST_ANALYZED,
    DIS.AVG_LEAF_BLOCKS_PER_KEY
  FROM
    INDEX_INFO II,
    DBA_IND_STATISTICS DIS
  WHERE
    DIS.OWNER = II.INDEX_OWNER AND
    DIS.INDEX_NAME = II.INDEX_NAME 
),
SEGMENTS_HELPER AS
( SELECT /*+ MATERIALIZE */
    S.OWNER,
    S.SEGMENT_NAME,
    S.PARTITION_NAME,
    S.BYTES,
    O.CREATED
  FROM
    DBA_SEGMENTS S,
    DBA_OBJECTS O,
    ( SELECT TABLE_OWNER OWNER, TABLE_NAME SEGMENT_NAME FROM TABLE_INFO UNION 
      SELECT INDEX_OWNER OWNER, INDEX_NAME SEGMENT_NAME FROM INDEX_INFO) S2
  WHERE
    S.OWNER = S2.OWNER AND
    S.SEGMENT_NAME = S2.SEGMENT_NAME AND
    S.OWNER = O.OWNER AND
    S.SEGMENT_NAME = O.OBJECT_NAME AND
    NVL(S.PARTITION_NAME, ' ') = NVL(O.SUBOBJECT_NAME, ' ')
),
SEGMENTS AS
( SELECT /*+ MATERIALIZE */ 
    OWNER,
    SEGMENT_NAME,
    NULL PARTITION_NAME,
    SUM(BYTES) BYTES,
    MIN(CREATED) CREATED
  FROM
    SEGMENTS_HELPER 
  WHERE
    PARTITION_NAME IS NOT NULL
  GROUP BY
    OWNER,
    SEGMENT_NAME
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      OWNER,
      SEGMENT_NAME,
      PARTITION_NAME,
      BYTES,
      CREATED
    FROM
      SEGMENTS_HELPER
  )
)
SELECT
  DECODE(ONLY_SEGMENT_NAMES, 'X', DECODE(INCLUDE_OWNER, 'X', OWNER || '.') || SEGMENT_NAME || DECODE(PARTITION_NAME, NULL, NULL, '.' || PARTITION_NAME),
    DECODE(ROWNUM, 
      1, DECODE(SEGMENT_TYPE, 'TABLE', 'reorg_table = ( ', 'INDEX', 'rebuild_index = ( ')) || 
      DECODE(INCLUDE_OWNER, 'X', OWNER || '.') || SEGMENT_NAME ||
    DECODE(ROWNUM, MAX(ROWNUM) OVER (), ' )', ', ')) LINE
FROM
( SELECT
    OWNER,
    SEGMENT_NAME,
    SEGMENT_TYPE,
    PARTITION_NAME,
    SEG_GROSS_MB,
    SEG_NET_MB,
    DATA_GROSS_MB,
    DATA_NET_MB,
    UNUSED_MB,
    DECODE(UNUSED_MB + DATA_NET_MB, 0, 0, DATA_NET_MB / 
      (UNUSED_MB + DATA_NET_MB) * 100) QUALITY,
    RESTRICTIONS,
    SIZE_POS,
    IO_POS,
    NUM_RECORDS,
    SORT_BY,
    QUALITY_THRESHOLD,
    UNUSED_MB_THRESHOLD,
    QUALITY_THRESHOLD_2,
    UNUSED_MB_THRESHOLD_2,
    RESTRICTION_INFO,
    PARTITION_POSITION,
    ONLY_SEGMENT_NAMES,
    INCLUDE_OWNER
  FROM
  ( SELECT 
      TABLE_OWNER OWNER,
      SEGMENT_NAME,
      SEGMENT_TYPE,
      PARTITION_NAME,
      DECODE(CLUSTER_TABLE, 'YES', DATA_GROSS_MB * 1.1, 
        SEG_GROSS_MB) SEG_GROSS_MB,
      DECODE(CLUSTER_TABLE, 'YES', DATA_GROSS_MB, 
        SEG_NET_MB) SEG_NET_MB,
      DATA_GROSS_MB + GREATEST(0, CHANGE_MB) DATA_GROSS_MB,
      GREATEST(0, DATA_NET_MB + CHANGE_MB) DATA_NET_MB,
      LEAST(SEG_GROSS_MB, GREATEST(DATA_GROSS_MB + 
        GREATEST(0, CHANGE_MB), SEG_NET_MB)) - 
        DATA_NET_MB - CHANGE_MB UNUSED_MB,
      DECODE(USER_STATS,        'YES', 
        'STATISTICS MODIFIED   ') ||
        DECODE(LONG_RAW,        'YES', 
        'LONG (RAW)   ') ||
        DECODE(LOB,             'YES', 
        'LOB   ') ||
        DECODE(STATTYPE_LOCKED, 'ALL', 
        'STATISTICS LOCKED   ') ||
        DECODE(STALE_STATS,     'YES', 
        'STATISTICS STALE   ') ||
        DECODE(RECREATED,       'YES', 
        'STATISTICS OLDER THAN SEGMENT   ') ||
        DECODE(AVG_ROW_LEN,     0,     
        'ROW LENGTH = 0   ') ||
        DECODE(SIGN(SEG_GROSS_MB - 5),    -1, 
        'SMALL TABLE   ') ||
        DECODE(CLUSTER_TABLE,   'YES', 
        'CLUSTER TABLE   ')
        RESTRICTIONS,
      NUM_RECORDS,
      SORT_BY,
      TABLE_NAME,
      BYTES,
      MIN_SIZE_MB,
      QUALITY_THRESHOLD,
      UNUSED_MB_THRESHOLD,
      QUALITY_THRESHOLD_2,
      UNUSED_MB_THRESHOLD_2,
      RESTRICTION_INFO,
      PARTITION_POSITION,
      INDEX_NAME,
      SIZE_POS,
      IO_POS,
      ONLY_SEGMENT_NAMES,
      INCLUDE_OWNER
    FROM
    ( SELECT
        TS.TABLE_OWNER,
        TS.TABLE_NAME SEGMENT_NAME,
        BI.SEGMENT_TYPE,
        NVL(TS.PARTITION_NAME, ' ') PARTITION_NAME,
        DECODE(CLUSTER_TABLE, 'YES', DTS.BLOCKS * (8000 - 
          23 * TS.INI_TRANS) * 
          (1 - TS.PCT_FREE / 100) / 1024 / 1024 * 1.1, S.BYTES / 
          1024 / 1024) SEG_GROSS_MB,
        DECODE(CLUSTER_TABLE, 'YES', DTS.BLOCKS * (8000 - 23 * TS.INI_TRANS) * 
          (1 - TS.PCT_FREE / 100) / 1024 / 1024, (S.BYTES / 
          1024 / 1024) * (8000 - 23 * 
          TS.INI_TRANS) * (1 - TS.PCT_FREE / 100) / 8192) SEG_NET_MB,
        DTS.BLOCKS * (8000 - 23 * TS.INI_TRANS) * (1 - TS.PCT_FREE / 100) / 
          1024 / 1024 DATA_GROSS_MB,
        (DTS.AVG_ROW_LEN + 2) * DTS.NUM_ROWS / 1024 / 1024 DATA_NET_MB,
        DTS.NUM_ROWS,
        DTS.AVG_ROW_LEN,
        DTS.BLOCKS,
        DTS.USER_STATS,
        DTC.LONG_RAW,
        DTC.LOB,
        DECODE(SIGN(NVL(DTS.LAST_ANALYZED, SYSDATE) - S.CREATED), -1, 
          'YES', 'NO') RECREATED,
        DTS.STATTYPE_LOCKED,
        DTS.STALE_STATS,
        DECODE(BI.INCLUDE_TAB_MODIFICATIONS, 'X', DTS.AVG_ROW_LEN * 
          (TM.INSERTS - TM.DELETES) / 1024 / 1024,
          0) CHANGE_MB,
        BI.NUM_RECORDS,
        BI.SORT_BY,
        TS.TABLE_NAME,
        TS.SIZE_POS,
        TS.IO_POS,
        S.BYTES,
        BI.MIN_SIZE_MB,
        BI.QUALITY_THRESHOLD,
        BI.UNUSED_MB_THRESHOLD,
        BI.QUALITY_THRESHOLD_2,
        BI.UNUSED_MB_THRESHOLD_2,
        BI.RESTRICTION_INFO,
        TS.CLUSTER_TABLE,
        TS.PARTITION_POSITION,
        ' ' INDEX_NAME,
        BI.ONLY_SEGMENT_NAMES,
        BI.INCLUDE_OWNER
      FROM 
        TABLE_STORAGE TS,
        TABLE_MODIFICATIONS TM,
        DBA_TAB_STATISTICS DTS,
        TABLE_COLUMNS DTC,
        SEGMENTS S,
        BASIS_INFO BI
      WHERE
        TS.TABLESPACE_NAME IS NOT NULL AND
        TS.TABLE_OWNER = DTS.OWNER AND
        TS.TABLE_NAME = DTS.TABLE_NAME AND
        NVL(TS.PARTITION_NAME, ' ') = NVL(DTS.PARTITION_NAME, ' ') AND
        DTS.OWNER = S.OWNER (+) AND
        DTS.TABLE_NAME = S.SEGMENT_NAME (+) AND 
        NVL(DTS.PARTITION_NAME, ' ') = NVL(S.PARTITION_NAME (+), ' ') AND
        DTS.OWNER = TM.TABLE_OWNER AND
        DTS.TABLE_NAME = TM.TABLE_NAME AND
        NVL(DTS.PARTITION_NAME, ' ') = NVL(TM.PARTITION_NAME, ' ') AND
        DTS.OWNER = DTC.TABLE_OWNER AND
        DTS.TABLE_NAME = DTC.TABLE_NAME AND
        DTS.NUM_ROWS IS NOT NULL AND
        (TS.IOT_TYPE != 'IOT' OR TS.IOT_TYPE IS NULL) AND
        (BI.MIN_SIZE_MB = -1 OR S.BYTES IS NULL OR S.BYTES / 
          1024 / 1024 >= BI.MIN_SIZE_MB ) AND
        BI.SEGMENT_TYPE IN ('TABLE') AND
        ( BI.INCLUDE_PARTITIONS = 'X' OR TS.PARTITION_NAME IS NULL ) AND
        ( BI.EXCLUDE_LONG_TABLES != 'X' OR DTC.LONG_RAW = 'NO' ) AND
        ( BI.EXCLUDE_LOB_TABLES != 'X' OR DTC.LOB = 'NO' ) AND
        ( BI.EXCLUDE_MODIFIED_STATS != 'X' OR DTS.USER_STATS != 'YES' ) AND
        ( BI.EXCLUDE_LOCKED_STATS != 'X' OR DTS.STATTYPE_LOCKED IS NULL )
    )
    UNION ALL
    ( SELECT
        OWNER,
        SEGMENT_NAME, 
        SEGMENT_TYPE,
        PARTITION_NAME,
        SEG_GROSS_MB,
        SEG_NET_MB,
        DATA_GROSS_MB + GREATEST(0, CHANGE_MB) DATA_GROSS_MB,
        GREATEST(0, DATA_NET_MB + CHANGE_MB) DATA_NET_MB,
        LEAST(SEG_GROSS_MB, GREATEST(DATA_GROSS_MB + 
          GREATEST(0, CHANGE_MB), SEG_NET_MB)) - 
          DATA_NET_MB - CHANGE_MB UNUSED_MB,
        DECODE(  USER_STATS,             'YES',    
            'STATISTICS MODIFIED   ') ||
          DECODE(STATTYPE_LOCKED,        'ALL',    
            'STATISTICS LOCKED   ') ||
          DECODE(STALE_STATS,            'YES',    
            'STATISTICS STALE   ') ||
          DECODE(SIGN(SEG_GROSS_MB - 5), -1,       
            'SMALL INDEX   ') ||
          DECODE(SIGN(COL_LEN_NULL),     1,        
            'MISSING COLUMN STATISTICS   ') ||
          DECODE(RECREATED,              'YES',    
            'STATISTICS OLDER THAN SEGMENT   ') ||
          DECODE(INDEX_TYPE,             'BITMAP', 
            'BITMAP INDEX   ') ||
          DECODE(INDEX_TYPE,             'IOT - TOP', 
            'IOT   ') ||
          DECODE(IND_ROW_LEN,            0,        
            'ROW LENGTH = 0   ') ||
          DECODE(LEAF_BLOCKS,            0,        
            'WRONG VALUE LEAF_BLOCKS = 0   ') ||
          DECODE(INDEX_OF_IOT,           'YES',
            DECODE(INDEX_TYPE, 'IOT - TOP', NULL,
            'INDEX OF IOT   ')) ||
          DECODE(COMPRESSION,            'YES',    
            'COMPRESSED INDEX   ') RESTRICTIONS,
        NUM_RECORDS,
        SORT_BY,
        TABLE_NAME,
        BYTES,
        MIN_SIZE_MB,
        QUALITY_THRESHOLD,
        UNUSED_MB_THRESHOLD,
        QUALITY_THRESHOLD_2,
        UNUSED_MB_THRESHOLD_2,
        RESTRICTION_INFO,
        PARTITION_POSITION,
        INDEX_NAME,
        SIZE_POS,
        IO_POS,
        ONLY_SEGMENT_NAMES,
        INCLUDE_OWNER
      FROM
      ( SELECT
          DIS.OWNER,
          DIS.INDEX_NAME SEGMENT_NAME,
          BI.SEGMENT_TYPE,
          NVL(DIS.PARTITION_NAME, ' ') PARTITION_NAME,
          S.BYTES / 1024 / 1024 SEG_GROSS_MB,
          (S.BYTES / 1024 / 1024) * (8079 - 23 * IST.INI_TRANS) * 
            (1 - IST.PCT_FREE / 100) / 8192 SEG_NET_MB,
          DIS.LEAF_BLOCKS * (8079 - 23 * IST.INI_TRANS) * 
            (1 - IST.PCT_FREE / 100) / 1024 / 1024 * 1.05 DATA_GROSS_MB,
          DECODE (IST.INDEX_TYPE,
            'BITMAP', (NUM_ROWS * (DECODE(DISTINCT_KEYS, 1, 0.18, 1) + 
              DECODE(DISTINCT_KEYS, 
              0, 0, LOG(35, DISTINCT_KEYS))) + DISTINCT_KEYS * 50) / 
              1024 / 1024,
            (IR.IND_ROW_LEN * DIS.NUM_ROWS - 
              DECODE(IST.COMPRESSION, 'NO', 0, IR.COMP_ROW_LEN * 
              GREATEST(0, NUM_ROWS - DECODE(IST.PREFIX_LENGTH, 1, 
              FIRST_NUM_DIST, DISTINCT_KEYS)))) / 1024 / 1024
            ) * 1.05 DATA_NET_MB,
          DIS.NUM_ROWS,
          DIS.LEAF_BLOCKS LEAF_BLOCKS,
          DIS.USER_STATS,
          DIS.STATTYPE_LOCKED,
          DIS.STALE_STATS,
          DECODE(SIGN(NVL(DIS.LAST_ANALYZED, SYSDATE) - S.CREATED), 
            -1, 'YES', 'NO') RECREATED,
          IR.COL_LEN_NULL,
          IR.IND_ROW_LEN,
          DECODE(BI.INCLUDE_TAB_MODIFICATIONS, 'X', IR.IND_ROW_LEN * 
            (TM.INSERTS - TM.DELETES) / 1024 / 1024, 0) CHANGE_MB,
          BI.NUM_RECORDS,
          BI.SORT_BY,
          DIS.TABLE_NAME,
          S.BYTES,
          BI.MIN_SIZE_MB,
          BI.QUALITY_THRESHOLD,
          BI.UNUSED_MB_THRESHOLD,
          BI.QUALITY_THRESHOLD_2,
          BI.UNUSED_MB_THRESHOLD_2,
          BI.RESTRICTION_INFO,
          IST.PARTITION_POSITION,
          DIS.INDEX_NAME,
          IST.INDEX_TYPE,
          IST.COMPRESSION,
          IST.INDEX_OF_IOT,
          IST.SIZE_POS,
          IST.IO_POS,
          BI.ONLY_SEGMENT_NAMES,
          BI.INCLUDE_OWNER
        FROM 
          INDEX_STORAGE IST,
          TABLE_MODIFICATIONS TM,
          INDEX_STATISTICS DIS,
          INDEX_ROWS IR,
          SEGMENTS S,
          BASIS_INFO BI
        WHERE 
          DIS.OWNER = IST.INDEX_OWNER AND
          DIS.INDEX_NAME = IST.INDEX_NAME AND
          NVL(DIS.PARTITION_NAME, ' ') = NVL(IST.PARTITION_NAME, ' ') AND
          DIS.OWNER = S.OWNER (+) AND
          DIS.INDEX_NAME = S.SEGMENT_NAME (+) AND
          NVL(DIS.PARTITION_NAME, ' ') = NVL(S.PARTITION_NAME (+), ' ') AND
          DIS.OWNER = TM.TABLE_OWNER AND
          DIS.TABLE_OWNER = TM.TABLE_OWNER AND
          DIS.TABLE_NAME = TM.TABLE_NAME AND
          NVL(DIS.PARTITION_NAME, ' ') = NVL(TM.PARTITION_NAME, ' ') AND
          IST.INDEX_NAME = IR.INDEX_NAME AND
          IST.INDEX_OWNER = IR.INDEX_OWNER AND
          IST.INDEX_TYPE IN ( 'NORMAL', 'NORMAL/REV', 'BITMAP', 'IOT - TOP' ) AND
          (BI.MIN_SIZE_MB = -1 OR S.BYTES IS NULL OR S.BYTES / 
            1024 / 1024 >= BI.MIN_SIZE_MB ) AND
          BI.SEGMENT_TYPE IN ('INDEX') AND
          ( BI.INCLUDE_PARTITIONS = 'X' OR DIS.PARTITION_NAME IS NULL ) AND
          ( BI.EXCLUDE_MODIFIED_STATS != 'X' OR DIS.USER_STATS != 'YES' ) AND
          ( BI.EXCLUDE_LOCKED_STATS != 'X' OR DIS.STATTYPE_LOCKED IS NULL ) AND
          ( BI.EXCLUDE_BITMAP_INDEXES != 'X' OR IST.INDEX_TYPE != 'BITMAP' )
      )
    ) 
  ) 
) 
WHERE
  ( QUALITY_THRESHOLD = -1 AND UNUSED_MB_THRESHOLD = -1 OR
    ( ( QUALITY_THRESHOLD = -1 OR QUALITY <= QUALITY_THRESHOLD ) AND
      ( UNUSED_MB_THRESHOLD = -1 OR UNUSED_MB >= UNUSED_MB_THRESHOLD )
    ) OR
    ( ( QUALITY_THRESHOLD_2 != -1 OR UNUSED_MB_THRESHOLD_2 != -1 ) AND
      ( QUALITY_THRESHOLD_2 = -1 OR QUALITY <= QUALITY_THRESHOLD_2 ) AND
      ( UNUSED_MB_THRESHOLD_2 = -1 OR UNUSED_MB >= UNUSED_MB_THRESHOLD_2 )
    )
  ) AND
  ( NUM_RECORDS = -1 OR ROWNUM <= NUM_RECORDS )
)
);
