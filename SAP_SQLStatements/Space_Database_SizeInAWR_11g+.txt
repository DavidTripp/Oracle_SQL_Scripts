SELECT NULL BEGIN_DATE, NULL TOTAL_ALLOC_GB, NULL TOTAL_USED_GB, NULL TABLESPACE_1, NULL USED_GB_1, NULL PCT_1,
  NULL TABLESPACE_2, NULL USED_GB_2, NULL PCT_2, NULL TABLESPACE_3, NULL USED_GB_3, NULL PCT_3,
  NULL TABLESPACE_4, NULL USED_GB_4, NULL PCT_4, NULL TABLESPACE_5, NULL USED_GB_5, NULL PCT_5 FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_DATE, NULL TOTAL_ALLOC_GB, NULL TOTAL_USED_GB, NULL TABLESPACE_1, NULL USED_GB_1, NULL PCT_1,
  NULL TABLESPACE_2, NULL USED_GB_2, NULL PCT_2, NULL TABLESPACE_3, NULL USED_GB_3, NULL PCT_3,
  NULL TABLESPACE_4, NULL USED_GB_4, NULL PCT_4, NULL TABLESPACE_5, NULL USED_GB_5, NULL PCT_5 FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), 
      INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    TABLESPACE_NAME,
    AGGREGATION_FUNCTION,
    DECODE(AGGREGATE_BY,
      'SNAPSHOT',    'YYYY-MM-DD HH24:MI:SS',
      'DAY',         'YYYY-MM-DD (DY)',
      'HOUR_OF_DAY', 'HH24',
      AGGREGATE_BY ) AGGREGATE_BY
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      TO_DATE('01.01.1000 00:07:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:00:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      '%' TABLESPACE_NAME,
      'AVG' AGGREGATION_FUNCTION,     /* MIN, AVG, MAX */
      'DAY' AGGREGATE_BY    /* SNAPSHOT, DAY, HOUR_OF_DAY or Oracle time pattern */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    HSS2.DBID,
    HSS2.INSTANCE_NUMBER,
    HSS2.SNAP_ID,
    HSS1.SNAP_ID PREV_SNAP_ID,
    HSS2.BEGIN_INTERVAL_TIME,
    HSS2.END_INTERVAL_TIME,
    TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
               TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
      INTERVAL_SECONDS,
    DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
  FROM 
    BASIS_INFO BI,
    DBA_HIST_SNAPSHOT HSS1, 
    DBA_HIST_SNAPSHOT HSS2
  WHERE
    HSS2.DBID = BI.DBID AND
    HSS1.DBID (+) = HSS2.DBID AND
    HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER AND
    HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
    HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
  ORDER BY
    HSS2.SNAP_ID
),
TABLESPACES AS
( SELECT /*+ MATERIALIZE */
    TS1.TABLESPACE_NAME,
    TS1.BLOCK_SIZE,
    TS2.TS# TABLESPACE_ID
  FROM
    DBA_TABLESPACES TS1,
    V$TABLESPACE TS2
  WHERE
    TS1.TABLESPACE_NAME = TS2.NAME
),
TABLESPACE_SIZES AS
( SELECT /*+ MATERIALIZE */
    MIN(SS.SNAP_ID) MIN_SNAP_ID,
    TO_CHAR(SS.BEGIN_INTERVAL_TIME, BI.AGGREGATE_BY) BEGIN_DATE,
    NVL(TS.TABLESPACE_NAME, 'unknown (ID=' || TSU.TABLESPACE_ID || ')') TABLESPACE_NAME,
    DECODE(BI.AGGREGATION_FUNCTION,
      'MIN', MIN(TSU.TABLESPACE_SIZE * NVL(TS.BLOCK_SIZE, 8192)),
      'AVG', AVG(TSU.TABLESPACE_SIZE * NVL(TS.BLOCK_SIZE, 8192)),
      'MAX', MAX(TSU.TABLESPACE_SIZE * NVL(TS.BLOCK_SIZE, 8192))) ALLOC_SIZE_BYTE,    
    DECODE(BI.AGGREGATION_FUNCTION,
      'MIN', MIN(TSU.TABLESPACE_USEDSIZE * NVL(TS.BLOCK_SIZE, 8192)),
      'AVG', AVG(TSU.TABLESPACE_USEDSIZE * NVL(TS.BLOCK_SIZE, 8192)),
      'MAX', MAX(TSU.TABLESPACE_USEDSIZE * NVL(TS.BLOCK_SIZE, 8192))) USED_SIZE_BYTE    
  FROM
    BASIS_INFO BI,
    SNAPSHOTS SS,
    DBA_HIST_TBSPC_SPACE_USAGE TSU,
    TABLESPACES TS
  WHERE
    TSU.SNAP_ID = SS.SNAP_ID AND
    TS.TABLESPACE_ID (+) = TSU.TABLESPACE_ID
  GROUP BY
    TO_CHAR(SS.BEGIN_INTERVAL_TIME, BI.AGGREGATE_BY),
    TS.TABLESPACE_NAME,
    TSU.TABLESPACE_ID,
    BI.AGGREGATION_FUNCTION
) 
SELECT
  BEGIN_DATE,
  TO_CHAR(TOTAL_ALLOC_BYTE / 1024 / 1024 / 1024, 9999999990.99) TOTAL_ALLOC_GB,
  TO_CHAR(TOTAL_USED_BYTE / 1024 / 1024 / 1024, 999999990.99) TOTAL_USED_GB,
  TABLESPACE_1,
  TO_CHAR(USED_BYTE_1 / 1024 / 1024 / 1024, 99990.99) USED_GB_1,
  TO_CHAR(DECODE(TOTAL_USED_BYTE, 0, 0, USED_BYTE_1 / TOTAL_USED_BYTE * 100), 9990) PCT_1,
  TABLESPACE_2,
  TO_CHAR(USED_BYTE_2 / 1024 / 1024 / 1024, 99990.99) USED_GB_2,
  TO_CHAR(DECODE(TOTAL_USED_BYTE, 0, 0, USED_BYTE_2 / TOTAL_USED_BYTE * 100), 9990) PCT_2,
  TABLESPACE_3,
  TO_CHAR(USED_BYTE_3 / 1024 / 1024 / 1024, 99990.99) USED_GB_3,
  TO_CHAR(DECODE(TOTAL_USED_BYTE, 0, 0, USED_BYTE_3 / TOTAL_USED_BYTE * 100), 9990) PCT_3,
  TABLESPACE_4,
  TO_CHAR(USED_BYTE_4 / 1024 / 1024 / 1024, 99990.99) USED_GB_4,
  TO_CHAR(DECODE(TOTAL_USED_BYTE, 0, 0, USED_BYTE_4 / TOTAL_USED_BYTE * 100), 9990) PCT_4,
  TABLESPACE_5,
  TO_CHAR(USED_BYTE_5 / 1024 / 1024 / 1024, 99990.99) USED_GB_5,
  TO_CHAR(DECODE(TOTAL_USED_BYTE, 0, 0, USED_BYTE_5 / TOTAL_USED_BYTE * 100), 9990) PCT_5
FROM
( SELECT DISTINCT
    TS.MIN_SNAP_ID,
    TS.BEGIN_DATE,
    SUM(TS.ALLOC_SIZE_BYTE) OVER (PARTITION BY TS.BEGIN_DATE) TOTAL_ALLOC_BYTE,
    SUM(TS.USED_SIZE_BYTE) OVER (PARTITION BY TS.BEGIN_DATE) TOTAL_USED_BYTE,
    NTH_VALUE(TS.TABLESPACE_NAME, 1) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) TABLESPACE_1,
    NTH_VALUE(TS.USED_SIZE_BYTE, 1) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) USED_BYTE_1,
    NTH_VALUE(TS.TABLESPACE_NAME, 2) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) TABLESPACE_2,
    NTH_VALUE(TS.USED_SIZE_BYTE, 2) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) USED_BYTE_2,
    NTH_VALUE(TS.TABLESPACE_NAME, 3) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) TABLESPACE_3,
    NTH_VALUE(TS.USED_SIZE_BYTE, 3) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) USED_BYTE_3,
    NTH_VALUE(TS.TABLESPACE_NAME, 4) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) TABLESPACE_4,
    NTH_VALUE(TS.USED_SIZE_BYTE, 4) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) USED_BYTE_4,
    NTH_VALUE(TS.TABLESPACE_NAME, 5) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) TABLESPACE_5,
    NTH_VALUE(TS.USED_SIZE_BYTE, 5) OVER (PARTITION BY TS.BEGIN_DATE ORDER BY TS.USED_SIZE_BYTE DESC 
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) USED_BYTE_5
  FROM
    BASIS_INFO BI,
    TABLESPACE_SIZES TS
  WHERE
    TS.TABLESPACE_NAME LIKE BI.TABLESPACE_NAME
)
ORDER BY
 MIN_SNAP_ID DESC
));
