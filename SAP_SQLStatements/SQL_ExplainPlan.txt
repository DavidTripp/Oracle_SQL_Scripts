SELECT /*+ ALLOW_HINTS */ NULL LINE, NULL P1, NULL P2, NULL P3 FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL LINE, NULL P1, NULL P2, NULL P3 FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    STATEMENT_ID,
    COLUMN_LINE_LEN,
    PREDICATE_LINE_LEN,
    INCLUDE_PREDICATES
  FROM
  ( SELECT
      '%' STATEMENT_ID,
      200 COLUMN_LINE_LEN,
      60 PREDICATE_LINE_LEN,
      'X' INCLUDE_PREDICATES   
    FROM
      DUAL
  )
),
SQL_PLANS AS
( SELECT 
    STATEMENT_ID,
    ID,
    DEPTH,
    OPTIMIZER,
    OPERATION || DECODE(OPTIONS, NULL, NULL, ' ' || OPTIONS ) ||
      DECODE(OBJECT_NAME, NULL, NULL, ' (' || OBJECT_NAME || ')') ACTION_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', NULL,
      DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS)) SEARCH_COLUMNS_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(ACCESS_PREDICATES, NULL, NULL, 
      SUBSTR(ACCESS_PREDICATES, 1, 3000)), NULL) ACCESS_PREDICATE_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(FILTER_PREDICATES, NULL, NULL, 
      SUBSTR(FILTER_PREDICATES, 1, 3000)), NULL) FILTER_PREDICATE_INFO,
    DECODE(TEMP_SPACE, NULL, NULL, 'Temp space: ' || ROUND(TEMP_SPACE / 1024) || ' KB') SPACE_INFO,
    DECODE(PARTITION_START, NULL, NULL, 'Partitions: ' || PARTITION_START || ' - ' || PARTITION_STOP ||
      ', Partition ID: ' || PARTITION_ID) PARTITION_INFO,
    DECODE(COST, NULL, NULL, 'Total costs: ' || TO_CHAR(COST) ) || 
      DECODE(IO_COST, NULL, NULL, ', I/O costs: ' || TO_CHAR(IO_COST) ) || 
      DECODE(IO_COST, NULL, NULL, DECODE(IO_COST, NULL, NULL, ', CPU costs: ' || TO_CHAR(COST - IO_COST) ) ) || 
      DECODE(CARDINALITY, NULL, NULL, DECODE(IO_COST || COST, NULL, NULL, ', ') || 
      'E-Rows: ' || TO_CHAR(CARDINALITY) ) COST_INFO
  FROM 
  ( SELECT
      PT.STATEMENT_ID,
      PT.ID,
      PT.SEARCH_COLUMNS,
      PT."DEPTH",
      PT.OPERATION,
      PT.OPTIONS,
      PT.OBJECT_NAME,
      PT.ACCESS_PREDICATES,
      PT.FILTER_PREDICATES,
      PT.TEMP_SPACE,
      PT.PARTITION_START,
      PT.PARTITION_STOP,
      PT.PARTITION_ID,
      PT.COST,
      PT.IO_COST,
      PT.CARDINALITY,
      PT.OPTIMIZER,
      BI.INCLUDE_PREDICATES
    FROM
      BASIS_INFO BI,
      PLAN_TABLE PT
    WHERE
      PT.STATEMENT_ID LIKE BI.STATEMENT_ID
  ) 
),
PREDICATE_INFOS AS
( SELECT
    'ACCESS' PREDICATE_TYPE,
    STATEMENT_ID,
    ID,
    DEPTH, 
    ' Access predicates: ' || ACCESS_PREDICATE_INFO || ' ' PREDICATE_INFO
  FROM
    SQL_PLANS
  WHERE
    ACCESS_PREDICATE_INFO IS NOT NULL
  UNION ALL
  ( SELECT
      'FILTER' PREDICATE_TYPE,
      STATEMENT_ID,
      ID,
      DEPTH,
      ' Filter predicates: ' || FILTER_PREDICATE_INFO || ' ' PREDICATE_INFO
    FROM
      SQL_PLANS
    WHERE
      FILTER_PREDICATE_INFO IS NOT NULL
  )
  UNION ALL
  ( SELECT
      'DUMMY' PREDICATE_TYPE,
      'ABC' STATEMENT_ID,
      567 ID,
      789 DEPTH,
      ' XXX ' PREDICATE_INFO
    FROM
      DUAL
  )
),
PRED_START_POSITIONS AS
( SELECT
    *
  FROM
  ( SELECT 
      PI.PREDICATE_TYPE,
      PI.PREDICATE_INFO,
      PI.STATEMENT_ID,
      PI.ID, 
      INSTR(PI.PREDICATE_INFO, ' ', 1, ROWN) POS,
      BI.PREDICATE_LINE_LEN
    FROM
      BASIS_INFO BI,
      PREDICATE_INFOS PI,
      ( SELECT ROWNUM ROWN FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 1000 ) RN
  )
  WHERE
    POS != 0
),
PRED_START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    STATEMENT_ID,
    ID,
    POS1,
    PREDICATE_TYPE || STATEMENT_ID || ID || POS1 CONN_ID1,
    POS2,
    PREDICATE_TYPE || STATEMENT_ID || ID || POS2 CONN_ID2
  FROM
  ( SELECT
      PREDICATE_TYPE,
      PREDICATE_INFO,
      STATEMENT_ID,
      ID,
      POS1,
      NVL(POS2, POS_OVERFLOW) POS2
    FROM
    ( SELECT
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.STATEMENT_ID,
        SP1.ID,
        SP1.POS POS1,
        MAX(SP2.POS) POS2,
        MIN(SP3.POS) POS_OVERFLOW
      FROM
        BASIS_INFO BI,
        PRED_START_POSITIONS SP1,
        PRED_START_POSITIONS SP2,
        PRED_START_POSITIONS SP3
      WHERE
        SP2.PREDICATE_TYPE (+) = SP1.PREDICATE_TYPE AND
        SP2.STATEMENT_ID (+) = SP1.STATEMENT_ID AND
        SP2.ID (+) = SP1.ID AND
        SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + SP1.PREDICATE_LINE_LEN AND
        SP3.PREDICATE_TYPE = SP1.PREDICATE_TYPE AND
        SP3.STATEMENT_ID = SP1.STATEMENT_ID AND
        SP3.ID = SP1.ID AND
        SP3.POS > SP1.POS
      GROUP BY
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.STATEMENT_ID,
        SP1.ID,
        SP1.POS
    )
  )  
),
PRED_START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    STATEMENT_ID,
    ID,
    POS1,
    POS2,
    ROW_NUMBER () OVER (ORDER BY POS1) LINE
  FROM
    PRED_START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR 
    CONN_ID2 = CONN_ID1
),
LINES AS
( SELECT 1 NUM, 'ACTION' CONTENT FROM DUAL
  UNION ALL
  SELECT 2 NUM, 'COST' CONTENT FROM DUAL 
  UNION ALL
  SELECT 3 NUM, 'SEARCH COLUMNS' CONTENT FROM DUAL
  UNION ALL
  SELECT 4 NUM, 'ACCESS PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 5 NUM, 'FILTER PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 6 NUM, 'SPACE' CONTENT FROM DUAL
  UNION ALL
  SELECT 7 NUM, 'PARTITION' CONTENT FROM DUAL
  UNION ALL
  SELECT 8 NUM, 'PX' CONTENT FROM DUAL
  UNION ALL
  SELECT 9 NUM, 'PLAN STATISTICS' CONTENT FROM DUAL
  UNION ALL
  SELECT 10 NUM, 'EMPTY' CONTENT FROM DUAL
)
SELECT
  LINE,
  SQL_PLAN_STEP1,
  SQL_PLAN_STEP2,
  SQL_PLAN_STEP3
FROM 
( SELECT
    LINE,
    SUBSTR(SQL_PLAN_STEP, 1, COLUMN_LINE_LEN) SQL_PLAN_STEP1,
    SUBSTR(SQL_PLAN_STEP, COLUMN_LINE_LEN + 1, COLUMN_LINE_LEN) SQL_PLAN_STEP2,
    SUBSTR(SQL_PLAN_STEP, COLUMN_LINE_LEN * 2 + 1, COLUMN_LINE_LEN) SQL_PLAN_STEP3,
    MAX(ROWNUM) OVER () MAX_ROWNUM
  FROM
  ( SELECT
      DECODE(L.NUM, 1, TO_CHAR(SP.ID, 990)) LINE,
      LPAD(' ', SP.DEPTH * 2) ||
        DECODE(L.CONTENT, 
          'ACTION',           ACTION_INFO || DECODE(SP.ID, 0, 
                              ' (EXPLAIN from PLAN_TABLE, Statement ID: ' || SP.STATEMENT_ID || ')'),
          'COST',             '  ' || COST_INFO,
          'SEARCH COLUMNS',   '  ' || SEARCH_COLUMNS_INFO,
          'ACCESS PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') || 
                              SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
          'FILTER PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') || 
                              SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
          'SPACE',            '  ' || SPACE_INFO,
          'PARTITION',        '  ' || PARTITION_INFO,
          'EMPTY',            ' ') SQL_PLAN_STEP,
      BI.COLUMN_LINE_LEN
    FROM
      BASIS_INFO BI,
      LINES L,
      SQL_PLANS SP,
      PRED_START_END_LINE_POSITIONS PL
    WHERE
      ( L.CONTENT = 'ACTION' AND PL.LINE = 1 OR
        L.CONTENT = 'COST' AND SP.COST_INFO IS NOT NULL AND PL.LINE = 1  OR
        L.CONTENT = 'SEARCH COLUMNS' AND SP.SEARCH_COLUMNS_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'ACCESS PREDICATE' AND SP.ACCESS_PREDICATE_INFO IS NOT NULL AND 
          PL.PREDICATE_TYPE = 'ACCESS' AND PL.STATEMENT_ID = SP.STATEMENT_ID AND PL.ID = SP.ID OR
        L.CONTENT = 'FILTER PREDICATE' AND SP.FILTER_PREDICATE_INFO IS NOT NULL AND 
          PL.PREDICATE_TYPE = 'FILTER' AND PL.STATEMENT_ID = SP.STATEMENT_ID AND PL.ID = SP.ID OR
        L.CONTENT = 'SPACE'            AND SP.SPACE_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PARTITION'        AND SP.PARTITION_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'EMPTY' AND PL.LINE = 1
      )
    ORDER BY
      SP.STATEMENT_ID,
      SP.ID,
      L.NUM,
      PL.POS1 
  )
)
WHERE
  ROWNUM < MAX_ROWNUM
));
