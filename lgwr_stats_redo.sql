SELECT NULL BEGIN_TIME, NULL "REDO_GB/H", NULL "WRITES/S", NULL "KB/WRITE",
  NULL "MS/WRT_REQ", NULL "WRT_MB/S", NULL "WRT_BUSY_%", NULL "SYNCS/S", 
  NULL "MS/SYNC", NULL SYNC_SESS, NULL "COMMITS/S" FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL BEGIN_TIME, NULL "REDO_GB/H", NULL "WRITES/S", NULL "KB/WRITE",
  NULL "MS/WRT_REQ", NULL "WRT_MB/S", NULL "WRT_BUSY_%", NULL "SYNCS/S",
  NULL "MS/SYNC", NULL SYNC_SESS, NULL "COMMITS/S" FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT 
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), 
      INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'), 
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    DECODE(AGGREGATE_BY,
      'SNAPSHOT',    'YYYY-MM-DD HH24:MI:SS',
      'DAY',         'YYYY-MM-DD (DY)',
      'HOUR_OF_DAY', 'HH24',
      AGGREGATE_BY ) AGGREGATE_BY
  FROM
  ( SELECT
      -1 DBID,
      -1 INSTANCE_NUMBER,
      TO_DATE('01.01.1000 09:07:00', 'dd.mm.yyyy hh24:mi:ss') BEGIN_DATE,
      TO_DATE('31.12.9999 18:00:00', 'dd.mm.yyyy hh24:mi:ss') END_DATE,
      'SNAPSHOT' AGGREGATE_BY    /* SNAPSHOT, DAY, HOUR_OF_DAY or Oracle time pattern */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */ 
    HSS2.DBID,
    HSS2.INSTANCE_NUMBER,
    HSS2.SNAP_ID,
    HSS1.SNAP_ID PREV_SNAP_ID,
    HSS2.BEGIN_INTERVAL_TIME,
    HSS2.END_INTERVAL_TIME,
    TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') - 
               TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
      INTERVAL_SECONDS,
    DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
  FROM 
    BASIS_INFO BI,
    DBA_HIST_SNAPSHOT HSS1, 
    DBA_HIST_SNAPSHOT HSS2
  WHERE
    HSS2.DBID = BI.DBID AND
    HSS1.DBID (+) = HSS2.DBID AND
    HSS2.INSTANCE_NUMBER = BI.INSTANCE_NUMBER AND
    HSS1.INSTANCE_NUMBER (+) = HSS2.INSTANCE_NUMBER AND
    HSS2.END_INTERVAL_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    HSS1.SNAP_ID (+) = HSS2.SNAP_ID - 1
  ORDER BY
    HSS2.SNAP_ID
)
SELECT
  BEGIN_TIME,
  TO_CHAR(DECODE(SECONDS, 0, 0, REDO_SIZE_MB / SECONDS * 3600 / 1024), 99990.99) "REDO_GB/H",
  TO_CHAR(DECODE(SECONDS, 0, 0, REDO_WRITES / SECONDS), 9990.99) "WRITES/S",
  TO_CHAR(DECODE(REDO_WRITES, 0, 0, REDO_SIZE_MB / REDO_WRITES * 1000), 99999.99) "KB/WRITE",
  TO_CHAR(DECODE(REDO_WRITES, 0, 0, WRITE_TIME_S / REDO_WRITES * 1000), 999990.99) "MS/WRT_REQ",
  TO_CHAR(DECODE(WRITE_TIME_S, 0, 0, REDO_SIZE_MB / WRITE_TIME_S), 9990.99) "WRT_MB/S",
  TO_CHAR(DECODE(SECONDS, 0, 0, WRITE_TIME_S / SECONDS * 100), 999990.99) "WRT_BUSY_%",
  TO_CHAR(DECODE(SECONDS, 0, 0, SYNC_REQS / SECONDS), 9990.99) "SYNCS/S",
  TO_CHAR(DECODE(SYNC_REQS, 0, 0, SYNC_TIME_S / SYNC_REQS * 1000), 9990.99) "MS/SYNC",
  TO_CHAR(DECODE(SECONDS, 0, 0, SYNC_TIME_S / SECONDS), 99990.99) SYNC_SESS,
  TO_CHAR(DECODE(SECONDS, 0, 0, COMMITS / SECONDS), 99990.99) "COMMITS/S"
FROM
( SELECT
    TO_CHAR(BEGIN_INTERVAL_TIME, AGGREGATE_BY) BEGIN_TIME,
    SUM(SECONDS) SECONDS,
    SUM(REDO_SIZE_MB) REDO_SIZE_MB,
    SUM(REDO_WRITES) REDO_WRITES, 
    SUM(WRITE_TIME_S) WRITE_TIME_S,
    SUM(SYNC_REQS) SYNC_REQS,
    SUM(SYNC_TIME_S) SYNC_TIME_S,
    SUM(COMMITS) COMMITS
  FROM    
  ( SELECT
      SS.BEGIN_INTERVAL_TIME, 
      SS.INTERVAL_SECONDS SECONDS,
      DECODE(SS.RESTART, 'YES', HSY1.VALUE, HSY1.VALUE - 
        LAG(HSY1.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) / 1024 / 1024 REDO_SIZE_MB,
      DECODE(SS.RESTART, 'YES', HSY2.VALUE, HSY2.VALUE - 
        LAG(HSY2.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) REDO_WRITES,
      DECODE(SS.RESTART, 'YES', HSY3.VALUE, HSY3.VALUE - 
        LAG(HSY3.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) / 100 WRITE_TIME_S,
      DECODE(SS.RESTART, 'YES', HSY4.VALUE, HSY4.VALUE - 
        LAG(HSY4.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) SYNC_REQS,
      DECODE(SS.RESTART, 'YES', HSY5.VALUE, HSY5.VALUE - 
        LAG(HSY5.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) / 100 SYNC_TIME_S,
      DECODE(SS.RESTART, 'YES', HSY6.VALUE, HSY6.VALUE - 
        LAG(HSY6.VALUE, 1) OVER (ORDER BY SS.SNAP_ID)) COMMITS,
      SS.PREV_SNAP_ID,
      BI.AGGREGATE_BY
    FROM 
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_SYSSTAT HSY1, 
      DBA_HIST_SYSSTAT HSY2, 
      DBA_HIST_SYSSTAT HSY3,
      DBA_HIST_SYSSTAT HSY4,
      DBA_HIST_SYSSTAT HSY5,
      DBA_HIST_SYSSTAT HSY6
    WHERE
      HSY1.DBID = SS.DBID AND
      HSY2.DBID = SS.DBID AND
      HSY3.DBID = SS.DBID AND
      HSY4.DBID = SS.DBID AND
      HSY5.DBID = SS.DBID AND
      HSY6.DBID = SS.DBID AND
      HSY1.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSY2.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSY3.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSY4.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSY5.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSY6.INSTANCE_NUMBER = SS.INSTANCE_NUMBER AND
      HSY1.SNAP_ID = SS.SNAP_ID AND
      HSY2.SNAP_ID = SS.SNAP_ID AND
      HSY3.SNAP_ID = SS.SNAP_ID AND
      HSY4.SNAP_ID = SS.SNAP_ID AND
      HSY5.SNAP_ID = SS.SNAP_ID AND
      HSY6.SNAP_ID = SS.SNAP_ID AND
      HSY1.STAT_NAME = 'redo size' AND
      HSY2.STAT_NAME = 'redo writes' AND
      HSY3.STAT_NAME = 'redo write time' AND
      HSY4.STAT_NAME = 'redo synch writes' AND
      HSY5.STAT_NAME = 'redo synch time' AND
      HSY6.STAT_NAME = 'user commits'
  )
  WHERE 
    PREV_SNAP_ID IS NOT NULL
  GROUP BY
    TO_CHAR(BEGIN_INTERVAL_TIME, AGGREGATE_BY)
  ORDER BY
    1 DESC
)
));